{
  "0x989e45fd82f7955ced3ad2c0156714f5a55517657ac6433326bb36214ad97714": {
    "name": "Rooster",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Rooster",
      "sourceName": "contracts/Rooster.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "baseUri_",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "roosterId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "breed",
              "type": "uint256"
            }
          ],
          "name": "BreedSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "MinterRoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "MinterRoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnerPulled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "pushedOwner",
              "type": "address"
            }
          ],
          "name": "OwnerPushed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "baseUri",
              "type": "string"
            }
          ],
          "name": "UpdateBaseUri",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "breeds",
              "type": "uint256[]"
            }
          ],
          "name": "batchMint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "roosterId",
              "type": "uint256"
            }
          ],
          "name": "breeds",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantMinterRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "isMinter",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "breed",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "newOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pullOwner",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "pushOwner",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeMinterRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "roosterIds",
              "type": "uint256[]"
            }
          ],
          "name": "safeBatchTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newUri",
              "type": "string"
            }
          ],
          "name": "setBaseUri",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "roosterId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526000600b553480156200001657600080fd5b506040516200204e3803806200204e833981016040819052620000399162000295565b604051806040016040528060078152602001662937b7b9ba32b960c91b815250604051806040016040528060078152602001662927a7a9aa22a960c91b815250816000908051906020019062000091929190620001a6565b508051620000a7906001906020840190620001a6565b5050600680546001600160a81b0319166101003390810291909117909155604051600092507faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c73908390a3620000fc8162000103565b50620003bf565b60065461010090046001600160a01b03163314620001545760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b805162000169906009906020840190620001a6565b507f157eb1fffc1000c7f0ee8cb1f87be2620ec910b8be9e3af7db8c97328e2757cf816040516200019b91906200034d565b60405180910390a150565b828054620001b49062000382565b90600052602060002090601f016020900481019282620001d8576000855562000223565b82601f10620001f357805160ff191683800117855562000223565b8280016001018555821562000223579182015b828111156200022357825182559160200191906001019062000206565b506200023192915062000235565b5090565b5b8082111562000231576000815560010162000236565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200027f57818101518382015260200162000265565b838111156200028f576000848401525b50505050565b600060208284031215620002a857600080fd5b81516001600160401b0380821115620002c057600080fd5b818401915084601f830112620002d557600080fd5b815181811115620002ea57620002ea6200024c565b604051601f8201601f19908116603f011681019083821181831017156200031557620003156200024c565b816040528281528760208487010111156200032f57600080fd5b6200034283602083016020880162000262565b979650505050505050565b60208152600082518060208401526200036e81604085016020870162000262565b601f01601f19169190910160400192915050565b600181811c908216806200039757607f821691505b60208210811415620003b957634e487b7160e01b600052602260045260246000fd5b50919050565b611c7f80620003cf6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063a0bcfc7f116100a2578063b88d4fde11610071578063b88d4fde146103f9578063c87b56dd1461040c578063d4ee1d901461041f578063e985e9c51461043257600080fd5b8063a0bcfc7f1461039d578063a22cb465146103b0578063aa271e1a146103c3578063ac5a7d5c146103e657600080fd5b806370a08231116100de57806370a08231146103555780638456cb59146103755780638da5cb5b1461037d57806395d89b411461039557600080fd5b80636352211e1461031157806369e2f0fb1461033a5780636cef16e61461034d57600080fd5b80632c0209f51161017157806340c10f191161014b57806340c10f19146102cd57806342842e0e146102e05780634684d7e9146102f35780635c975abb1461030657600080fd5b80632c0209f51461029f5780633dd1eb61146102b25780633f4ba83a146102c557600080fd5b8063081812fc116101ad578063081812fc14610226578063095ea7b31461026757806318160ddd1461027a57806323b872dd1461028c57600080fd5b806301ffc9a7146101d4578063034601ec146101fc57806306fdde0314610211575b600080fd5b6101e76101e23660046115ab565b610460565b60405190151581526020015b60405180910390f35b61020f61020a3660046116b2565b6104b2565b005b6102196104f0565b6040516101f39190611768565b61024f61023436600461177b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b61020f610275366004611794565b61057e565b600b545b6040519081526020016101f3565b61020f61029a3660046117be565b610665565b61027e6102ad36600461177b565b61082c565b61020f6102c03660046117fa565b6108a3565b61020f6109bf565b61020f6102db366004611794565b6109f8565b61020f6102ee3660046117be565b610a60565b61020f610301366004611815565b610b3f565b60065460ff166101e7565b61024f61031f36600461177b565b6003602052600090815260409020546001600160a01b031681565b61020f6103483660046117fa565b610bd3565b61020f610ca1565b61027e6103633660046117fa565b60026020526000908152604090205481565b61020f610d46565b60065461024f9061010090046001600160a01b031681565b610219610d7d565b61020f6103ab3660046118bb565b610d8a565b61020f6103be366004611904565b610e07565b6101e76103d13660046117fa565b60086020526000908152604090205460ff1681565b61020f6103f43660046117fa565b610e73565b61020f610407366004611940565b610f32565b61021961041a36600461177b565b610ffd565b60075461024f906001600160a01b031681565b6101e76104403660046119bc565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061049157506380ac58cd60e01b6001600160e01b03198316145b806104ac5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60005b81518110156104ea576104e284848484815181106104d5576104d56119ef565b6020026020010151610a60565b6001016104b5565b50505050565b600080546104fd90611a05565b80601f016020809104026020016040519081016040528092919081815260200182805461052990611a05565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b505050505081565b6000818152600360205260409020546001600160a01b0316338114806105c757506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106095760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600360205260409020546001600160a01b038481169116146106bb5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610600565b6001600160a01b0382166107055760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b336001600160a01b038416148061073257506000818152600460205260409020546001600160a01b031633145b8061076057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b61079d5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610600565b6001600160a01b0380841660008181526002602090815260408083208054600019019055938616808352848320805460010190558583526003825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600360205260408120546001600160a01b03166108905760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b506000908152600a602052604090205490565b60065461010090046001600160a01b031633146108d25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b0381166109185760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b6001600160a01b03811660009081526008602052604090205460ff16156109735760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4819dc985b9d1959608a1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517fbd42b6cd963a984d8cbff85acad4dd2c87a6d85ac756d16e6d2ec5ce6c8f07309190a250565b60065461010090046001600160a01b031633146109ee5760405162461bcd60e51b815260040161060090611a40565b6109f6611096565b565b3360009081526008602052604090205460ff16610a455760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b805460018101909155610a5b838284611129565b505050565b610a6b838383610665565b6001600160a01b0382163b1580610b235750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a401602060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611a64565b6001600160e01b031916145b610a5b5760405162461bcd60e51b815260040161060090611a81565b3360009081526008602052604090205460ff16610b8c5760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b5460005b8251811015610bcb57610bbf8483858481518110610bb257610bb26119ef565b6020026020010151611129565b60019182019101610b92565b50600b555050565b60065461010090046001600160a01b03163314610c025760405162461bcd60e51b815260040161060090611a40565b6001600160a01b03811660009081526008602052604090205460ff16610c585760405162461bcd60e51b815260206004820152600b60248201526a139bdd0819dc985b9d195960aa1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19169055517ff474b72f3e21ebafdad7dadfcb99ae7eabdbf538d52a0e0eecbf8ce0fa7043fe9190a250565b6007546001600160a01b03163314610cec5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c903732bb9037bbb732b960911b6044820152606401610600565b60068054610100600160a81b031981166101003381810292909217909355604051929091046001600160a01b03169182907faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c7390600090a350565b60065461010090046001600160a01b03163314610d755760405162461bcd60e51b815260040161060090611a40565b6109f661113d565b600180546104fd90611a05565b60065461010090046001600160a01b03163314610db95760405162461bcd60e51b815260040161060090611a40565b8051610dcc9060099060208401906114f9565b507f157eb1fffc1000c7f0ee8cb1f87be2620ec910b8be9e3af7db8c97328e2757cf81604051610dfc9190611768565b60405180910390a150565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60065461010090046001600160a01b03163314610ea25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b038116610ee85760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b600780546001600160a01b0319166001600160a01b0383169081179091556040517fd52a054f85e9a057277cd95bf6d5da45465068f0467ec7991f3fcc017be6b72590600090a250565b610f3d848484610665565b6001600160a01b0383163b1580610fe15750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a0290610f83903390899088908890600401611aab565b602060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190611a64565b6001600160e01b031916145b6104ea5760405162461bcd60e51b815260040161060090611a81565b6000818152600360205260409020546060906001600160a01b03166110645760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b600961106f836111b8565b604051602001611080929190611b04565b6040516020818303038152906040529050919050565b60065460ff166110df5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610600565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61113383836112be565b610a5b828261139d565b60065460ff16156111835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610600565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861110c3390565b6060816111dc5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561120657806111f081611bc1565b91506111ff9050600a83611bf2565b91506111e0565b60008167ffffffffffffffff811115611221576112216115eb565b6040519080825280601f01601f19166020018201604052801561124b576020820181803683370190505b5090505b84156112b657611260600183611c06565b915061126d600a86611c1d565b611278906030611c31565b60f81b81838151811061128d5761128d6119ef565b60200101906001600160f81b031916908160001a9053506112af600a86611bf2565b945061124f565b949350505050565b6112c882826113ee565b6001600160a01b0382163b158061137d5750604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a401602060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611a64565b6001600160e01b031916145b6113995760405162461bcd60e51b815260040161060090611a81565b5050565b6000828152600a6020526040908190208290555182907fe46d199dd459049fd4c9c752a8b7559ad5dbc0ddb9b399cd9db4636fd5aa8a83906113e29084815260200190565b60405180910390a25050565b6001600160a01b0382166114385760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b6000818152600360205260409020546001600160a01b03161561148e5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610600565b6001600160a01b038216600081815260026020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461150590611a05565b90600052602060002090601f016020900481019282611527576000855561156d565b82601f1061154057805160ff191683800117855561156d565b8280016001018555821561156d579182015b8281111561156d578251825591602001919060010190611552565b5061157992915061157d565b5090565b5b80821115611579576000815560010161157e565b6001600160e01b0319811681146115a857600080fd5b50565b6000602082840312156115bd57600080fd5b81356115c881611592565b9392505050565b80356001600160a01b03811681146115e657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561162a5761162a6115eb565b604052919050565b600082601f83011261164357600080fd5b8135602067ffffffffffffffff82111561165f5761165f6115eb565b8160051b61166e828201611601565b928352848101820192828101908785111561168857600080fd5b83870192505b848310156116a75782358252918301919083019061168e565b979650505050505050565b6000806000606084860312156116c757600080fd5b6116d0846115cf565b92506116de602085016115cf565b9150604084013567ffffffffffffffff8111156116fa57600080fd5b61170686828701611632565b9150509250925092565b60005b8381101561172b578181015183820152602001611713565b838111156104ea5750506000910152565b60008151808452611754816020860160208601611710565b601f01601f19169290920160200192915050565b6020815260006115c8602083018461173c565b60006020828403121561178d57600080fd5b5035919050565b600080604083850312156117a757600080fd5b6117b0836115cf565b946020939093013593505050565b6000806000606084860312156117d357600080fd5b6117dc846115cf565b92506117ea602085016115cf565b9150604084013590509250925092565b60006020828403121561180c57600080fd5b6115c8826115cf565b6000806040838503121561182857600080fd5b611831836115cf565b9150602083013567ffffffffffffffff81111561184d57600080fd5b61185985828601611632565b9150509250929050565b600067ffffffffffffffff83111561187d5761187d6115eb565b611890601f8401601f1916602001611601565b90508281528383830111156118a457600080fd5b828260208301376000602084830101529392505050565b6000602082840312156118cd57600080fd5b813567ffffffffffffffff8111156118e457600080fd5b8201601f810184136118f557600080fd5b6112b684823560208401611863565b6000806040838503121561191757600080fd5b611920836115cf565b91506020830135801515811461193557600080fd5b809150509250929050565b6000806000806080858703121561195657600080fd5b61195f856115cf565b935061196d602086016115cf565b925060408501359150606085013567ffffffffffffffff81111561199057600080fd5b8501601f810187136119a157600080fd5b6119b087823560208401611863565b91505092959194509250565b600080604083850312156119cf57600080fd5b6119d8836115cf565b91506119e6602084016115cf565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611a1957607f821691505b60208210811415611a3a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a908201526927b7363c9037bbb732b960b11b604082015260600190565b600060208284031215611a7657600080fd5b81516115c881611592565b60208082526010908201526f155394d0519157d49150d2541251539560821b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ade9083018461173c565b9695505050505050565b60008151611afa818560208601611710565b9290920192915050565b600080845481600182811c915080831680611b2057607f831692505b6020808410821415611b4057634e487b7160e01b86526022600452602486fd5b818015611b545760018114611b6557611b92565b60ff19861689528489019650611b92565b60008b81526020902060005b86811015611b8a5781548b820152908501908301611b71565b505084890196505b505050505050611ba28185611ae8565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bd557611bd5611bab565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611c0157611c01611bdc565b500490565b600082821015611c1857611c18611bab565b500390565b600082611c2c57611c2c611bdc565b500690565b60008219821115611c4457611c44611bab565b50019056fea2646970667358221220622a4bf4b5069fd86fd0332fdd1434a9e61297949b032236b89c924618ef39f364736f6c63430008090033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063a0bcfc7f116100a2578063b88d4fde11610071578063b88d4fde146103f9578063c87b56dd1461040c578063d4ee1d901461041f578063e985e9c51461043257600080fd5b8063a0bcfc7f1461039d578063a22cb465146103b0578063aa271e1a146103c3578063ac5a7d5c146103e657600080fd5b806370a08231116100de57806370a08231146103555780638456cb59146103755780638da5cb5b1461037d57806395d89b411461039557600080fd5b80636352211e1461031157806369e2f0fb1461033a5780636cef16e61461034d57600080fd5b80632c0209f51161017157806340c10f191161014b57806340c10f19146102cd57806342842e0e146102e05780634684d7e9146102f35780635c975abb1461030657600080fd5b80632c0209f51461029f5780633dd1eb61146102b25780633f4ba83a146102c557600080fd5b8063081812fc116101ad578063081812fc14610226578063095ea7b31461026757806318160ddd1461027a57806323b872dd1461028c57600080fd5b806301ffc9a7146101d4578063034601ec146101fc57806306fdde0314610211575b600080fd5b6101e76101e23660046115ab565b610460565b60405190151581526020015b60405180910390f35b61020f61020a3660046116b2565b6104b2565b005b6102196104f0565b6040516101f39190611768565b61024f61023436600461177b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b61020f610275366004611794565b61057e565b600b545b6040519081526020016101f3565b61020f61029a3660046117be565b610665565b61027e6102ad36600461177b565b61082c565b61020f6102c03660046117fa565b6108a3565b61020f6109bf565b61020f6102db366004611794565b6109f8565b61020f6102ee3660046117be565b610a60565b61020f610301366004611815565b610b3f565b60065460ff166101e7565b61024f61031f36600461177b565b6003602052600090815260409020546001600160a01b031681565b61020f6103483660046117fa565b610bd3565b61020f610ca1565b61027e6103633660046117fa565b60026020526000908152604090205481565b61020f610d46565b60065461024f9061010090046001600160a01b031681565b610219610d7d565b61020f6103ab3660046118bb565b610d8a565b61020f6103be366004611904565b610e07565b6101e76103d13660046117fa565b60086020526000908152604090205460ff1681565b61020f6103f43660046117fa565b610e73565b61020f610407366004611940565b610f32565b61021961041a36600461177b565b610ffd565b60075461024f906001600160a01b031681565b6101e76104403660046119bc565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061049157506380ac58cd60e01b6001600160e01b03198316145b806104ac5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60005b81518110156104ea576104e284848484815181106104d5576104d56119ef565b6020026020010151610a60565b6001016104b5565b50505050565b600080546104fd90611a05565b80601f016020809104026020016040519081016040528092919081815260200182805461052990611a05565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b505050505081565b6000818152600360205260409020546001600160a01b0316338114806105c757506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106095760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600360205260409020546001600160a01b038481169116146106bb5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610600565b6001600160a01b0382166107055760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b336001600160a01b038416148061073257506000818152600460205260409020546001600160a01b031633145b8061076057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b61079d5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610600565b6001600160a01b0380841660008181526002602090815260408083208054600019019055938616808352848320805460010190558583526003825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600360205260408120546001600160a01b03166108905760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b506000908152600a602052604090205490565b60065461010090046001600160a01b031633146108d25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b0381166109185760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b6001600160a01b03811660009081526008602052604090205460ff16156109735760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4819dc985b9d1959608a1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517fbd42b6cd963a984d8cbff85acad4dd2c87a6d85ac756d16e6d2ec5ce6c8f07309190a250565b60065461010090046001600160a01b031633146109ee5760405162461bcd60e51b815260040161060090611a40565b6109f6611096565b565b3360009081526008602052604090205460ff16610a455760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b805460018101909155610a5b838284611129565b505050565b610a6b838383610665565b6001600160a01b0382163b1580610b235750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a401602060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611a64565b6001600160e01b031916145b610a5b5760405162461bcd60e51b815260040161060090611a81565b3360009081526008602052604090205460ff16610b8c5760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b5460005b8251811015610bcb57610bbf8483858481518110610bb257610bb26119ef565b6020026020010151611129565b60019182019101610b92565b50600b555050565b60065461010090046001600160a01b03163314610c025760405162461bcd60e51b815260040161060090611a40565b6001600160a01b03811660009081526008602052604090205460ff16610c585760405162461bcd60e51b815260206004820152600b60248201526a139bdd0819dc985b9d195960aa1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19169055517ff474b72f3e21ebafdad7dadfcb99ae7eabdbf538d52a0e0eecbf8ce0fa7043fe9190a250565b6007546001600160a01b03163314610cec5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c903732bb9037bbb732b960911b6044820152606401610600565b60068054610100600160a81b031981166101003381810292909217909355604051929091046001600160a01b03169182907faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c7390600090a350565b60065461010090046001600160a01b03163314610d755760405162461bcd60e51b815260040161060090611a40565b6109f661113d565b600180546104fd90611a05565b60065461010090046001600160a01b03163314610db95760405162461bcd60e51b815260040161060090611a40565b8051610dcc9060099060208401906114f9565b507f157eb1fffc1000c7f0ee8cb1f87be2620ec910b8be9e3af7db8c97328e2757cf81604051610dfc9190611768565b60405180910390a150565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60065461010090046001600160a01b03163314610ea25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b038116610ee85760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b600780546001600160a01b0319166001600160a01b0383169081179091556040517fd52a054f85e9a057277cd95bf6d5da45465068f0467ec7991f3fcc017be6b72590600090a250565b610f3d848484610665565b6001600160a01b0383163b1580610fe15750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a0290610f83903390899088908890600401611aab565b602060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190611a64565b6001600160e01b031916145b6104ea5760405162461bcd60e51b815260040161060090611a81565b6000818152600360205260409020546060906001600160a01b03166110645760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b600961106f836111b8565b604051602001611080929190611b04565b6040516020818303038152906040529050919050565b60065460ff166110df5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610600565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61113383836112be565b610a5b828261139d565b60065460ff16156111835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610600565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861110c3390565b6060816111dc5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561120657806111f081611bc1565b91506111ff9050600a83611bf2565b91506111e0565b60008167ffffffffffffffff811115611221576112216115eb565b6040519080825280601f01601f19166020018201604052801561124b576020820181803683370190505b5090505b84156112b657611260600183611c06565b915061126d600a86611c1d565b611278906030611c31565b60f81b81838151811061128d5761128d6119ef565b60200101906001600160f81b031916908160001a9053506112af600a86611bf2565b945061124f565b949350505050565b6112c882826113ee565b6001600160a01b0382163b158061137d5750604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a401602060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611a64565b6001600160e01b031916145b6113995760405162461bcd60e51b815260040161060090611a81565b5050565b6000828152600a6020526040908190208290555182907fe46d199dd459049fd4c9c752a8b7559ad5dbc0ddb9b399cd9db4636fd5aa8a83906113e29084815260200190565b60405180910390a25050565b6001600160a01b0382166114385760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b6000818152600360205260409020546001600160a01b03161561148e5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610600565b6001600160a01b038216600081815260026020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461150590611a05565b90600052602060002090601f016020900481019282611527576000855561156d565b82601f1061154057805160ff191683800117855561156d565b8280016001018555821561156d579182015b8281111561156d578251825591602001919060010190611552565b5061157992915061157d565b5090565b5b80821115611579576000815560010161157e565b6001600160e01b0319811681146115a857600080fd5b50565b6000602082840312156115bd57600080fd5b81356115c881611592565b9392505050565b80356001600160a01b03811681146115e657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561162a5761162a6115eb565b604052919050565b600082601f83011261164357600080fd5b8135602067ffffffffffffffff82111561165f5761165f6115eb565b8160051b61166e828201611601565b928352848101820192828101908785111561168857600080fd5b83870192505b848310156116a75782358252918301919083019061168e565b979650505050505050565b6000806000606084860312156116c757600080fd5b6116d0846115cf565b92506116de602085016115cf565b9150604084013567ffffffffffffffff8111156116fa57600080fd5b61170686828701611632565b9150509250925092565b60005b8381101561172b578181015183820152602001611713565b838111156104ea5750506000910152565b60008151808452611754816020860160208601611710565b601f01601f19169290920160200192915050565b6020815260006115c8602083018461173c565b60006020828403121561178d57600080fd5b5035919050565b600080604083850312156117a757600080fd5b6117b0836115cf565b946020939093013593505050565b6000806000606084860312156117d357600080fd5b6117dc846115cf565b92506117ea602085016115cf565b9150604084013590509250925092565b60006020828403121561180c57600080fd5b6115c8826115cf565b6000806040838503121561182857600080fd5b611831836115cf565b9150602083013567ffffffffffffffff81111561184d57600080fd5b61185985828601611632565b9150509250929050565b600067ffffffffffffffff83111561187d5761187d6115eb565b611890601f8401601f1916602001611601565b90508281528383830111156118a457600080fd5b828260208301376000602084830101529392505050565b6000602082840312156118cd57600080fd5b813567ffffffffffffffff8111156118e457600080fd5b8201601f810184136118f557600080fd5b6112b684823560208401611863565b6000806040838503121561191757600080fd5b611920836115cf565b91506020830135801515811461193557600080fd5b809150509250929050565b6000806000806080858703121561195657600080fd5b61195f856115cf565b935061196d602086016115cf565b925060408501359150606085013567ffffffffffffffff81111561199057600080fd5b8501601f810187136119a157600080fd5b6119b087823560208401611863565b91505092959194509250565b600080604083850312156119cf57600080fd5b6119d8836115cf565b91506119e6602084016115cf565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611a1957607f821691505b60208210811415611a3a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a908201526927b7363c9037bbb732b960b11b604082015260600190565b600060208284031215611a7657600080fd5b81516115c881611592565b60208082526010908201526f155394d0519157d49150d2541251539560821b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ade9083018461173c565b9695505050505050565b60008151611afa818560208601611710565b9290920192915050565b600080845481600182811c915080831680611b2057607f831692505b6020808410821415611b4057634e487b7160e01b86526022600452602486fd5b818015611b545760018114611b6557611b92565b60ff19861689528489019650611b92565b60008b81526020902060005b86811015611b8a5781548b820152908501908301611b71565b505084890196505b505050505050611ba28185611ae8565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bd557611bd5611bab565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611c0157611c01611bdc565b500490565b600082821015611c1857611c18611bab565b500390565b600082611c2c57611c2c611bdc565b500690565b60008219821115611c4457611c44611bab565b50019056fea2646970667358221220622a4bf4b5069fd86fd0332fdd1434a9e61297949b032236b89c924618ef39f364736f6c63430008090033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_131": {
              "entryPoint": null,
              "id": 131,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_4584": {
              "entryPoint": null,
              "id": 4584,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_5078": {
              "entryPoint": null,
              "id": 5078,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_7376": {
              "entryPoint": null,
              "id": 7376,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setBaseUri_7598": {
              "entryPoint": 259,
              "id": 7598,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
              "entryPoint": 661,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 845,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_17d9f114efaa93d67eedad749dd7fd16a6895ff93e28b7a30c667a069f2ed42d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 610,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 898,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 588,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:2407:35",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:35",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:35",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:35",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:35",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:35",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:35",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:35"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "199:205:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "209:10:35",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "218:1:35",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "213:1:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "278:63:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "303:3:35"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "308:1:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "299:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "299:11:35"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "322:3:35"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "327:1:35"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "318:3:35"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "318:11:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "312:5:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "312:18:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "292:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "292:39:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "292:39:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "239:1:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "242:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "236:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "236:13:35"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "250:19:35",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "252:15:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "261:1:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "264:2:35",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "257:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "257:10:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "252:1:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "232:3:35",
                            "statements": []
                          },
                          "src": "228:113:35"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "367:31:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "380:3:35"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "385:6:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "376:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "376:16:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "394:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "369:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "369:27:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "369:27:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "356:1:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "359:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "353:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "353:13:35"
                          },
                          "nodeType": "YulIf",
                          "src": "350:48:35"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "177:3:35",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "182:3:35",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "187:6:35",
                        "type": ""
                      }
                    ],
                    "src": "146:258:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "500:793:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "546:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "555:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "558:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "548:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "548:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "548:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "521:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "530:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "517:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "517:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "542:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "513:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "513:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "510:52:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "571:30:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "591:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "585:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "585:16:35"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "575:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "610:28:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "628:2:35",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "632:1:35",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "624:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "624:10:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "636:1:35",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "620:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "620:18:35"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "614:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "665:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "674:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "677:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "667:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "667:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "667:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "653:6:35"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "661:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "650:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "650:14:35"
                          },
                          "nodeType": "YulIf",
                          "src": "647:34:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "690:32:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "704:9:35"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "715:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "700:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "700:22:35"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "694:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "770:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "779:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "782:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "772:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "772:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "772:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "749:2:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "753:4:35",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "745:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "745:13:35"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "760:7:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "741:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "741:27:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "734:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "734:35:35"
                          },
                          "nodeType": "YulIf",
                          "src": "731:55:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "795:19:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "811:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "805:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "805:9:35"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "799:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "837:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "839:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "839:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "839:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "829:2:35"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "833:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "826:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "826:10:35"
                          },
                          "nodeType": "YulIf",
                          "src": "823:36:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "868:17:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "882:2:35",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "878:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "878:7:35"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "872:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "894:23:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "914:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "908:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "908:9:35"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "898:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "926:71:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "948:6:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "972:2:35"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "976:4:35",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "968:3:35"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "968:13:35"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "983:2:35"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "964:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "964:22:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "988:2:35",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "960:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "960:31:35"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "993:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "956:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "956:40:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "944:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "944:53:35"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "930:10:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1056:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1058:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1058:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1058:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1015:10:35"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1027:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1012:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1012:18:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1035:10:35"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1047:6:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1032:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1032:22:35"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1009:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1009:46:35"
                          },
                          "nodeType": "YulIf",
                          "src": "1006:72:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1094:2:35",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1098:10:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1087:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1087:22:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1087:22:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1125:6:35"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1133:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1118:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1118:18:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1118:18:35"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1182:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1191:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1194:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1184:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1184:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1184:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1159:2:35"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1163:2:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1155:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1155:11:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1168:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1151:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1151:20:35"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1173:7:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1148:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1148:33:35"
                          },
                          "nodeType": "YulIf",
                          "src": "1145:53:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1233:2:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1237:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1229:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1229:11:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1246:6:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1254:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1242:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1242:15:35"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1259:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1207:21:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1207:55:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1207:55:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1271:16:35",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1281:6:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1271:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "466:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "477:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "489:6:35",
                        "type": ""
                      }
                    ],
                    "src": "409:884:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1472:160:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1489:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1500:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1482:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1482:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1482:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1523:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1534:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1519:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1519:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1539:2:35",
                                "type": "",
                                "value": "10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1512:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1512:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1512:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1562:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1573:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1558:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1558:18:35"
                              },
                              {
                                "hexValue": "4f6e6c79206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1578:12:35",
                                "type": "",
                                "value": "Only owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1551:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1551:40:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1551:40:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1600:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1612:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1623:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1608:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1608:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1600:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_17d9f114efaa93d67eedad749dd7fd16a6895ff93e28b7a30c667a069f2ed42d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1449:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1463:4:35",
                        "type": ""
                      }
                    ],
                    "src": "1298:334:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1758:262:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1775:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1786:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1768:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1768:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1768:21:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1798:27:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1818:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1812:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1812:13:35"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1802:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1845:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1856:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1841:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1841:18:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1861:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1834:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1834:34:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1834:34:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1903:6:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1911:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1899:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1899:15:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1920:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1931:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1916:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1916:18:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1936:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1877:21:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1877:66:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1877:66:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1952:62:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1968:9:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1987:6:35"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1995:2:35",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1983:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1983:15:35"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2004:2:35",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2000:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2000:7:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1979:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1979:29:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1964:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1964:45:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2011:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1960:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1960:54:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1952:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1727:9:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1738:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1749:4:35",
                        "type": ""
                      }
                    ],
                    "src": "1637:383:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2080:325:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2090:22:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2104:1:35",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2107:4:35"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "2100:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2100:12:35"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2090:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2121:38:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2151:4:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2157:1:35",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2147:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2147:12:35"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "2125:18:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2198:31:35",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2200:27:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "2214:6:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2222:4:35",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2210:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2210:17:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2200:6:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2178:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2171:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2171:26:35"
                          },
                          "nodeType": "YulIf",
                          "src": "2168:61:35"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2288:111:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2309:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2316:3:35",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2321:10:35",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2312:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2312:20:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2302:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2302:31:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2302:31:35"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2353:1:35",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2356:4:35",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2346:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2346:15:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2346:15:35"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2381:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2384:4:35",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2374:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2374:15:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2374:15:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2244:18:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2267:6:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2275:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2264:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2264:14:35"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2241:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2241:38:35"
                          },
                          "nodeType": "YulIf",
                          "src": "2238:161:35"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2060:4:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2069:6:35",
                        "type": ""
                      }
                    ],
                    "src": "2025:380:35"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_stringliteral_17d9f114efaa93d67eedad749dd7fd16a6895ff93e28b7a30c667a069f2ed42d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Only owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 35,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0xB SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x204E CODESIZE SUB DUP1 PUSH3 0x204E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x39 SWAP2 PUSH3 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x2937B7B9BA32B9 PUSH1 0xC9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x2927A7A9AA22A9 PUSH1 0xC9 SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x91 SWAP3 SWAP2 SWAP1 PUSH3 0x1A6 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xA7 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x1A6 JUMP JUMPDEST POP POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 CALLER SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP3 POP PUSH32 0xAAC18E3887F7D855B2483E20615F8E3FB6EFC18E25502090082B47047FB57C73 SWAP1 DUP4 SWAP1 LOG3 PUSH3 0xFC DUP2 PUSH3 0x103 JUMP JUMPDEST POP PUSH3 0x3BF JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x154 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x27B7363C9037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH3 0x169 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x1A6 JUMP JUMPDEST POP PUSH32 0x157EB1FFFC1000C7F0EE8CB1F87BE2620EC910B8BE9E3AF7DB8C97328E2757CF DUP2 PUSH1 0x40 MLOAD PUSH3 0x19B SWAP2 SWAP1 PUSH3 0x34D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1B4 SWAP1 PUSH3 0x382 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1D8 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x223 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1F3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x223 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x223 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x223 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x206 JUMP JUMPDEST POP PUSH3 0x231 SWAP3 SWAP2 POP PUSH3 0x235 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x231 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x236 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x27F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x265 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x28F JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x2EA JUMPI PUSH3 0x2EA PUSH3 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x315 JUMPI PUSH3 0x315 PUSH3 0x24C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x342 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x262 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x36E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x262 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x397 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x3B9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C7F DUP1 PUSH3 0x3CF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA0BCFC7F GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3F9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0xD4EE1D90 EQ PUSH2 0x41F JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA0BCFC7F EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0xAA271E1A EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0xAC5A7D5C EQ PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x311 JUMPI DUP1 PUSH4 0x69E2F0FB EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0x6CEF16E6 EQ PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C0209F5 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x40C10F19 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x4684D7E9 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C0209F5 EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0x3DD1EB61 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x34601EC EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x219 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1768 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x1794 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH1 0xB SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH2 0x27E PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH2 0x82C JUMP JUMPDEST PUSH2 0x20F PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x9BF JUMP JUMPDEST PUSH2 0x20F PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1794 JUMP JUMPDEST PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1815 JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x31F CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0xCA1 JUMP JUMPDEST PUSH2 0x27E PUSH2 0x363 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20F PUSH2 0xD46 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x24F SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x219 PUSH2 0xD7D JUMP JUMPDEST PUSH2 0x20F PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x18BB JUMP JUMPDEST PUSH2 0xD8A JUMP JUMPDEST PUSH2 0x20F PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1904 JUMP JUMPDEST PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x3F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x407 CALLDATASIZE PUSH1 0x4 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x24F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x440 CALLDATASIZE PUSH1 0x4 PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x491 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x4AC JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4E2 DUP5 DUP5 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D5 PUSH2 0x19EF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4B5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x4FD SWAP1 PUSH2 0x1A05 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x529 SWAP1 PUSH2 0x1A05 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x576 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x54B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x576 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x559 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ DUP1 PUSH2 0x5C7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x609 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1393D517D055551213D492569151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x6BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x57524F4E475F46524F4D PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1253959053125117D49150D25412515395 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 PUSH2 0x732 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST DUP1 PUSH2 0x760 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x79D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1393D517D055551213D492569151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP4 DUP7 AND DUP1 DUP4 MSTORE DUP5 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP6 DUP4 MSTORE PUSH1 0x3 DUP3 MSTORE DUP5 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP5 DUP4 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 SSTORE SWAP3 MLOAD DUP5 SWAP4 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x890 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x517565727920666F72206E6F6E6578697374656E7420726F6F73746572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4E6F2061646472657373283029 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x973 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105B1C9958591E4819DC985B9D1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xBD42B6CD963A984D8CBFF85ACAD4DD2C87A6D85AC756D16E6D2EC5CE6C8F0730 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH2 0x9F6 PUSH2 0x1096 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x27B7363C9036B4B73A32B9 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0xA5B DUP4 DUP3 DUP5 PUSH2 0x1129 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xA6B DUP4 DUP4 DUP4 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EXTCODESIZE ISZERO DUP1 PUSH2 0xB23 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP5 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB17 SWAP2 SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ JUMPDEST PUSH2 0xA5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x27B7363C9036B4B73A32B9 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xBCB JUMPI PUSH2 0xBBF DUP5 DUP4 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBB2 JUMPI PUSH2 0xBB2 PUSH2 0x19EF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xB92 JUMP JUMPDEST POP PUSH1 0xB SSTORE POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC58 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD0819DC985B9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xF474B72F3E21EBAFDAD7DADFCB99AE7EABDBF538D52A0E0EECBF8CE0FA7043FE SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x27B7363C903732BB9037BBB732B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP2 AND PUSH2 0x100 CALLER DUP2 DUP2 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 SWAP1 PUSH32 0xAAC18E3887F7D855B2483E20615F8E3FB6EFC18E25502090082B47047FB57C73 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH2 0x9F6 PUSH2 0x113D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x4FD SWAP1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xDCC SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x14F9 JUMP JUMPDEST POP PUSH32 0x157EB1FFFC1000C7F0EE8CB1F87BE2620EC910B8BE9E3AF7DB8C97328E2757CF DUP2 PUSH1 0x40 MLOAD PUSH2 0xDFC SWAP2 SWAP1 PUSH2 0x1768 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEA2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xEE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4E6F2061646472657373283029 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xD52A054F85E9A057277CD95BF6D5DA45465068F0467EC7991F3FCC017BE6B725 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xF3D DUP5 DUP5 DUP5 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO DUP1 PUSH2 0xFE1 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xF83 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD5 SWAP2 SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ JUMPDEST PUSH2 0x4EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1064 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x517565727920666F72206E6F6E6578697374656E7420726F6F73746572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x9 PUSH2 0x106F DUP4 PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1080 SWAP3 SWAP2 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x10DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1133 DUP4 DUP4 PUSH2 0x12BE JUMP JUMPDEST PUSH2 0xA5B DUP3 DUP3 PUSH2 0x139D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x110C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x11DC JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1206 JUMPI DUP1 PUSH2 0x11F0 DUP2 PUSH2 0x1BC1 JUMP JUMPDEST SWAP2 POP PUSH2 0x11FF SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1BF2 JUMP JUMPDEST SWAP2 POP PUSH2 0x11E0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1221 JUMPI PUSH2 0x1221 PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x124B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x12B6 JUMPI PUSH2 0x1260 PUSH1 0x1 DUP4 PUSH2 0x1C06 JUMP JUMPDEST SWAP2 POP PUSH2 0x126D PUSH1 0xA DUP7 PUSH2 0x1C1D JUMP JUMPDEST PUSH2 0x1278 SWAP1 PUSH1 0x30 PUSH2 0x1C31 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x128D JUMPI PUSH2 0x128D PUSH2 0x19EF JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x12AF PUSH1 0xA DUP7 PUSH2 0x1BF2 JUMP JUMPDEST SWAP5 POP PUSH2 0x124F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x12C8 DUP3 DUP3 PUSH2 0x13EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EXTCODESIZE ISZERO DUP1 PUSH2 0x137D JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x44 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x134D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1371 SWAP2 SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ JUMPDEST PUSH2 0x1399 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD DUP3 SWAP1 PUSH32 0xE46D199DD459049FD4C9C752A8B7559AD5DBC0DDB9B399CD9DB4636FD5AA8A83 SWAP1 PUSH2 0x13E2 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1438 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1253959053125117D49150D25412515395 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x148E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1053149150511657D35253951151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1505 SWAP1 PUSH2 0x1A05 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1527 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x156D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1540 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x156D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x156D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x156D JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1552 JUMP JUMPDEST POP PUSH2 0x1579 SWAP3 SWAP2 POP PUSH2 0x157D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1579 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x157E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15C8 DUP2 PUSH2 0x1592 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x15E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x162A JUMPI PUSH2 0x162A PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x165F JUMPI PUSH2 0x165F PUSH2 0x15EB JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x166E DUP3 DUP3 ADD PUSH2 0x1601 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x1688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x16A7 JUMPI DUP3 CALLDATALOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x168E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D0 DUP5 PUSH2 0x15CF JUMP JUMPDEST SWAP3 POP PUSH2 0x16DE PUSH1 0x20 DUP6 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1706 DUP7 DUP3 DUP8 ADD PUSH2 0x1632 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x172B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1713 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4EA JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1754 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x15C8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x173C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x178D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17B0 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17DC DUP5 PUSH2 0x15CF JUMP JUMPDEST SWAP3 POP PUSH2 0x17EA PUSH1 0x20 DUP6 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x180C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15C8 DUP3 PUSH2 0x15CF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1828 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1831 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x1632 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x187D JUMPI PUSH2 0x187D PUSH2 0x15EB JUMP JUMPDEST PUSH2 0x1890 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1601 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x18A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x18F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12B6 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1863 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1920 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x195F DUP6 PUSH2 0x15CF JUMP JUMPDEST SWAP4 POP PUSH2 0x196D PUSH1 0x20 DUP7 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B0 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1863 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19D8 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 PUSH1 0x20 DUP5 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A19 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1A3A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xA SWAP1 DUP3 ADD MSTORE PUSH10 0x27B7363C9037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15C8 DUP2 PUSH2 0x1592 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x155394D0519157D49150D25412515395 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1ADE SWAP1 DUP4 ADD DUP5 PUSH2 0x173C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x1AFA DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1710 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x1B20 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x1B40 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1B54 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1B65 JUMPI PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1B8A JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x1B71 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP PUSH2 0x1BA2 DUP2 DUP6 PUSH2 0x1AE8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1BD5 JUMPI PUSH2 0x1BD5 PUSH2 0x1BAB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C01 JUMPI PUSH2 0x1C01 PUSH2 0x1BDC JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1C18 JUMPI PUSH2 0x1C18 PUSH2 0x1BAB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C2C JUMPI PUSH2 0x1C2C PUSH2 0x1BDC JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1C44 JUMPI PUSH2 0x1C44 PUSH2 0x1BAB JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x2A4BF4 0xB5 MOD SWAP16 0xD8 PUSH16 0xD0332FDD1434A9E61297949B032236B8 SWAP13 SWAP3 CHAINID XOR 0xEF CODECOPY RETURN PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
          "sourceMap": "188:1260:31:-:0;;;315:1;279:37;;321:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1745:111:21;;;;;;;;;;;;;-1:-1:-1;;;1745:111:21;;;;;;;;;;;;;;;;-1:-1:-1;;;1745:111:21;;;1818:5;1811:4;:12;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1833:16:21;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;;981:7:1;:15;;-1:-1:-1;;;;;;791:18:22;981:15:1;799:10:22;791:18;;;;;;;;;;820:35;;-1:-1:-1;;;820:35:22;;-1:-1:-1;;820:35:22;392:20:31::1;403:8:::0;392:10:::1;:20::i;:::-;321:96:::0;188:1260;;1010:119:32;913:5:22;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;1500:2:35;891:42:22;;;1482:21:35;1539:2;1519:18;;;1512:30;-1:-1:-1;;;1558:18:35;;;1551:40;1608:18;;891:42:22;;;;;;;;1075:17:32;;::::1;::::0;:8:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;:::-;;1103:21;1117:6;1103:21;;;;;;:::i;:::-;;;;;;;;1010:119:::0;:::o;188:1260:31:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;188:1260:31;;;-1:-1:-1;188:1260:31;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:35;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:258;218:1;228:113;242:6;239:1;236:13;228:113;;;318:11;;;312:18;299:11;;;292:39;264:2;257:10;228:113;;;359:6;356:1;353:13;350:48;;;394:1;385:6;380:3;376:16;369:27;350:48;;146:258;;;:::o;409:884::-;489:6;542:2;530:9;521:7;517:23;513:32;510:52;;;558:1;555;548:12;510:52;585:16;;-1:-1:-1;;;;;650:14:35;;;647:34;;;677:1;674;667:12;647:34;715:6;704:9;700:22;690:32;;760:7;753:4;749:2;745:13;741:27;731:55;;782:1;779;772:12;731:55;811:2;805:9;833:2;829;826:10;823:36;;;839:18;;:::i;:::-;914:2;908:9;882:2;968:13;;-1:-1:-1;;964:22:35;;;988:2;960:31;956:40;944:53;;;1012:18;;;1032:22;;;1009:46;1006:72;;;1058:18;;:::i;:::-;1098:10;1094:2;1087:22;1133:2;1125:6;1118:18;1173:7;1168:2;1163;1159;1155:11;1151:20;1148:33;1145:53;;;1194:1;1191;1184:12;1145:53;1207:55;1259:2;1254;1246:6;1242:15;1237:2;1233;1229:11;1207:55;:::i;:::-;1281:6;409:884;-1:-1:-1;;;;;;;409:884:35:o;1637:383::-;1786:2;1775:9;1768:21;1749:4;1818:6;1812:13;1861:6;1856:2;1845:9;1841:18;1834:34;1877:66;1936:6;1931:2;1920:9;1916:18;1911:2;1903:6;1899:15;1877:66;:::i;:::-;2004:2;1983:15;-1:-1:-1;;1979:29:35;1964:45;;;;2011:2;1960:54;;1637:383;-1:-1:-1;;1637:383:35:o;2025:380::-;2104:1;2100:12;;;;2147;;;2168:61;;2222:4;2214:6;2210:17;2200:27;;2168:61;2275:2;2267:6;2264:14;2244:18;2241:38;2238:161;;;2321:10;2316:3;2312:20;2309:1;2302:31;2356:4;2353:1;2346:15;2384:4;2381:1;2374:15;2238:161;;2025:380;;;:::o;:::-;188:1260:31;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_exists_7634": {
              "entryPoint": null,
              "id": 7634,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_mint_4881": {
              "entryPoint": 5102,
              "id": 4881,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_mint_7505": {
              "entryPoint": 4393,
              "id": 7505,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_msgSender_3594": {
              "entryPoint": null,
              "id": 3594,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_pause_179": {
              "entryPoint": 4413,
              "id": 179,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_safeMint_4970": {
              "entryPoint": 4798,
              "id": 4970,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_setBreed_7617": {
              "entryPoint": 5021,
              "id": 7617,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_unpause_195": {
              "entryPoint": 4246,
              "id": 195,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@approve_4625": {
              "entryPoint": 1406,
              "id": 4625,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@balanceOf_4554": {
              "entryPoint": null,
              "id": 4554,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@batchMint_7485": {
              "entryPoint": 2879,
              "id": 7485,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@breeds_7555": {
              "entryPoint": 2092,
              "id": 7555,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getApproved_4562": {
              "entryPoint": null,
              "id": 4562,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@grantMinterRole_5191": {
              "entryPoint": 2211,
              "id": 5191,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@isApprovedForAll_4568": {
              "entryPoint": null,
              "id": 4568,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@isMinter_5042": {
              "entryPoint": null,
              "id": 5042,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mint_7441": {
              "entryPoint": 2552,
              "id": 7441,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@name_4541": {
              "entryPoint": 1264,
              "id": 4541,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@newOwner_5038": {
              "entryPoint": null,
              "id": 5038,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@ownerOf_4558": {
              "entryPoint": null,
              "id": 4558,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@owner_5036": {
              "entryPoint": null,
              "id": 5036,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@pause_5225": {
              "entryPoint": 3398,
              "id": 5225,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@paused_140": {
              "entryPoint": null,
              "id": 140,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@pullOwner_5155": {
              "entryPoint": 3233,
              "id": 5155,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@pushOwner_5128": {
              "entryPoint": 3699,
              "id": 5128,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@revokeMinterRole_5216": {
              "entryPoint": 3027,
              "id": 5216,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@safeBatchTransferFrom_7417": {
              "entryPoint": 1202,
              "id": 7417,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_4768": {
              "entryPoint": 2656,
              "id": 4768,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_4810": {
              "entryPoint": 3890,
              "id": 4810,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setApprovalForAll_4649": {
              "entryPoint": 3591,
              "id": 4649,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setBaseUri_7598": {
              "entryPoint": 3466,
              "id": 7598,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@supportsInterface_4830": {
              "entryPoint": 1120,
              "id": 4830,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@symbol_4543": {
              "entryPoint": 3453,
              "id": 4543,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@toString_3689": {
              "entryPoint": 4536,
              "id": 3689,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURI_7582": {
              "entryPoint": 4093,
              "id": 7582,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_7384": {
              "entryPoint": null,
              "id": 7384,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_4728": {
              "entryPoint": 1637,
              "id": 4728,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@unpause_5234": {
              "entryPoint": 2495,
              "id": 5234,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 5583,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn": {
              "entryPoint": 5682,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_available_length_string": {
              "entryPoint": 6243,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 6138,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 6588,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 5810,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 6078,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 6464,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 6165,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 6404,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 6036,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 5547,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 6756,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr": {
              "entryPoint": 6331,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 6011,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 6888,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string_memory_ptr": {
              "entryPoint": 5948,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 6916,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 6827,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5992,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_17d9f114efaa93d67eedad749dd7fd16a6895ff93e28b7a30c667a069f2ed42d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 6720,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_238be1f3777eb111c1f0d2c5093f35e67a506b0a792f99f6119cf6ff22872f66__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_578cb4a41adb75340d2cbfbdb0c6610ff4519d15e645cc9b4cc4c64336da99c6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5e7bf34c5f9e77c6f415365fc02ea1195419ccebda18d14265f0c098f3687483__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5eeac9f51dc9b7610f38c2d2bcf5d422542fb4439e997468efa7700c17d41a07__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6fe23d505fadbffe2c002e7f63a04ceca2360f60a17ac3843256dd51b7a38963__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_73b952ddf27457ea9a78e0190eccb5af6b42db3e503fef0de87387139fbba949__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8e6f827f3090d5517c29a88eb0975f479e761f521dc9b8ec82496c8913643ef0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_91aca405bce635db2380c779628055bea528973696064aeec59f909f41accf6d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 6785,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e3f56786f4dc15ea567a5bcea1aa6e11424106cac78b0acf41b1b7deccad9f1b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e7e213d5e2bee0acc2c7bf8bfda19ef0cae82e7b8c997e7e898919269971e7c4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f70366941d4d371c05a2457cbc0f4d05a3d6bc57ab01a7c3338bfed233eebe93__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 5633,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 7217,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 7154,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 7174,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 5904,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 6661,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 7105,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 7197,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 7083,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 7132,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 6639,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 5611,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_bytes4": {
              "entryPoint": 5522,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:16168:35",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:35",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "58:87:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "123:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "132:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "135:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "125:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "125:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "81:5:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "92:5:35"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "103:3:35",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:10:35",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "99:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "99:20:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "88:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "88:32:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "78:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "78:43:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "71:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "71:51:35"
                          },
                          "nodeType": "YulIf",
                          "src": "68:71:35"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "47:5:35",
                        "type": ""
                      }
                    ],
                    "src": "14:131:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "219:176:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "265:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "274:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "277:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "267:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "267:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "267:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "240:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "249:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "236:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "236:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "261:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "232:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "232:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "229:52:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "290:36:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "316:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "303:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "303:23:35"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "294:5:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "359:5:35"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "335:23:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "335:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "335:30:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "374:15:35",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "384:5:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "374:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "185:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "196:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "208:6:35",
                        "type": ""
                      }
                    ],
                    "src": "150:245:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "495:92:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "505:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "517:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "528:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "513:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "513:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "505:4:35"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "547:9:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "572:6:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "565:6:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "565:14:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "558:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "558:22:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "540:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "540:41:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "540:41:35"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "464:9:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "475:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "486:4:35",
                        "type": ""
                      }
                    ],
                    "src": "400:187:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "641:124:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "651:29:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "673:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "660:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "660:20:35"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "651:5:35"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "743:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "752:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "755:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "745:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "745:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "745:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "702:5:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "713:5:35"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "728:3:35",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "733:1:35",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "724:3:35"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "724:11:35"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "737:1:35",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "720:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "720:19:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "709:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "709:31:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "699:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "699:42:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "692:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "692:50:35"
                          },
                          "nodeType": "YulIf",
                          "src": "689:70:35"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "620:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "631:5:35",
                        "type": ""
                      }
                    ],
                    "src": "592:173:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "802:95:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "819:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "826:3:35",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "831:10:35",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "822:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "822:20:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "812:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "812:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "812:31:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "859:1:35",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "862:4:35",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "852:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "852:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "852:15:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "883:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "886:4:35",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "876:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "876:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "876:15:35"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "770:127:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "947:230:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "957:19:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "973:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "967:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "967:9:35"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "957:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "985:58:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1007:6:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "1023:4:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1029:2:35",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1019:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1019:13:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1038:2:35",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1034:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1034:7:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1015:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1015:27:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1003:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1003:40:35"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "989:10:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1118:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1120:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1120:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1120:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1061:10:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1073:18:35",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1058:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1058:34:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1097:10:35"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1109:6:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1094:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1094:22:35"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1055:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1055:62:35"
                          },
                          "nodeType": "YulIf",
                          "src": "1052:88:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1156:2:35",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1160:10:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1149:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1149:22:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1149:22:35"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "927:4:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "936:6:35",
                        "type": ""
                      }
                    ],
                    "src": "902:275:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1246:648:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1295:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1304:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1307:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1297:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1297:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1297:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1274:6:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1282:4:35",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1270:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1270:17:35"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1289:3:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1266:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1266:27:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1259:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1259:35:35"
                          },
                          "nodeType": "YulIf",
                          "src": "1256:55:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1320:30:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1343:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1330:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1330:20:35"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1324:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1359:14:35",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1369:4:35",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1363:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1412:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1414:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1414:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1414:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1388:2:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1392:18:35",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1385:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1385:26:35"
                          },
                          "nodeType": "YulIf",
                          "src": "1382:52:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1443:20:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1457:1:35",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1460:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1453:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1453:10:35"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1447:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1472:39:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "1503:2:35"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1507:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1499:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1499:11:35"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1483:15:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1483:28:35"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1476:3:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1520:16:35",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "1533:3:35"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "1524:5:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1552:3:35"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1557:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1545:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1545:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1545:15:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1569:19:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1580:3:35"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1585:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1576:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1576:12:35"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "1569:3:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1597:38:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1619:6:35"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "1627:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1615:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1615:15:35"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1632:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1611:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1611:24:35"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "1601:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1663:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1672:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1675:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1665:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1665:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1665:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1650:6:35"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1658:3:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1647:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1647:15:35"
                          },
                          "nodeType": "YulIf",
                          "src": "1644:35:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1688:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1703:6:35"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1711:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1699:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1699:15:35"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "1692:3:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1779:86:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "1800:3:35"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "1818:3:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1805:12:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1805:17:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1793:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1793:30:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1793:30:35"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "1836:19:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "1847:3:35"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1852:2:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1843:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1843:12:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "1836:3:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1734:3:35"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1739:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1731:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1731:15:35"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1747:23:35",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1749:19:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "1760:3:35"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1765:2:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1756:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1756:12:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1749:3:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1727:3:35",
                            "statements": []
                          },
                          "src": "1723:142:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1874:14:35",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "1883:5:35"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1874:5:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1220:6:35",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1228:3:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1236:5:35",
                        "type": ""
                      }
                    ],
                    "src": "1182:712:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2028:367:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2074:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2083:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2086:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2076:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2076:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2076:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2049:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2058:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2045:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2045:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2070:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2041:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2041:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "2038:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2099:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2128:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2109:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2109:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2099:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2147:48:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2180:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2191:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2176:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2176:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2157:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2157:38:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2147:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2204:46:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2235:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2246:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2231:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2231:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2218:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2218:32:35"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2208:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2293:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2302:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2305:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2295:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2295:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2295:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2265:6:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2273:18:35",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2262:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2262:30:35"
                          },
                          "nodeType": "YulIf",
                          "src": "2259:50:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2318:71:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2361:9:35"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2372:6:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2357:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2357:22:35"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2381:7:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "2328:28:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2328:61:35"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2318:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1978:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1989:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2001:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2009:6:35",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2017:6:35",
                        "type": ""
                      }
                    ],
                    "src": "1899:496:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2453:205:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2463:10:35",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2472:1:35",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "2467:1:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2532:63:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "2557:3:35"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "2562:1:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2553:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2553:11:35"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "2576:3:35"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "2581:1:35"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2572:3:35"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2572:11:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2566:5:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2566:18:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2546:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2546:39:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2546:39:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2493:1:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2496:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2490:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2490:13:35"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2504:19:35",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2506:15:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2515:1:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2518:2:35",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2511:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2511:10:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2506:1:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2486:3:35",
                            "statements": []
                          },
                          "src": "2482:113:35"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2621:31:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "2634:3:35"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "2639:6:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2630:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2630:16:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2648:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2623:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2623:27:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2623:27:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2610:1:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2613:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2607:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2607:13:35"
                          },
                          "nodeType": "YulIf",
                          "src": "2604:48:35"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "2431:3:35",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "2436:3:35",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2441:6:35",
                        "type": ""
                      }
                    ],
                    "src": "2400:258:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2724:208:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2734:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2754:5:35"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2748:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2748:12:35"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2738:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2776:3:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2781:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2769:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2769:19:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2769:19:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2823:5:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2830:4:35",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2819:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2819:16:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2841:3:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2846:4:35",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2837:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2837:14:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2853:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2797:21:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2797:63:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2797:63:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2869:57:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2884:3:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "2897:6:35"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2905:2:35",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2893:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2893:15:35"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2914:2:35",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2910:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2910:7:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2889:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2889:29:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2880:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2880:39:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2921:4:35",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2876:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2876:50:35"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2869:3:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2701:5:35",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2708:3:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2716:3:35",
                        "type": ""
                      }
                    ],
                    "src": "2663:269:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3058:110:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3075:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3086:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3068:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3068:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3068:21:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3098:64:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3135:6:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3147:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3158:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3143:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3143:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "3106:28:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3106:56:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3098:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3027:9:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3038:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3049:4:35",
                        "type": ""
                      }
                    ],
                    "src": "2937:231:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3243:110:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3289:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3298:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3301:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3291:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3291:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3291:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3264:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3273:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3260:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3260:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3285:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3256:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3256:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "3253:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3314:33:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3337:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3324:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3324:23:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3314:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3209:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3220:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3232:6:35",
                        "type": ""
                      }
                    ],
                    "src": "3173:180:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3459:102:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3469:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3481:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3492:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3477:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3477:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3469:4:35"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3511:9:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3526:6:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3542:3:35",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3547:1:35",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3538:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3538:11:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3551:1:35",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3534:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3534:19:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3522:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3522:32:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3504:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3504:51:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3504:51:35"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3428:9:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3439:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3450:4:35",
                        "type": ""
                      }
                    ],
                    "src": "3358:203:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3653:167:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3699:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3708:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3711:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3701:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3701:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3701:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3674:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3683:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3670:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3670:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3695:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3666:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3666:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "3663:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3724:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3753:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "3734:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3734:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3724:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3772:42:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3799:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3810:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3795:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3795:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3782:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3782:32:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3772:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3611:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3622:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3634:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3642:6:35",
                        "type": ""
                      }
                    ],
                    "src": "3566:254:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3926:76:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3936:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3948:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3959:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3944:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3944:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3936:4:35"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3978:9:35"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3989:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3971:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3971:25:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3971:25:35"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3895:9:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3906:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3917:4:35",
                        "type": ""
                      }
                    ],
                    "src": "3825:177:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4111:224:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4157:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4166:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4169:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4159:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4159:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4159:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4132:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4141:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4128:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4128:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4153:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4124:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4124:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "4121:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4182:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4211:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4192:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4192:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4182:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4230:48:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4263:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4274:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4259:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4259:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4240:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4240:38:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4230:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4287:42:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4314:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4325:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4310:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4310:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4297:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4297:32:35"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4287:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4061:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4072:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4084:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4092:6:35",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4100:6:35",
                        "type": ""
                      }
                    ],
                    "src": "4007:328:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4410:116:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4456:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4465:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4468:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4458:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4458:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4458:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4431:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4440:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4427:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4427:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4452:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4423:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4423:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "4420:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4481:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4510:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4491:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4491:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4481:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4376:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4387:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4399:6:35",
                        "type": ""
                      }
                    ],
                    "src": "4340:186:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4643:310:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4689:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4698:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4701:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4691:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4691:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4691:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4664:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4673:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4660:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4660:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4685:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4656:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4656:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "4653:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4714:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4743:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4724:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4724:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4714:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4762:46:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4793:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4804:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4789:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4789:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4776:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4776:32:35"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4766:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4851:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4860:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4863:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4853:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4853:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4853:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4823:6:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4831:18:35",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4820:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4820:30:35"
                          },
                          "nodeType": "YulIf",
                          "src": "4817:50:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4876:71:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4919:9:35"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4930:6:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4915:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4915:22:35"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4939:7:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "4886:28:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4886:61:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4876:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4601:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4612:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4624:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4632:6:35",
                        "type": ""
                      }
                    ],
                    "src": "4531:422:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5033:332:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5077:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "5079:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5079:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5079:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5049:6:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5057:18:35",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5046:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5046:30:35"
                          },
                          "nodeType": "YulIf",
                          "src": "5043:56:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5108:66:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "5145:6:35"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5153:2:35",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5141:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5141:15:35"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5162:2:35",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "5158:3:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5158:7:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5137:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5137:29:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5168:4:35",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5133:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5133:40:35"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5117:15:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5117:57:35"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "5108:5:35"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "5190:5:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5197:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5183:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5183:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5183:21:35"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5242:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5251:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5254:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5244:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5244:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5244:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "5223:3:35"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5228:6:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5219:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5219:16:35"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "5237:3:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5216:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5216:25:35"
                          },
                          "nodeType": "YulIf",
                          "src": "5213:45:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "5284:5:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5291:4:35",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5280:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5280:16:35"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "5298:3:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5303:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "5267:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5267:43:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5267:43:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array",
                                        "nodeType": "YulIdentifier",
                                        "src": "5334:5:35"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "5341:6:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5330:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5330:18:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5350:4:35",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5326:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5326:29:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5357:1:35",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5319:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5319:40:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5319:40:35"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "5002:3:35",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "5007:6:35",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5015:3:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "5023:5:35",
                        "type": ""
                      }
                    ],
                    "src": "4958:407:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5450:371:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5496:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5505:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5508:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5498:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5498:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5498:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5471:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5480:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5467:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5467:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5492:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5463:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5463:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "5460:52:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5521:37:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5548:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5535:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5535:23:35"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5525:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5601:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5610:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5613:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5603:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5603:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5603:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5573:6:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5581:18:35",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5570:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5570:30:35"
                          },
                          "nodeType": "YulIf",
                          "src": "5567:50:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5626:32:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5640:9:35"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5651:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5636:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5636:22:35"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5630:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5706:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5715:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5718:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5708:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5708:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5708:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5685:2:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5689:4:35",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5681:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5681:13:35"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5696:7:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5677:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5677:27:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5670:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5670:35:35"
                          },
                          "nodeType": "YulIf",
                          "src": "5667:55:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5731:84:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5780:2:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5784:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5776:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5776:11:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5802:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5789:12:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5789:16:35"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5807:7:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nodeType": "YulIdentifier",
                              "src": "5741:34:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5741:74:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5731:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5416:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5427:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5439:6:35",
                        "type": ""
                      }
                    ],
                    "src": "5370:451:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5910:263:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5956:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5965:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5968:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5958:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5958:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5958:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5931:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5940:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5927:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5927:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5952:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5923:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5923:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "5920:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5981:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6010:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5991:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5991:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5981:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6029:45:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6059:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6070:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6055:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6055:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6042:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6042:32:35"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6033:5:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6127:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6136:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6139:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6129:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6129:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6129:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6096:5:35"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "6117:5:35"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "6110:6:35"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6110:13:35"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "6103:6:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6103:21:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "6093:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6093:32:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6086:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6086:40:35"
                          },
                          "nodeType": "YulIf",
                          "src": "6083:60:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6152:15:35",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6162:5:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6152:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5868:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5879:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5891:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5899:6:35",
                        "type": ""
                      }
                    ],
                    "src": "5826:347:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6308:537:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6355:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6364:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6367:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6357:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6357:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6357:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6329:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6338:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6325:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6325:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6350:3:35",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6321:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6321:33:35"
                          },
                          "nodeType": "YulIf",
                          "src": "6318:53:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6380:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6409:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "6390:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6390:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6380:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6428:48:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6461:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6472:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6457:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6457:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "6438:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6438:38:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6428:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6485:42:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6512:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6523:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6508:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6508:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6495:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6495:32:35"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "6485:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6536:46:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6567:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6578:2:35",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6563:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6563:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6550:12:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6550:32:35"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "6540:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6625:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6634:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6637:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6627:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6627:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6627:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6597:6:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6605:18:35",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6594:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6594:30:35"
                          },
                          "nodeType": "YulIf",
                          "src": "6591:50:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6650:32:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6664:9:35"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6675:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6660:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6660:22:35"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6654:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6730:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6739:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6742:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6732:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6732:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6732:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6709:2:35"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6713:4:35",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6705:3:35"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6705:13:35"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6720:7:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6701:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6701:27:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6694:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6694:35:35"
                          },
                          "nodeType": "YulIf",
                          "src": "6691:55:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6755:84:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6804:2:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6808:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6800:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6800:11:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6826:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6813:12:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6813:16:35"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6831:7:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nodeType": "YulIdentifier",
                              "src": "6765:34:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6765:74:35"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "6755:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6250:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6261:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6273:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6281:6:35",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6289:6:35",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "6297:6:35",
                        "type": ""
                      }
                    ],
                    "src": "6178:667:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6937:173:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6983:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6992:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6995:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6985:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6985:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6985:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6958:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6967:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6954:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6954:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6979:2:35",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6950:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6950:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "6947:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7008:39:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7037:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "7018:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7018:29:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7008:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7056:48:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7089:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7100:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7085:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7085:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "7066:18:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7066:38:35"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7056:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6895:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6906:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6918:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6926:6:35",
                        "type": ""
                      }
                    ],
                    "src": "6850:260:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7147:95:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7164:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7171:3:35",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7176:10:35",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7167:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7167:20:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7157:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7157:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7157:31:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7204:1:35",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7207:4:35",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7197:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7197:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7197:15:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7228:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7231:4:35",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "7221:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7221:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7221:15:35"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7115:127:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7302:325:35",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7312:22:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7326:1:35",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "7329:4:35"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "7322:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7322:12:35"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "7312:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7343:38:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "7373:4:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7379:1:35",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7369:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7369:12:35"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "7347:18:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7420:31:35",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7422:27:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "7436:6:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7444:4:35",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "7432:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7432:17:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7422:6:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "7400:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7393:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7393:26:35"
                          },
                          "nodeType": "YulIf",
                          "src": "7390:61:35"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7510:111:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7531:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7538:3:35",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7543:10:35",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "7534:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7534:20:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7524:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7524:31:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7524:31:35"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7575:1:35",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7578:4:35",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7568:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7568:15:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7568:15:35"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7603:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7606:4:35",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7596:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7596:15:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7596:15:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "7466:18:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7489:6:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7497:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7486:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7486:14:35"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "7463:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7463:38:35"
                          },
                          "nodeType": "YulIf",
                          "src": "7460:161:35"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "7282:4:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "7291:6:35",
                        "type": ""
                      }
                    ],
                    "src": "7247:380:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7806:164:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7823:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7834:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7816:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7816:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7816:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7857:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7868:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7853:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7853:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7873:2:35",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7846:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7846:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7846:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7896:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7907:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7892:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7892:18:35"
                              },
                              {
                                "hexValue": "4e4f545f415554484f52495a4544",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7912:16:35",
                                "type": "",
                                "value": "NOT_AUTHORIZED"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7885:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7885:44:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7885:44:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7938:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7950:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7961:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7946:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7946:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7938:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e7e213d5e2bee0acc2c7bf8bfda19ef0cae82e7b8c997e7e898919269971e7c4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7783:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7797:4:35",
                        "type": ""
                      }
                    ],
                    "src": "7632:338:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8149:160:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8166:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8177:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8159:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8159:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8159:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8200:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8211:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8196:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8196:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8216:2:35",
                                "type": "",
                                "value": "10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8189:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8189:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8189:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8239:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8250:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8235:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8235:18:35"
                              },
                              {
                                "hexValue": "57524f4e475f46524f4d",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8255:12:35",
                                "type": "",
                                "value": "WRONG_FROM"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8228:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8228:40:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8228:40:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8277:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8289:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8300:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8285:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8285:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8277:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f70366941d4d371c05a2457cbc0f4d05a3d6bc57ab01a7c3338bfed233eebe93__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8126:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8140:4:35",
                        "type": ""
                      }
                    ],
                    "src": "7975:334:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8488:167:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8505:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8516:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8498:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8498:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8498:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8539:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8550:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8535:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8535:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8555:2:35",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8528:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8528:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8528:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8578:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8589:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8574:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8574:18:35"
                              },
                              {
                                "hexValue": "494e56414c49445f524543495049454e54",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8594:19:35",
                                "type": "",
                                "value": "INVALID_RECIPIENT"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8567:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8567:47:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8567:47:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8623:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8635:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8646:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8631:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8631:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8623:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5e7bf34c5f9e77c6f415365fc02ea1195419ccebda18d14265f0c098f3687483__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8465:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8479:4:35",
                        "type": ""
                      }
                    ],
                    "src": "8314:341:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8834:179:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8851:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8862:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8844:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8844:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8844:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8885:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8896:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8881:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8881:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8901:2:35",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8874:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8874:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8874:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8924:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8935:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8920:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8920:18:35"
                              },
                              {
                                "hexValue": "517565727920666f72206e6f6e6578697374656e7420726f6f73746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8940:31:35",
                                "type": "",
                                "value": "Query for nonexistent rooster"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8913:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8913:59:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8913:59:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8981:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8993:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9004:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8989:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8989:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8981:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6fe23d505fadbffe2c002e7f63a04ceca2360f60a17ac3843256dd51b7a38963__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8811:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8825:4:35",
                        "type": ""
                      }
                    ],
                    "src": "8660:353:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9192:160:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9209:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9220:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9202:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9202:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9202:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9243:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9254:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9239:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9239:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9259:2:35",
                                "type": "",
                                "value": "10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9232:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9232:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9232:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9282:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9293:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9278:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9278:18:35"
                              },
                              {
                                "hexValue": "4f6e6c79206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9298:12:35",
                                "type": "",
                                "value": "Only owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9271:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9271:40:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9271:40:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9320:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9332:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9343:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9328:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9328:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9320:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_17d9f114efaa93d67eedad749dd7fd16a6895ff93e28b7a30c667a069f2ed42d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9169:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9183:4:35",
                        "type": ""
                      }
                    ],
                    "src": "9018:334:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9531:163:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9548:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9559:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9541:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9541:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9541:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9582:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9593:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9578:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9578:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9598:2:35",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9571:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9571:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9571:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9621:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9632:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9617:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9617:18:35"
                              },
                              {
                                "hexValue": "4e6f2061646472657373283029",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9637:15:35",
                                "type": "",
                                "value": "No address(0)"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9610:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9610:43:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9610:43:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9662:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9674:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9685:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9670:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9670:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9662:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8e6f827f3090d5517c29a88eb0975f479e761f521dc9b8ec82496c8913643ef0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9508:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9522:4:35",
                        "type": ""
                      }
                    ],
                    "src": "9357:337:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9873:165:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9890:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9901:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9883:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9883:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9883:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9924:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9935:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9920:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9920:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9940:2:35",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9913:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9913:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9913:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9963:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9974:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9959:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9959:18:35"
                              },
                              {
                                "hexValue": "416c7265616479206772616e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9979:17:35",
                                "type": "",
                                "value": "Already granted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9952:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9952:45:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9952:45:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10006:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10018:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10029:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10014:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10014:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10006:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5eeac9f51dc9b7610f38c2d2bcf5d422542fb4439e997468efa7700c17d41a07__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9850:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9864:4:35",
                        "type": ""
                      }
                    ],
                    "src": "9699:339:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10217:161:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10234:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10245:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10227:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10227:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10227:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10268:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10279:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10264:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10264:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10284:2:35",
                                "type": "",
                                "value": "11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10257:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10257:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10257:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10307:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10318:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10303:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10303:18:35"
                              },
                              {
                                "hexValue": "4f6e6c79206d696e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10323:13:35",
                                "type": "",
                                "value": "Only minter"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10296:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10296:41:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10296:41:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10346:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10358:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10369:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10354:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10354:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10346:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_578cb4a41adb75340d2cbfbdb0c6610ff4519d15e645cc9b4cc4c64336da99c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10194:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10208:4:35",
                        "type": ""
                      }
                    ],
                    "src": "10043:335:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10640:298:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10650:29:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10668:3:35",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10673:1:35",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10664:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10664:11:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10677:1:35",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10660:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10660:19:35"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10654:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10695:9:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10710:6:35"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10718:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10706:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10706:15:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10688:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10688:34:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10688:34:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10742:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10753:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10738:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10738:18:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10762:6:35"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10770:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10758:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10758:15:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10731:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10731:43:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10731:43:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10794:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10805:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10790:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10790:18:35"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10810:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10783:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10783:34:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10783:34:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10837:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10848:2:35",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10833:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10833:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10853:3:35",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10826:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10826:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10826:31:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10877:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10888:3:35",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10873:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10873:19:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10894:1:35",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10866:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10866:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10866:30:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10905:27:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10917:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10928:3:35",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10913:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10913:19:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10905:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10593:9:35",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10604:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10612:6:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10620:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10631:4:35",
                        "type": ""
                      }
                    ],
                    "src": "10383:555:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11023:169:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11069:16:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11078:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11081:1:35",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11071:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11071:12:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11071:12:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11044:7:35"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11053:9:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11040:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11040:23:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11065:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11036:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11036:32:35"
                          },
                          "nodeType": "YulIf",
                          "src": "11033:52:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11094:29:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11113:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "11107:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11107:16:35"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "11098:5:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11156:5:35"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "11132:23:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11132:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11132:30:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11171:15:35",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11181:5:35"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11171:6:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10989:9:35",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11000:7:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11012:6:35",
                        "type": ""
                      }
                    ],
                    "src": "10943:249:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11371:166:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11388:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11399:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11381:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11381:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11381:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11422:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11433:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11418:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11418:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11438:2:35",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11411:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11411:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11411:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11461:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11472:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11457:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11457:18:35"
                              },
                              {
                                "hexValue": "554e534146455f524543495049454e54",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11477:18:35",
                                "type": "",
                                "value": "UNSAFE_RECIPIENT"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11450:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11450:46:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11450:46:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11505:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11517:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11528:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11513:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11513:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11505:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_91aca405bce635db2380c779628055bea528973696064aeec59f909f41accf6d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11348:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11362:4:35",
                        "type": ""
                      }
                    ],
                    "src": "11197:340:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11716:161:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11733:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11744:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11726:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11726:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11726:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11767:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11778:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11763:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11763:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11783:2:35",
                                "type": "",
                                "value": "11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11756:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11756:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11756:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11806:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11817:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11802:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11802:18:35"
                              },
                              {
                                "hexValue": "4e6f74206772616e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11822:13:35",
                                "type": "",
                                "value": "Not granted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11795:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11795:41:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11795:41:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11845:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11857:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11868:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11853:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11853:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11845:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_73b952ddf27457ea9a78e0190eccb5af6b42db3e503fef0de87387139fbba949__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11693:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11707:4:35",
                        "type": ""
                      }
                    ],
                    "src": "11542:335:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12056:164:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12073:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12084:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12066:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12066:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12066:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12107:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12118:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12103:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12103:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12123:2:35",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12096:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12096:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12096:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12146:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12157:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12142:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12142:18:35"
                              },
                              {
                                "hexValue": "4f6e6c79206e6577206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12162:16:35",
                                "type": "",
                                "value": "Only new owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12135:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12135:44:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12135:44:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12188:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12200:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12211:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12196:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12196:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12188:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_238be1f3777eb111c1f0d2c5093f35e67a506b0a792f99f6119cf6ff22872f66__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12033:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12047:4:35",
                        "type": ""
                      }
                    ],
                    "src": "11882:338:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12428:297:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12438:29:35",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12456:3:35",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12461:1:35",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12452:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12452:11:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12465:1:35",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12448:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12448:19:35"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12442:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12483:9:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12498:6:35"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12506:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12494:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12494:15:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12476:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12476:34:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12476:34:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12530:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12541:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12526:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12526:18:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12550:6:35"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12558:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12546:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12546:15:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12519:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12519:43:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12519:43:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12582:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12593:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12578:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12578:18:35"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "12598:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12571:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12571:34:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12571:34:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12625:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12636:2:35",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12621:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12621:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12641:3:35",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12614:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12614:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12614:31:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12654:65:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "12691:6:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12703:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12714:3:35",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12699:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12699:19:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "12662:28:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12662:57:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12654:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12373:9:35",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "12384:6:35",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12392:6:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12400:6:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12408:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12419:4:35",
                        "type": ""
                      }
                    ],
                    "src": "12225:500:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12786:65:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12803:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "12806:3:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12796:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12796:14:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12796:14:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12819:26:35",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12837:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12840:4:35",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "12827:9:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12827:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "12819:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "12769:3:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12777:4:35",
                        "type": ""
                      }
                    ],
                    "src": "12730:121:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12906:135:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12916:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12936:5:35"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12930:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12930:12:35"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "12920:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "12977:5:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12984:4:35",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12973:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12973:16:35"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12991:3:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "12996:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "12951:21:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12951:52:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12951:52:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13012:23:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13023:3:35"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13028:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13019:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13019:16:35"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "13012:3:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12883:5:35",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "12890:3:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "12898:3:35",
                        "type": ""
                      }
                    ],
                    "src": "12856:185:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13230:990:35",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13240:12:35",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13251:1:35",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "13244:3:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13261:30:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13284:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "13278:5:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13278:13:35"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "13265:9:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13300:17:35",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "13314:3:35"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "13304:6:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13326:11:35",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13336:1:35",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "13330:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13346:28:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13360:2:35"
                              },
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "13364:9:35"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "13356:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13356:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "13346:6:35"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13383:44:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "13413:9:35"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13424:2:35"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13409:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13409:18:35"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "13387:18:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13466:31:35",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13468:27:35",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "13482:6:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13490:4:35",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "13478:3:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13478:17:35"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13468:6:35"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13446:18:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13439:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13439:26:35"
                          },
                          "nodeType": "YulIf",
                          "src": "13436:61:35"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13506:12:35",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13516:2:35",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "13510:2:35",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13577:115:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "13598:3:35"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13607:3:35",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13612:10:35",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "13603:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13603:20:35"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13591:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13591:33:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13591:33:35"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13644:1:35",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13647:4:35",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13637:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13637:15:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13637:15:35"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "13672:3:35"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13677:4:35",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13665:6:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13665:17:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13665:17:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13533:18:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13556:6:35"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "13564:2:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13553:2:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13553:14:35"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "13530:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13530:38:35"
                          },
                          "nodeType": "YulIf",
                          "src": "13527:165:35"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13742:97:35",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "13763:3:35"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "13772:9:35"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13787:3:35",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "13783:3:35"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "13783:8:35"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "13768:3:35"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13768:24:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "13756:6:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13756:37:35"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13756:37:35"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "13806:23:35",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "13817:3:35"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "13822:6:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13813:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13813:16:35"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "13806:3:35"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "13735:104:35",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13740:1:35",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13855:313:35",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13869:52:35",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "13914:6:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "13884:29:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13884:37:35"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "13873:7:35",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "13934:10:35",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13943:1:35",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "13938:1:35",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "14011:111:35",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14040:3:35"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14045:1:35"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14036:3:35"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "14036:11:35"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14055:7:35"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14049:5:35"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "14049:14:35"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "14029:6:35"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14029:35:35"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "14029:35:35"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "14081:27:35",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "14096:7:35"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "14105:2:35"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "14092:3:35"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14092:16:35"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "14081:7:35"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "13968:1:35"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "13971:6:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "13965:2:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13965:13:35"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "13979:19:35",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "13981:15:35",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "13990:1:35"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "13993:2:35"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "13986:3:35"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13986:10:35"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "13981:1:35"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "13961:3:35",
                                      "statements": []
                                    },
                                    "src": "13957:165:35"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "14135:23:35",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "14146:3:35"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "14151:6:35"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14142:3:35"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14142:16:35"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "14135:3:35"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "13848:320:35",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13853:1:35",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "13708:18:35"
                          },
                          "nodeType": "YulSwitch",
                          "src": "13701:467:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14177:37:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "14202:6:35"
                              },
                              {
                                "name": "ret",
                                "nodeType": "YulIdentifier",
                                "src": "14210:3:35"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "14184:17:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14184:30:35"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "14177:3:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13198:3:35",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13203:6:35",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13211:6:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13222:3:35",
                        "type": ""
                      }
                    ],
                    "src": "13046:1174:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14399:170:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14416:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14427:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14409:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14409:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14409:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14450:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14461:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14446:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14446:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14466:2:35",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14439:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14439:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14439:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14489:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14500:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14485:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14485:18:35"
                              },
                              {
                                "hexValue": "5061757361626c653a206e6f7420706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14505:22:35",
                                "type": "",
                                "value": "Pausable: not paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14478:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14478:50:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14478:50:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14537:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14549:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14560:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14545:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14545:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14537:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14376:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14390:4:35",
                        "type": ""
                      }
                    ],
                    "src": "14225:344:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14748:166:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14765:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14776:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14758:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14758:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14758:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14799:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14810:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14795:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14795:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14815:2:35",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14788:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14788:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14788:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14838:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14849:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14834:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14834:18:35"
                              },
                              {
                                "hexValue": "5061757361626c653a20706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14854:18:35",
                                "type": "",
                                "value": "Pausable: paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14827:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14827:46:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14827:46:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14882:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14894:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14905:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14890:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14890:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14882:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14725:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14739:4:35",
                        "type": ""
                      }
                    ],
                    "src": "14574:340:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14951:95:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14968:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14975:3:35",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14980:10:35",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14971:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14971:20:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14961:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14961:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14961:31:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15008:1:35",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15011:4:35",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15001:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15001:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15001:15:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15032:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15035:4:35",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15025:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15025:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15025:15:35"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14919:127:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15098:88:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15129:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "15131:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15131:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15131:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15114:5:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15125:1:35",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "15121:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15121:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "15111:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15111:17:35"
                          },
                          "nodeType": "YulIf",
                          "src": "15108:43:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15160:20:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15171:5:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15178:1:35",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15167:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15167:13:35"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "15160:3:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15080:5:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "15090:3:35",
                        "type": ""
                      }
                    ],
                    "src": "15051:135:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15223:95:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15240:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15247:3:35",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15252:10:35",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "15243:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15243:20:35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15233:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15233:31:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15233:31:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15280:1:35",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15283:4:35",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15273:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15273:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15273:15:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15304:1:35",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15307:4:35",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15297:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15297:15:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15297:15:35"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15191:127:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15369:74:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15392:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "15394:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15394:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15394:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15389:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15382:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15382:9:35"
                          },
                          "nodeType": "YulIf",
                          "src": "15379:35:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15423:14:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15432:1:35"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15435:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "15428:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15428:9:35"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "15423:1:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15354:1:35",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15357:1:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "15363:1:35",
                        "type": ""
                      }
                    ],
                    "src": "15323:120:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15497:76:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15519:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "15521:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15521:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15521:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15513:1:35"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15516:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "15510:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15510:8:35"
                          },
                          "nodeType": "YulIf",
                          "src": "15507:34:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15550:17:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15562:1:35"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15565:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "15558:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15558:9:35"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "15550:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15479:1:35",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15482:1:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "15488:4:35",
                        "type": ""
                      }
                    ],
                    "src": "15448:125:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15616:74:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15639:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "15641:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15641:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15641:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15636:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15629:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15629:9:35"
                          },
                          "nodeType": "YulIf",
                          "src": "15626:35:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15670:14:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15679:1:35"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15682:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "15675:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15675:9:35"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "15670:1:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15601:1:35",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15604:1:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "15610:1:35",
                        "type": ""
                      }
                    ],
                    "src": "15578:112:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15743:80:35",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15770:22:35",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "15772:16:35"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15772:18:35"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15772:18:35"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15759:1:35"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15766:1:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "15762:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15762:6:35"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15756:2:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15756:13:35"
                          },
                          "nodeType": "YulIf",
                          "src": "15753:39:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15801:16:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15812:1:35"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15815:1:35"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15808:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15808:9:35"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "15801:3:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15726:1:35",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15729:1:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "15735:3:35",
                        "type": ""
                      }
                    ],
                    "src": "15695:128:35"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16002:164:35",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16019:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16030:2:35",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16012:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16012:21:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16012:21:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16053:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16064:2:35",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16049:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16049:18:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16069:2:35",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16042:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16042:30:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16042:30:35"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16092:9:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16103:2:35",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16088:3:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16088:18:35"
                              },
                              {
                                "hexValue": "414c52454144595f4d494e544544",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16108:16:35",
                                "type": "",
                                "value": "ALREADY_MINTED"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16081:6:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16081:44:35"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16081:44:35"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16134:26:35",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16146:9:35"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16157:2:35",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16142:3:35"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16142:18:35"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16134:4:35"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e3f56786f4dc15ea567a5bcea1aa6e11424106cac78b0acf41b1b7deccad9f1b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15979:9:35",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15993:4:35",
                        "type": ""
                      }
                    ],
                    "src": "15828:338:35"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let _3 := shl(5, _1)\n        let dst := allocate_memory(add(_3, _2))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, _3), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_memory_ptr(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), not(31)), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value0 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_e7e213d5e2bee0acc2c7bf8bfda19ef0cae82e7b8c997e7e898919269971e7c4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"NOT_AUTHORIZED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f70366941d4d371c05a2457cbc0f4d05a3d6bc57ab01a7c3338bfed233eebe93__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"WRONG_FROM\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5e7bf34c5f9e77c6f415365fc02ea1195419ccebda18d14265f0c098f3687483__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"INVALID_RECIPIENT\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6fe23d505fadbffe2c002e7f63a04ceca2360f60a17ac3843256dd51b7a38963__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Query for nonexistent rooster\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_17d9f114efaa93d67eedad749dd7fd16a6895ff93e28b7a30c667a069f2ed42d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"Only owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8e6f827f3090d5517c29a88eb0975f479e761f521dc9b8ec82496c8913643ef0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"No address(0)\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5eeac9f51dc9b7610f38c2d2bcf5d422542fb4439e997468efa7700c17d41a07__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Already granted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_578cb4a41adb75340d2cbfbdb0c6610ff4519d15e645cc9b4cc4c64336da99c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Only minter\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_91aca405bce635db2380c779628055bea528973696064aeec59f909f41accf6d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"UNSAFE_RECIPIENT\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_73b952ddf27457ea9a78e0190eccb5af6b42db3e503fef0de87387139fbba949__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Not granted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_238be1f3777eb111c1f0d2c5093f35e67a506b0a792f99f6119cf6ff22872f66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Only new owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string_memory_ptr(value3, add(headStart, 128))\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := ret\n        let _1 := 1\n        length := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        let _2 := 32\n        if eq(outOfPlaceEncoding, lt(length, _2))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(ret, 0x24)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value0)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := abi_encode_string(value1, ret)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_e3f56786f4dc15ea567a5bcea1aa6e11424106cac78b0acf41b1b7deccad9f1b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"ALREADY_MINTED\")\n        tail := add(headStart, 96)\n    }\n}",
              "id": 35,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063a0bcfc7f116100a2578063b88d4fde11610071578063b88d4fde146103f9578063c87b56dd1461040c578063d4ee1d901461041f578063e985e9c51461043257600080fd5b8063a0bcfc7f1461039d578063a22cb465146103b0578063aa271e1a146103c3578063ac5a7d5c146103e657600080fd5b806370a08231116100de57806370a08231146103555780638456cb59146103755780638da5cb5b1461037d57806395d89b411461039557600080fd5b80636352211e1461031157806369e2f0fb1461033a5780636cef16e61461034d57600080fd5b80632c0209f51161017157806340c10f191161014b57806340c10f19146102cd57806342842e0e146102e05780634684d7e9146102f35780635c975abb1461030657600080fd5b80632c0209f51461029f5780633dd1eb61146102b25780633f4ba83a146102c557600080fd5b8063081812fc116101ad578063081812fc14610226578063095ea7b31461026757806318160ddd1461027a57806323b872dd1461028c57600080fd5b806301ffc9a7146101d4578063034601ec146101fc57806306fdde0314610211575b600080fd5b6101e76101e23660046115ab565b610460565b60405190151581526020015b60405180910390f35b61020f61020a3660046116b2565b6104b2565b005b6102196104f0565b6040516101f39190611768565b61024f61023436600461177b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b61020f610275366004611794565b61057e565b600b545b6040519081526020016101f3565b61020f61029a3660046117be565b610665565b61027e6102ad36600461177b565b61082c565b61020f6102c03660046117fa565b6108a3565b61020f6109bf565b61020f6102db366004611794565b6109f8565b61020f6102ee3660046117be565b610a60565b61020f610301366004611815565b610b3f565b60065460ff166101e7565b61024f61031f36600461177b565b6003602052600090815260409020546001600160a01b031681565b61020f6103483660046117fa565b610bd3565b61020f610ca1565b61027e6103633660046117fa565b60026020526000908152604090205481565b61020f610d46565b60065461024f9061010090046001600160a01b031681565b610219610d7d565b61020f6103ab3660046118bb565b610d8a565b61020f6103be366004611904565b610e07565b6101e76103d13660046117fa565b60086020526000908152604090205460ff1681565b61020f6103f43660046117fa565b610e73565b61020f610407366004611940565b610f32565b61021961041a36600461177b565b610ffd565b60075461024f906001600160a01b031681565b6101e76104403660046119bc565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061049157506380ac58cd60e01b6001600160e01b03198316145b806104ac5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60005b81518110156104ea576104e284848484815181106104d5576104d56119ef565b6020026020010151610a60565b6001016104b5565b50505050565b600080546104fd90611a05565b80601f016020809104026020016040519081016040528092919081815260200182805461052990611a05565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b505050505081565b6000818152600360205260409020546001600160a01b0316338114806105c757506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106095760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600360205260409020546001600160a01b038481169116146106bb5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610600565b6001600160a01b0382166107055760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b336001600160a01b038416148061073257506000818152600460205260409020546001600160a01b031633145b8061076057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b61079d5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610600565b6001600160a01b0380841660008181526002602090815260408083208054600019019055938616808352848320805460010190558583526003825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600360205260408120546001600160a01b03166108905760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b506000908152600a602052604090205490565b60065461010090046001600160a01b031633146108d25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b0381166109185760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b6001600160a01b03811660009081526008602052604090205460ff16156109735760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4819dc985b9d1959608a1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517fbd42b6cd963a984d8cbff85acad4dd2c87a6d85ac756d16e6d2ec5ce6c8f07309190a250565b60065461010090046001600160a01b031633146109ee5760405162461bcd60e51b815260040161060090611a40565b6109f6611096565b565b3360009081526008602052604090205460ff16610a455760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b805460018101909155610a5b838284611129565b505050565b610a6b838383610665565b6001600160a01b0382163b1580610b235750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a401602060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611a64565b6001600160e01b031916145b610a5b5760405162461bcd60e51b815260040161060090611a81565b3360009081526008602052604090205460ff16610b8c5760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b5460005b8251811015610bcb57610bbf8483858481518110610bb257610bb26119ef565b6020026020010151611129565b60019182019101610b92565b50600b555050565b60065461010090046001600160a01b03163314610c025760405162461bcd60e51b815260040161060090611a40565b6001600160a01b03811660009081526008602052604090205460ff16610c585760405162461bcd60e51b815260206004820152600b60248201526a139bdd0819dc985b9d195960aa1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19169055517ff474b72f3e21ebafdad7dadfcb99ae7eabdbf538d52a0e0eecbf8ce0fa7043fe9190a250565b6007546001600160a01b03163314610cec5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c903732bb9037bbb732b960911b6044820152606401610600565b60068054610100600160a81b031981166101003381810292909217909355604051929091046001600160a01b03169182907faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c7390600090a350565b60065461010090046001600160a01b03163314610d755760405162461bcd60e51b815260040161060090611a40565b6109f661113d565b600180546104fd90611a05565b60065461010090046001600160a01b03163314610db95760405162461bcd60e51b815260040161060090611a40565b8051610dcc9060099060208401906114f9565b507f157eb1fffc1000c7f0ee8cb1f87be2620ec910b8be9e3af7db8c97328e2757cf81604051610dfc9190611768565b60405180910390a150565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60065461010090046001600160a01b03163314610ea25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b038116610ee85760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b600780546001600160a01b0319166001600160a01b0383169081179091556040517fd52a054f85e9a057277cd95bf6d5da45465068f0467ec7991f3fcc017be6b72590600090a250565b610f3d848484610665565b6001600160a01b0383163b1580610fe15750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a0290610f83903390899088908890600401611aab565b602060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190611a64565b6001600160e01b031916145b6104ea5760405162461bcd60e51b815260040161060090611a81565b6000818152600360205260409020546060906001600160a01b03166110645760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b600961106f836111b8565b604051602001611080929190611b04565b6040516020818303038152906040529050919050565b60065460ff166110df5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610600565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61113383836112be565b610a5b828261139d565b60065460ff16156111835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610600565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861110c3390565b6060816111dc5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561120657806111f081611bc1565b91506111ff9050600a83611bf2565b91506111e0565b60008167ffffffffffffffff811115611221576112216115eb565b6040519080825280601f01601f19166020018201604052801561124b576020820181803683370190505b5090505b84156112b657611260600183611c06565b915061126d600a86611c1d565b611278906030611c31565b60f81b81838151811061128d5761128d6119ef565b60200101906001600160f81b031916908160001a9053506112af600a86611bf2565b945061124f565b949350505050565b6112c882826113ee565b6001600160a01b0382163b158061137d5750604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a401602060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611a64565b6001600160e01b031916145b6113995760405162461bcd60e51b815260040161060090611a81565b5050565b6000828152600a6020526040908190208290555182907fe46d199dd459049fd4c9c752a8b7559ad5dbc0ddb9b399cd9db4636fd5aa8a83906113e29084815260200190565b60405180910390a25050565b6001600160a01b0382166114385760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b6000818152600360205260409020546001600160a01b03161561148e5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610600565b6001600160a01b038216600081815260026020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461150590611a05565b90600052602060002090601f016020900481019282611527576000855561156d565b82601f1061154057805160ff191683800117855561156d565b8280016001018555821561156d579182015b8281111561156d578251825591602001919060010190611552565b5061157992915061157d565b5090565b5b80821115611579576000815560010161157e565b6001600160e01b0319811681146115a857600080fd5b50565b6000602082840312156115bd57600080fd5b81356115c881611592565b9392505050565b80356001600160a01b03811681146115e657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561162a5761162a6115eb565b604052919050565b600082601f83011261164357600080fd5b8135602067ffffffffffffffff82111561165f5761165f6115eb565b8160051b61166e828201611601565b928352848101820192828101908785111561168857600080fd5b83870192505b848310156116a75782358252918301919083019061168e565b979650505050505050565b6000806000606084860312156116c757600080fd5b6116d0846115cf565b92506116de602085016115cf565b9150604084013567ffffffffffffffff8111156116fa57600080fd5b61170686828701611632565b9150509250925092565b60005b8381101561172b578181015183820152602001611713565b838111156104ea5750506000910152565b60008151808452611754816020860160208601611710565b601f01601f19169290920160200192915050565b6020815260006115c8602083018461173c565b60006020828403121561178d57600080fd5b5035919050565b600080604083850312156117a757600080fd5b6117b0836115cf565b946020939093013593505050565b6000806000606084860312156117d357600080fd5b6117dc846115cf565b92506117ea602085016115cf565b9150604084013590509250925092565b60006020828403121561180c57600080fd5b6115c8826115cf565b6000806040838503121561182857600080fd5b611831836115cf565b9150602083013567ffffffffffffffff81111561184d57600080fd5b61185985828601611632565b9150509250929050565b600067ffffffffffffffff83111561187d5761187d6115eb565b611890601f8401601f1916602001611601565b90508281528383830111156118a457600080fd5b828260208301376000602084830101529392505050565b6000602082840312156118cd57600080fd5b813567ffffffffffffffff8111156118e457600080fd5b8201601f810184136118f557600080fd5b6112b684823560208401611863565b6000806040838503121561191757600080fd5b611920836115cf565b91506020830135801515811461193557600080fd5b809150509250929050565b6000806000806080858703121561195657600080fd5b61195f856115cf565b935061196d602086016115cf565b925060408501359150606085013567ffffffffffffffff81111561199057600080fd5b8501601f810187136119a157600080fd5b6119b087823560208401611863565b91505092959194509250565b600080604083850312156119cf57600080fd5b6119d8836115cf565b91506119e6602084016115cf565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611a1957607f821691505b60208210811415611a3a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a908201526927b7363c9037bbb732b960b11b604082015260600190565b600060208284031215611a7657600080fd5b81516115c881611592565b60208082526010908201526f155394d0519157d49150d2541251539560821b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ade9083018461173c565b9695505050505050565b60008151611afa818560208601611710565b9290920192915050565b600080845481600182811c915080831680611b2057607f831692505b6020808410821415611b4057634e487b7160e01b86526022600452602486fd5b818015611b545760018114611b6557611b92565b60ff19861689528489019650611b92565b60008b81526020902060005b86811015611b8a5781548b820152908501908301611b71565b505084890196505b505050505050611ba28185611ae8565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bd557611bd5611bab565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611c0157611c01611bdc565b500490565b600082821015611c1857611c18611bab565b500390565b600082611c2c57611c2c611bdc565b500690565b60008219821115611c4457611c44611bab565b50019056fea2646970667358221220622a4bf4b5069fd86fd0332fdd1434a9e61297949b032236b89c924618ef39f364736f6c63430008090033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA0BCFC7F GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3F9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0xD4EE1D90 EQ PUSH2 0x41F JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA0BCFC7F EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0xAA271E1A EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0xAC5A7D5C EQ PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x311 JUMPI DUP1 PUSH4 0x69E2F0FB EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0x6CEF16E6 EQ PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C0209F5 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x40C10F19 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x4684D7E9 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C0209F5 EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0x3DD1EB61 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x34601EC EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x219 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1768 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x1794 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH1 0xB SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH2 0x27E PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH2 0x82C JUMP JUMPDEST PUSH2 0x20F PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x9BF JUMP JUMPDEST PUSH2 0x20F PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1794 JUMP JUMPDEST PUSH2 0x9F8 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x17BE JUMP JUMPDEST PUSH2 0xA60 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1815 JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x31F CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x20F PUSH2 0xCA1 JUMP JUMPDEST PUSH2 0x27E PUSH2 0x363 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20F PUSH2 0xD46 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x24F SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x219 PUSH2 0xD7D JUMP JUMPDEST PUSH2 0x20F PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x18BB JUMP JUMPDEST PUSH2 0xD8A JUMP JUMPDEST PUSH2 0x20F PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x1904 JUMP JUMPDEST PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x3F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x17FA JUMP JUMPDEST PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x20F PUSH2 0x407 CALLDATASIZE PUSH1 0x4 PUSH2 0x1940 JUMP JUMPDEST PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x41A CALLDATASIZE PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x24F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x440 CALLDATASIZE PUSH1 0x4 PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x491 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x4AC JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x4EA JUMPI PUSH2 0x4E2 DUP5 DUP5 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D5 PUSH2 0x19EF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4B5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x4FD SWAP1 PUSH2 0x1A05 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x529 SWAP1 PUSH2 0x1A05 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x576 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x54B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x576 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x559 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ DUP1 PUSH2 0x5C7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x609 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1393D517D055551213D492569151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x6BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x57524F4E475F46524F4D PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1253959053125117D49150D25412515395 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 PUSH2 0x732 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ JUMPDEST DUP1 PUSH2 0x760 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0x79D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1393D517D055551213D492569151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP4 DUP7 AND DUP1 DUP4 MSTORE DUP5 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP6 DUP4 MSTORE PUSH1 0x3 DUP3 MSTORE DUP5 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP5 DUP4 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP2 SSTORE SWAP3 MLOAD DUP5 SWAP4 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x890 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x517565727920666F72206E6F6E6578697374656E7420726F6F73746572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4E6F2061646472657373283029 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x973 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105B1C9958591E4819DC985B9D1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xBD42B6CD963A984D8CBFF85ACAD4DD2C87A6D85AC756D16E6D2EC5CE6C8F0730 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH2 0x9F6 PUSH2 0x1096 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x27B7363C9036B4B73A32B9 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0xA5B DUP4 DUP3 DUP5 PUSH2 0x1129 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xA6B DUP4 DUP4 DUP4 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EXTCODESIZE ISZERO DUP1 PUSH2 0xB23 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP5 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xAF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB17 SWAP2 SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ JUMPDEST PUSH2 0xA5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xB8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x27B7363C9036B4B73A32B9 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xBCB JUMPI PUSH2 0xBBF DUP5 DUP4 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBB2 JUMPI PUSH2 0xBB2 PUSH2 0x19EF JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1129 JUMP JUMPDEST PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xB92 JUMP JUMPDEST POP PUSH1 0xB SSTORE POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC58 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD0819DC985B9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xF474B72F3E21EBAFDAD7DADFCB99AE7EABDBF538D52A0E0EECBF8CE0FA7043FE SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCEC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x27B7363C903732BB9037BBB732B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT DUP2 AND PUSH2 0x100 CALLER DUP2 DUP2 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 SWAP1 PUSH32 0xAAC18E3887F7D855B2483E20615F8E3FB6EFC18E25502090082B47047FB57C73 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH2 0x9F6 PUSH2 0x113D JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH2 0x4FD SWAP1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xDCC SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x14F9 JUMP JUMPDEST POP PUSH32 0x157EB1FFFC1000C7F0EE8CB1F87BE2620EC910B8BE9E3AF7DB8C97328E2757CF DUP2 PUSH1 0x40 MLOAD PUSH2 0xDFC SWAP2 SWAP1 PUSH2 0x1768 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEA2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xEE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4E6F2061646472657373283029 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0xD52A054F85E9A057277CD95BF6D5DA45465068F0467EC7991F3FCC017BE6B725 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0xF3D DUP5 DUP5 DUP5 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO DUP1 PUSH2 0xFE1 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xF83 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD5 SWAP2 SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ JUMPDEST PUSH2 0x4EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1064 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x517565727920666F72206E6F6E6578697374656E7420726F6F73746572000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x9 PUSH2 0x106F DUP4 PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1080 SWAP3 SWAP2 SWAP1 PUSH2 0x1B04 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0x10DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1133 DUP4 DUP4 PUSH2 0x12BE JUMP JUMPDEST PUSH2 0xA5B DUP3 DUP3 PUSH2 0x139D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x110C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x11DC JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1206 JUMPI DUP1 PUSH2 0x11F0 DUP2 PUSH2 0x1BC1 JUMP JUMPDEST SWAP2 POP PUSH2 0x11FF SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1BF2 JUMP JUMPDEST SWAP2 POP PUSH2 0x11E0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1221 JUMPI PUSH2 0x1221 PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x124B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x12B6 JUMPI PUSH2 0x1260 PUSH1 0x1 DUP4 PUSH2 0x1C06 JUMP JUMPDEST SWAP2 POP PUSH2 0x126D PUSH1 0xA DUP7 PUSH2 0x1C1D JUMP JUMPDEST PUSH2 0x1278 SWAP1 PUSH1 0x30 PUSH2 0x1C31 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x128D JUMPI PUSH2 0x128D PUSH2 0x19EF JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x12AF PUSH1 0xA DUP7 PUSH2 0x1BF2 JUMP JUMPDEST SWAP5 POP PUSH2 0x124F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x12C8 DUP3 DUP3 PUSH2 0x13EE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EXTCODESIZE ISZERO DUP1 PUSH2 0x137D JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x44 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD MSTORE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x134D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1371 SWAP2 SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ JUMPDEST PUSH2 0x1399 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x600 SWAP1 PUSH2 0x1A81 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD DUP3 SWAP1 PUSH32 0xE46D199DD459049FD4C9C752A8B7559AD5DBC0DDB9B399CD9DB4636FD5AA8A83 SWAP1 PUSH2 0x13E2 SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1438 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1253959053125117D49150D25412515395 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x148E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1053149150511657D35253951151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x600 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1505 SWAP1 PUSH2 0x1A05 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1527 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x156D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1540 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x156D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x156D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x156D JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1552 JUMP JUMPDEST POP PUSH2 0x1579 SWAP3 SWAP2 POP PUSH2 0x157D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1579 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x157E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15C8 DUP2 PUSH2 0x1592 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x15E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x162A JUMPI PUSH2 0x162A PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x165F JUMPI PUSH2 0x165F PUSH2 0x15EB JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x166E DUP3 DUP3 ADD PUSH2 0x1601 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x1688 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x16A7 JUMPI DUP3 CALLDATALOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x168E JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D0 DUP5 PUSH2 0x15CF JUMP JUMPDEST SWAP3 POP PUSH2 0x16DE PUSH1 0x20 DUP6 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1706 DUP7 DUP3 DUP8 ADD PUSH2 0x1632 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x172B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1713 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4EA JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1754 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1710 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x15C8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x173C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x178D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17B0 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17DC DUP5 PUSH2 0x15CF JUMP JUMPDEST SWAP3 POP PUSH2 0x17EA PUSH1 0x20 DUP6 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x180C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15C8 DUP3 PUSH2 0x15CF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1828 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1831 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x1632 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x187D JUMPI PUSH2 0x187D PUSH2 0x15EB JUMP JUMPDEST PUSH2 0x1890 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1601 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x18A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x18F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12B6 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1863 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1920 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1935 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1956 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x195F DUP6 PUSH2 0x15CF JUMP JUMPDEST SWAP4 POP PUSH2 0x196D PUSH1 0x20 DUP7 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B0 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1863 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19D8 DUP4 PUSH2 0x15CF JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 PUSH1 0x20 DUP5 ADD PUSH2 0x15CF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A19 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1A3A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xA SWAP1 DUP3 ADD MSTORE PUSH10 0x27B7363C9037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15C8 DUP2 PUSH2 0x1592 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x155394D0519157D49150D25412515395 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1ADE SWAP1 DUP4 ADD DUP5 PUSH2 0x173C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x1AFA DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1710 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x1B20 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x1B40 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1B54 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1B65 JUMPI PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x1B92 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1B8A JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x1B71 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP PUSH2 0x1BA2 DUP2 DUP6 PUSH2 0x1AE8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1BD5 JUMPI PUSH2 0x1BD5 PUSH2 0x1BAB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C01 JUMPI PUSH2 0x1C01 PUSH2 0x1BDC JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1C18 JUMPI PUSH2 0x1C18 PUSH2 0x1BAB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C2C JUMPI PUSH2 0x1C2C PUSH2 0x1BDC JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1C44 JUMPI PUSH2 0x1C44 PUSH2 0x1BAB JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x2A4BF4 0xB5 MOD SWAP16 0xD8 PUSH16 0xD0332FDD1434A9E61297949B032236B8 SWAP13 SWAP3 CHAINID XOR 0xEF CODECOPY RETURN PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
          "sourceMap": "188:1260:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4300:335:21;;;;;;:::i;:::-;;:::i;:::-;;;565:14:35;;558:22;540:41;;528:2;513:18;4300:335:21;;;;;;;;513:261:31;;;;;;:::i;:::-;;:::i;:::-;;996:18:21;;;:::i;:::-;;;;;;;:::i;1435:46::-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1435:46:21;;;;;;-1:-1:-1;;;;;3522:32:35;;;3504:51;;3492:2;3477:18;1435:46:21;3358:203:35;2045:281:21;;;;;;:::i;:::-;;:::i;421:88:31:-;487:17;;421:88;;;3971:25:35;;;3959:2;3944:18;421:88:31;3825:177:35;2541:737:21;;;;;;:::i;:::-;;:::i;613:167:32:-;;;;;;:::i;:::-;;:::i;1399:238:22:-;;;;;;:::i;:::-;;:::i;1886:59::-;;;:::i;778:193:31:-;;;;;;:::i;:::-;;:::i;3284:396:21:-;;;;;;:::i;:::-;;:::i;975:314:31:-;;;;;;:::i;:::-;;:::i;1098:84:1:-;1168:7;;;;1098:84;;1386:42:21;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1386:42:21;;;1641:182:22;;;;;;:::i;:::-;;:::i;1207:188::-;;;:::i;1335:44:21:-;;;;;;:::i;:::-;;;;;;;;;;;;;;1827:55:22;;;:::i;198:20::-;;;;;;;;-1:-1:-1;;;;;198:20:22;;;1021::21;;;:::i;1010:119:32:-;;;;;;:::i;:::-;;:::i;2332:203:21:-;;;;;;:::i;:::-;;:::i;350:40:22:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1037:166;;;;;;:::i;:::-;;:::i;3686:425:21:-;;;;;;:::i;:::-;;:::i;784:222:32:-;;;;;;:::i;:::-;;:::i;290:23:22:-;;;;;-1:-1:-1;;;;;290:23:22;;;1488:68:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;4300:335;4376:4;-1:-1:-1;;;;;;;;;4411:25:21;;;;:100;;-1:-1:-1;;;;;;;;;;4486:25:21;;;4411:100;:175;;;-1:-1:-1;;;;;;;;;;4561:25:21;;;4411:175;4392:194;4300:335;-1:-1:-1;;4300:335:21:o;513:261:31:-;635:9;630:140;654:10;:17;650:1;:21;630:140;;;683:41;700:4;706:2;710:10;721:1;710:13;;;;;;;;:::i;:::-;;;;;;;683:16;:41::i;:::-;752:3;;630:140;;;;513:261;;;:::o;996:18:21:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2045:281::-;2116:13;2132:11;;;:7;:11;;;;;;-1:-1:-1;;;;;2132:11:21;2162:10;:19;;;:58;;-1:-1:-1;;;;;;2185:23:21;;;;;;:16;:23;;;;;;;;2209:10;2185:35;;;;;;;;;;2162:58;2154:85;;;;-1:-1:-1;;;2154:85:21;;7834:2:35;2154:85:21;;;7816:21:35;7873:2;7853:18;;;7846:30;-1:-1:-1;;;7892:18:35;;;7885:44;7946:18;;2154:85:21;;;;;;;;;2250:15;;;;:11;:15;;;;;;:25;;-1:-1:-1;;;;;;2250:25:21;-1:-1:-1;;;;;2250:25:21;;;;;;;;;2291:28;;2250:15;;2291:28;;;;;;;2106:220;2045:281;;:::o;2541:737::-;2672:11;;;;:7;:11;;;;;;-1:-1:-1;;;;;2664:19:21;;;2672:11;;2664:19;2656:42;;;;-1:-1:-1;;;2656:42:21;;8177:2:35;2656:42:21;;;8159:21:35;8216:2;8196:18;;;8189:30;-1:-1:-1;;;8235:18:35;;;8228:40;8285:18;;2656:42:21;7975:334:35;2656:42:21;-1:-1:-1;;;;;2717:16:21;;2709:46;;;;-1:-1:-1;;;2709:46:21;;8516:2:35;2709:46:21;;;8498:21:35;8555:2;8535:18;;;8528:30;-1:-1:-1;;;8574:18:35;;;8567:47;8631:18;;2709:46:21;8314:341:35;2709:46:21;2787:10;-1:-1:-1;;;;;2787:18:21;;;;:51;;-1:-1:-1;2823:15:21;;;;:11;:15;;;;;;-1:-1:-1;;;;;2823:15:21;2809:10;:29;2787:51;:89;;;-1:-1:-1;;;;;;2842:22:21;;;;;;:16;:22;;;;;;;;2865:10;2842:34;;;;;;;;;;2787:89;2766:150;;;;-1:-1:-1;;;2766:150:21;;7834:2:35;2766:150:21;;;7816:21:35;7873:2;7853:18;;;7846:30;-1:-1:-1;;;7892:18:35;;;7885:44;7946:18;;2766:150:21;7632:338:35;2766:150:21;-1:-1:-1;;;;;3116:15:21;;;;;;;:9;:15;;;;;;;;:17;;-1:-1:-1;;3116:17:21;;;3148:13;;;;;;;;;:15;;3116:17;3148:15;;;3184:11;;;:7;:11;;;;;:16;;-1:-1:-1;;;;;;3184:16:21;;;;;;;;3218:11;:15;;;;;;3211:22;;;;;;;;3249;;3192:2;;3148:13;3116:15;3249:22;;;2541:737;;;:::o;613:167:32:-;669:7;1357:16;;;:7;:16;;;;;;-1:-1:-1;;;;;1357:16:32;684:60;;;;-1:-1:-1;;;684:60:32;;8862:2:35;684:60:32;;;8844:21:35;8901:2;8881:18;;;8874:30;8940:31;8920:18;;;8913:59;8989:18;;684:60:32;8660:353:35;684:60:32;-1:-1:-1;757:18:32;;;;:7;:18;;;;;;;613:167::o;1399:238:22:-;913:5;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;;;;;;:::i;:::-;-1:-1:-1;;;;;1474:21:22;::::1;1466:47;;;::::0;-1:-1:-1;;;1466:47:22;;9559:2:35;1466:47:22::1;::::0;::::1;9541:21:35::0;9598:2;9578:18;;;9571:30;-1:-1:-1;;;9617:18:35;;;9610:43;9670:18;;1466:47:22::1;9357:337:35::0;1466:47:22::1;-1:-1:-1::0;;;;;1528:17:22;::::1;;::::0;;;:8:::1;:17;::::0;;;;;::::1;;1527:18;1519:46;;;::::0;-1:-1:-1;;;1519:46:22;;9901:2:35;1519:46:22::1;::::0;::::1;9883:21:35::0;9940:2;9920:18;;;9913:30;-1:-1:-1;;;9959:18:35;;;9952:45;10014:18;;1519:46:22::1;9699:339:35::0;1519:46:22::1;-1:-1:-1::0;;;;;1571:17:22;::::1;;::::0;;;:8:::1;:17;::::0;;;;;:24;;-1:-1:-1;;1571:24:22::1;1591:4;1571:24;::::0;;1606:26;::::1;::::0;1571:17;1606:26:::1;1399:238:::0;:::o;1886:59::-;913:5;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;;;;;;:::i;:::-;1930:10:::1;:8;:10::i;:::-;1886:59::o:0;778:193:31:-;994:10:22;985:20;;;;:8;:20;;;;;;;;977:44;;;;-1:-1:-1;;;977:44:22;;10245:2:35;977:44:22;;;10227:21:35;10284:2;10264:18;;;10257:30;-1:-1:-1;;;10303:18:35;;;10296:41;10354:18;;977:44:22;10043:335:35;977:44:22;865:17:31::1;::::0;;907:19:::1;::::0;::::1;::::0;;;939:27:::1;945:2:::0;865:17;960:5;939::::1;:27::i;:::-;839:132;778:193:::0;;:::o;3284:396:21:-;3403:26;3416:4;3422:2;3426;3403:12;:26::i;:::-;-1:-1:-1;;;;;3461:14:21;;;:19;;:170;;-1:-1:-1;3500:66:21;;-1:-1:-1;;;3500:66:21;;;3541:10;3500:66;;;10688:34:35;-1:-1:-1;;;;;10758:15:35;;;10738:18;;;10731:43;10790:18;;;10783:34;;;10853:3;10833:18;;;10826:31;-1:-1:-1;10873:19:35;;;10866:30;3586:45:21;;3500:40;;;;3586:45;;10913:19:35;;3500:66:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;3500:131:21;;3461:170;3440:233;;;;-1:-1:-1;;;3440:233:21;;;;;;;:::i;975:314:31:-;994:10:22;985:20;;;;:8;:20;;;;;;;;977:44;;;;-1:-1:-1;;;977:44:22;;10245:2:35;977:44:22;;;10227:21:35;10284:2;10264:18;;;10257:30;-1:-1:-1;;;10303:18:35;;;10296:41;10354:18;;977:44:22;10043:335:35;977:44:22;1077:17:31::1;::::0;1057::::1;1101:148;1125:6;:13;1121:1;:17;1101:148;;;1150:31;1156:2;1160:9;1171:6;1178:1;1171:9;;;;;;;;:::i;:::-;;;;;;;1150:5;:31::i;:::-;1210:11;::::0;;::::1;::::0;1231:3:::1;1101:148;;;-1:-1:-1::0;1255:17:31::1;:29:::0;-1:-1:-1;;975:314:31:o;1641:182:22:-;913:5;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;;;;;;:::i;:::-;-1:-1:-1;;;;;1717:17:22;::::1;;::::0;;;:8:::1;:17;::::0;;;;;::::1;;1709:41;;;::::0;-1:-1:-1;;;1709:41:22;;11744:2:35;1709:41:22::1;::::0;::::1;11726:21:35::0;11783:2;11763:18;;;11756:30;-1:-1:-1;;;11802:18:35;;;11795:41;11853:18;;1709:41:22::1;11542:335:35::0;1709:41:22::1;-1:-1:-1::0;;;;;1756:17:22;::::1;1776:5;1756:17:::0;;;:8:::1;:17;::::0;;;;;:25;;-1:-1:-1;;1756:25:22::1;::::0;;1792:26;::::1;::::0;1776:5;1792:26:::1;1641:182:::0;:::o;1207:188::-;1265:8;;-1:-1:-1;;;;;1265:8:22;1251:10;:22;1243:49;;;;-1:-1:-1;;;1243:49:22;;12084:2:35;1243:49:22;;;12066:21:35;12123:2;12103:18;;;12096:30;-1:-1:-1;;;12142:18:35;;;12135:44;12196:18;;1243:49:22;11882:338:35;1243:49:22;1317:5;;;-1:-1:-1;;;;;;1328:18:22;;1317:5;1336:10;1328:18;;;;;;;;;;1357:33;;1317:5;;;;-1:-1:-1;;;;;1317:5:22;;;;1357:33;;-1:-1:-1;;1357:33:22;1237:158;1207:188::o;1827:55::-;913:5;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;;;;;;:::i;:::-;1869:8:::1;:6;:8::i;1021:20:21:-:0;;;;;;;:::i;1010:119:32:-;913:5:22;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;;;;;;:::i;:::-;1075:17:32;;::::1;::::0;:8:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;:::-;;1103:21;1117:6;1103:21;;;;;;:::i;:::-;;;;;;;;1010:119:::0;:::o;2332:203:21:-;2434:10;2417:28;;;;:16;:28;;;;;;;;-1:-1:-1;;;;;2417:38:21;;;;;;;;;;;;:49;;-1:-1:-1;;2417:49:21;;;;;;;;;;2482:46;;540:41:35;;;2417:38:21;;2434:10;2482:46;;513:18:35;2482:46:21;;;;;;;2332:203;;:::o;1037:166:22:-;913:5;;;;;-1:-1:-1;;;;;913:5:22;899:10;:19;891:42;;;;-1:-1:-1;;;891:42:22;;;;;;;:::i;:::-;-1:-1:-1;;;;;1104:21:22;::::1;1096:47;;;::::0;-1:-1:-1;;;1096:47:22;;9559:2:35;1096:47:22::1;::::0;::::1;9541:21:35::0;9598:2;9578:18;;;9571:30;-1:-1:-1;;;9617:18:35;;;9610:43;9670:18;;1096:47:22::1;9357:337:35::0;1096:47:22::1;1149:8;:18:::0;;-1:-1:-1;;;;;;1149:18:22::1;-1:-1:-1::0;;;;;1149:18:22;::::1;::::0;;::::1;::::0;;;1178:20:::1;::::0;::::1;::::0;-1:-1:-1;;1178:20:22::1;1037:166:::0;:::o;3686:425:21:-;3832:26;3845:4;3851:2;3855;3832:12;:26::i;:::-;-1:-1:-1;;;;;3890:14:21;;;:19;;:172;;-1:-1:-1;3929:68:21;;-1:-1:-1;;;3929:68:21;;;4017:45;-1:-1:-1;;;;;3929:40:21;;;4017:45;;3929:68;;3970:10;;3982:4;;3988:2;;3992:4;;3929:68;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;3929:133:21;;3890:172;3869:235;;;;-1:-1:-1;;;3869:235:21;;;;;;;:::i;784:222:32:-;1338:4;1357:16;;;:7;:16;;;;;;851:13;;-1:-1:-1;;;;;1357:16:32;872:60;;;;-1:-1:-1;;;872:60:32;;8862:2:35;872:60:32;;;8844:21:35;8901:2;8881:18;;;8874:30;8940:31;8920:18;;;8913:59;8989:18;;872:60:32;8660:353:35;872:60:32;969:8;979:20;:9;:18;:20::i;:::-;952:48;;;;;;;;;:::i;:::-;;;;;;;;;;;;;938:63;;784:222;;;:::o;2110:117:1:-;1168:7;;;;1669:41;;;;-1:-1:-1;;;1669:41:1;;14427:2:35;1669:41:1;;;14409:21:35;14466:2;14446:18;;;14439:30;-1:-1:-1;;;14485:18:35;;;14478:50;14545:18;;1669:41:1;14225:344:35;1669:41:1;2168:7:::1;:15:::0;;-1:-1:-1;;2168:15:1::1;::::0;;2198:22:::1;719:10:16::0;2207:12:1::1;2198:22;::::0;-1:-1:-1;;;;;3522:32:35;;;3504:51;;3492:2;3477:18;2198:22:1::1;;;;;;;2110:117::o:0;1293:153:31:-;1384:24;1394:2;1398:9;1384;:24::i;:::-;1414:27;1424:9;1435:5;1414:9;:27::i;1863:115:1:-;1168:7;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:1;;14776:2:35;1403:38:1;;;14758:21:35;14815:2;14795:18;;;14788:30;-1:-1:-1;;;14834:18:35;;;14827:46;14890:18;;1403:38:1;14574:340:35;1403:38:1;1922:7:::1;:14:::0;;-1:-1:-1;;1922:14:1::1;1932:4;1922:14;::::0;;1951:20:::1;1958:12;719:10:16::0;;640:96;328:703:17;384:13;601:10;597:51;;-1:-1:-1;;627:10:17;;;;;;;;;;;;-1:-1:-1;;;627:10:17;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:17;;-1:-1:-1;773:2:17;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:17;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:17;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:17;;;;;;;;-1:-1:-1;972:11:17;981:2;972:11;;:::i;:::-;;;844:150;;;1017:6;328:703;-1:-1:-1;;;;328:703:17:o;5771:340:21:-;5841:13;5847:2;5851;5841:5;:13::i;:::-;-1:-1:-1;;;;;5886:14:21;;;:19;;:176;;-1:-1:-1;5925:72:21;;-1:-1:-1;;;5925:72:21;;;5966:10;5925:72;;;10688:34:35;5986:1:21;10738:18:35;;;10731:43;;;10790:18;;;10783:34;;;10853:3;10833:18;;;10826:31;10873:19;;;10866:30;6017:45:21;-1:-1:-1;;;;;5925:40:21;;;6017:45;;10913:19:35;;5925:72:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;5925:137:21;;5886:176;5865:239;;;;-1:-1:-1;;;5865:239:21;;;;;;;:::i;:::-;5771:340;;:::o;1133:136:32:-;1201:18;;;;:7;:18;;;;;;;:26;;;1238;1209:9;;1238:26;;;;1222:5;3971:25:35;;3959:2;3944:18;;3825:177;1238:26:32;;;;;;;;1133:136;;:::o;4829:368:21:-;-1:-1:-1;;;;;4903:16:21;;4895:46;;;;-1:-1:-1;;;4895:46:21;;8516:2:35;4895:46:21;;;8498:21:35;8555:2;8535:18;;;8528:30;-1:-1:-1;;;8574:18:35;;;8567:47;8631:18;;4895:46:21;8314:341:35;4895:46:21;4983:1;4960:11;;;:7;:11;;;;;;-1:-1:-1;;;;;4960:11:21;:25;4952:52;;;;-1:-1:-1;;;4952:52:21;;16030:2:35;4952:52:21;;;16012:21:35;16069:2;16049:18;;;16042:30;-1:-1:-1;;;16088:18:35;;;16081:44;16142:18;;4952:52:21;15828:338:35;4952:52:21;-1:-1:-1;;;;;5094:13:21;;;;;;:9;:13;;;;;;;;:15;;;;;;5130:11;;;:7;:11;;;;;;:16;;-1:-1:-1;;;;;;5130:16:21;;;;;5162:28;5138:2;;5094:13;;5162:28;;5094:13;;5162:28;4829:368;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:35;-1:-1:-1;;;;;;88:32:35;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;:::-;384:5;150:245;-1:-1:-1;;;150:245:35:o;592:173::-;660:20;;-1:-1:-1;;;;;709:31:35;;699:42;;689:70;;755:1;752;745:12;689:70;592:173;;;:::o;770:127::-;831:10;826:3;822:20;819:1;812:31;862:4;859:1;852:15;886:4;883:1;876:15;902:275;973:2;967:9;1038:2;1019:13;;-1:-1:-1;;1015:27:35;1003:40;;1073:18;1058:34;;1094:22;;;1055:62;1052:88;;;1120:18;;:::i;:::-;1156:2;1149:22;902:275;;-1:-1:-1;902:275:35:o;1182:712::-;1236:5;1289:3;1282:4;1274:6;1270:17;1266:27;1256:55;;1307:1;1304;1297:12;1256:55;1343:6;1330:20;1369:4;1392:18;1388:2;1385:26;1382:52;;;1414:18;;:::i;:::-;1460:2;1457:1;1453:10;1483:28;1507:2;1503;1499:11;1483:28;:::i;:::-;1545:15;;;1615;;;1611:24;;;1576:12;;;;1647:15;;;1644:35;;;1675:1;1672;1665:12;1644:35;1711:2;1703:6;1699:15;1688:26;;1723:142;1739:6;1734:3;1731:15;1723:142;;;1805:17;;1793:30;;1756:12;;;;1843;;;;1723:142;;;1883:5;1182:712;-1:-1:-1;;;;;;;1182:712:35:o;1899:496::-;2001:6;2009;2017;2070:2;2058:9;2049:7;2045:23;2041:32;2038:52;;;2086:1;2083;2076:12;2038:52;2109:29;2128:9;2109:29;:::i;:::-;2099:39;;2157:38;2191:2;2180:9;2176:18;2157:38;:::i;:::-;2147:48;;2246:2;2235:9;2231:18;2218:32;2273:18;2265:6;2262:30;2259:50;;;2305:1;2302;2295:12;2259:50;2328:61;2381:7;2372:6;2361:9;2357:22;2328:61;:::i;:::-;2318:71;;;1899:496;;;;;:::o;2400:258::-;2472:1;2482:113;2496:6;2493:1;2490:13;2482:113;;;2572:11;;;2566:18;2553:11;;;2546:39;2518:2;2511:10;2482:113;;;2613:6;2610:1;2607:13;2604:48;;;-1:-1:-1;;2648:1:35;2630:16;;2623:27;2400:258::o;2663:269::-;2716:3;2754:5;2748:12;2781:6;2776:3;2769:19;2797:63;2853:6;2846:4;2841:3;2837:14;2830:4;2823:5;2819:16;2797:63;:::i;:::-;2914:2;2893:15;-1:-1:-1;;2889:29:35;2880:39;;;;2921:4;2876:50;;2663:269;-1:-1:-1;;2663:269:35:o;2937:231::-;3086:2;3075:9;3068:21;3049:4;3106:56;3158:2;3147:9;3143:18;3135:6;3106:56;:::i;3173:180::-;3232:6;3285:2;3273:9;3264:7;3260:23;3256:32;3253:52;;;3301:1;3298;3291:12;3253:52;-1:-1:-1;3324:23:35;;3173:180;-1:-1:-1;3173:180:35:o;3566:254::-;3634:6;3642;3695:2;3683:9;3674:7;3670:23;3666:32;3663:52;;;3711:1;3708;3701:12;3663:52;3734:29;3753:9;3734:29;:::i;:::-;3724:39;3810:2;3795:18;;;;3782:32;;-1:-1:-1;;;3566:254:35:o;4007:328::-;4084:6;4092;4100;4153:2;4141:9;4132:7;4128:23;4124:32;4121:52;;;4169:1;4166;4159:12;4121:52;4192:29;4211:9;4192:29;:::i;:::-;4182:39;;4240:38;4274:2;4263:9;4259:18;4240:38;:::i;:::-;4230:48;;4325:2;4314:9;4310:18;4297:32;4287:42;;4007:328;;;;;:::o;4340:186::-;4399:6;4452:2;4440:9;4431:7;4427:23;4423:32;4420:52;;;4468:1;4465;4458:12;4420:52;4491:29;4510:9;4491:29;:::i;4531:422::-;4624:6;4632;4685:2;4673:9;4664:7;4660:23;4656:32;4653:52;;;4701:1;4698;4691:12;4653:52;4724:29;4743:9;4724:29;:::i;:::-;4714:39;;4804:2;4793:9;4789:18;4776:32;4831:18;4823:6;4820:30;4817:50;;;4863:1;4860;4853:12;4817:50;4886:61;4939:7;4930:6;4919:9;4915:22;4886:61;:::i;:::-;4876:71;;;4531:422;;;;;:::o;4958:407::-;5023:5;5057:18;5049:6;5046:30;5043:56;;;5079:18;;:::i;:::-;5117:57;5162:2;5141:15;;-1:-1:-1;;5137:29:35;5168:4;5133:40;5117:57;:::i;:::-;5108:66;;5197:6;5190:5;5183:21;5237:3;5228:6;5223:3;5219:16;5216:25;5213:45;;;5254:1;5251;5244:12;5213:45;5303:6;5298:3;5291:4;5284:5;5280:16;5267:43;5357:1;5350:4;5341:6;5334:5;5330:18;5326:29;5319:40;4958:407;;;;;:::o;5370:451::-;5439:6;5492:2;5480:9;5471:7;5467:23;5463:32;5460:52;;;5508:1;5505;5498:12;5460:52;5548:9;5535:23;5581:18;5573:6;5570:30;5567:50;;;5613:1;5610;5603:12;5567:50;5636:22;;5689:4;5681:13;;5677:27;-1:-1:-1;5667:55:35;;5718:1;5715;5708:12;5667:55;5741:74;5807:7;5802:2;5789:16;5784:2;5780;5776:11;5741:74;:::i;5826:347::-;5891:6;5899;5952:2;5940:9;5931:7;5927:23;5923:32;5920:52;;;5968:1;5965;5958:12;5920:52;5991:29;6010:9;5991:29;:::i;:::-;5981:39;;6070:2;6059:9;6055:18;6042:32;6117:5;6110:13;6103:21;6096:5;6093:32;6083:60;;6139:1;6136;6129:12;6083:60;6162:5;6152:15;;;5826:347;;;;;:::o;6178:667::-;6273:6;6281;6289;6297;6350:3;6338:9;6329:7;6325:23;6321:33;6318:53;;;6367:1;6364;6357:12;6318:53;6390:29;6409:9;6390:29;:::i;:::-;6380:39;;6438:38;6472:2;6461:9;6457:18;6438:38;:::i;:::-;6428:48;;6523:2;6512:9;6508:18;6495:32;6485:42;;6578:2;6567:9;6563:18;6550:32;6605:18;6597:6;6594:30;6591:50;;;6637:1;6634;6627:12;6591:50;6660:22;;6713:4;6705:13;;6701:27;-1:-1:-1;6691:55:35;;6742:1;6739;6732:12;6691:55;6765:74;6831:7;6826:2;6813:16;6808:2;6804;6800:11;6765:74;:::i;:::-;6755:84;;;6178:667;;;;;;;:::o;6850:260::-;6918:6;6926;6979:2;6967:9;6958:7;6954:23;6950:32;6947:52;;;6995:1;6992;6985:12;6947:52;7018:29;7037:9;7018:29;:::i;:::-;7008:39;;7066:38;7100:2;7089:9;7085:18;7066:38;:::i;:::-;7056:48;;6850:260;;;;;:::o;7115:127::-;7176:10;7171:3;7167:20;7164:1;7157:31;7207:4;7204:1;7197:15;7231:4;7228:1;7221:15;7247:380;7326:1;7322:12;;;;7369;;;7390:61;;7444:4;7436:6;7432:17;7422:27;;7390:61;7497:2;7489:6;7486:14;7466:18;7463:38;7460:161;;;7543:10;7538:3;7534:20;7531:1;7524:31;7578:4;7575:1;7568:15;7606:4;7603:1;7596:15;7460:161;;7247:380;;;:::o;9018:334::-;9220:2;9202:21;;;9259:2;9239:18;;;9232:30;-1:-1:-1;;;9293:2:35;9278:18;;9271:40;9343:2;9328:18;;9018:334::o;10943:249::-;11012:6;11065:2;11053:9;11044:7;11040:23;11036:32;11033:52;;;11081:1;11078;11071:12;11033:52;11113:9;11107:16;11132:30;11156:5;11132:30;:::i;11197:340::-;11399:2;11381:21;;;11438:2;11418:18;;;11411:30;-1:-1:-1;;;11472:2:35;11457:18;;11450:46;11528:2;11513:18;;11197:340::o;12225:500::-;-1:-1:-1;;;;;12494:15:35;;;12476:34;;12546:15;;12541:2;12526:18;;12519:43;12593:2;12578:18;;12571:34;;;12641:3;12636:2;12621:18;;12614:31;;;12419:4;;12662:57;;12699:19;;12691:6;12662:57;:::i;:::-;12654:65;12225:500;-1:-1:-1;;;;;;12225:500:35:o;12856:185::-;12898:3;12936:5;12930:12;12951:52;12996:6;12991:3;12984:4;12977:5;12973:16;12951:52;:::i;:::-;13019:16;;;;;12856:185;-1:-1:-1;;12856:185:35:o;13046:1174::-;13222:3;13251:1;13284:6;13278:13;13314:3;13336:1;13364:9;13360:2;13356:18;13346:28;;13424:2;13413:9;13409:18;13446;13436:61;;13490:4;13482:6;13478:17;13468:27;;13436:61;13516:2;13564;13556:6;13553:14;13533:18;13530:38;13527:165;;;-1:-1:-1;;;13591:33:35;;13647:4;13644:1;13637:15;13677:4;13598:3;13665:17;13527:165;13708:18;13735:104;;;;13853:1;13848:320;;;;13701:467;;13735:104;-1:-1:-1;;13768:24:35;;13756:37;;13813:16;;;;-1:-1:-1;13735:104:35;;13848:320;12803:1;12796:14;;;12840:4;12827:18;;13943:1;13957:165;13971:6;13968:1;13965:13;13957:165;;;14049:14;;14036:11;;;14029:35;14092:16;;;;13986:10;;13957:165;;;13961:3;;14151:6;14146:3;14142:16;14135:23;;13701:467;;;;;;;14184:30;14210:3;14202:6;14184:30;:::i;:::-;14177:37;13046:1174;-1:-1:-1;;;;;13046:1174:35:o;14919:127::-;14980:10;14975:3;14971:20;14968:1;14961:31;15011:4;15008:1;15001:15;15035:4;15032:1;15025:15;15051:135;15090:3;-1:-1:-1;;15111:17:35;;15108:43;;;15131:18;;:::i;:::-;-1:-1:-1;15178:1:35;15167:13;;15051:135::o;15191:127::-;15252:10;15247:3;15243:20;15240:1;15233:31;15283:4;15280:1;15273:15;15307:4;15304:1;15297:15;15323:120;15363:1;15389;15379:35;;15394:18;;:::i;:::-;-1:-1:-1;15428:9:35;;15323:120::o;15448:125::-;15488:4;15516:1;15513;15510:8;15507:34;;;15521:18;;:::i;:::-;-1:-1:-1;15558:9:35;;15448:125::o;15578:112::-;15610:1;15636;15626:35;;15641:18;;:::i;:::-;-1:-1:-1;15675:9:35;;15578:112::o;15695:128::-;15735:3;15766:1;15762:6;15759:1;15756:13;15753:39;;;15772:18;;:::i;:::-;-1:-1:-1;15808:9:35;;15695:128::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1459000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "approve(address,uint256)": "31132",
            "balanceOf(address)": "2564",
            "batchMint(address,uint256[])": "infinite",
            "breeds(uint256)": "4699",
            "getApproved(uint256)": "2523",
            "grantMinterRole(address)": "30222",
            "isApprovedForAll(address,address)": "infinite",
            "isMinter(address)": "2609",
            "mint(address,uint256)": "infinite",
            "name()": "infinite",
            "newOwner()": "2425",
            "owner()": "2437",
            "ownerOf(uint256)": "2523",
            "pause()": "29828",
            "paused()": "2404",
            "pullOwner()": "28199",
            "pushOwner(address)": "28007",
            "revokeMinterRole(address)": "30178",
            "safeBatchTransferFrom(address,address,uint256[])": "infinite",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "26652",
            "setBaseUri(string)": "infinite",
            "supportsInterface(bytes4)": "557",
            "symbol()": "infinite",
            "tokenURI(uint256)": "infinite",
            "totalSupply()": "2371",
            "transferFrom(address,address,uint256)": "infinite",
            "unpause()": "29828"
          },
          "internal": {
            "_mint(address,uint256,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "batchMint(address,uint256[])": "4684d7e9",
          "breeds(uint256)": "2c0209f5",
          "getApproved(uint256)": "081812fc",
          "grantMinterRole(address)": "3dd1eb61",
          "isApprovedForAll(address,address)": "e985e9c5",
          "isMinter(address)": "aa271e1a",
          "mint(address,uint256)": "40c10f19",
          "name()": "06fdde03",
          "newOwner()": "d4ee1d90",
          "owner()": "8da5cb5b",
          "ownerOf(uint256)": "6352211e",
          "pause()": "8456cb59",
          "paused()": "5c975abb",
          "pullOwner()": "6cef16e6",
          "pushOwner(address)": "ac5a7d5c",
          "revokeMinterRole(address)": "69e2f0fb",
          "safeBatchTransferFrom(address,address,uint256[])": "034601ec",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "setBaseUri(string)": "a0bcfc7f",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenURI(uint256)": "c87b56dd",
          "totalSupply()": "18160ddd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "unpause()": "3f4ba83a"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roosterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"breed\",\"type\":\"uint256\"}],\"name\":\"BreedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pushedOwner\",\"type\":\"address\"}],\"name\":\"OwnerPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"UpdateBaseUri\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"breeds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roosterId\",\"type\":\"uint256\"}],\"name\":\"breeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"breed\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pushOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roosterId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rooster.sol\":\"Rooster\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract AccessControl is Pausable {\\n  //Address of current owner\\n  address public owner;\\n  //Address of new owner (Note: new owner must pull to be an owner)\\n  address public newOwner;\\n  //Maps if user has minter role\\n  mapping(address => bool) public isMinter;\\n\\n  //Fires when new owner is pushed\\n  event OwnerPushed(address indexed pushedOwner);\\n  //Fires when new owner pulled\\n  event OwnerPulled(address indexed previousOwner, address indexed newOwner);\\n  //Fires when minter role is granted\\n  event MinterRoleGranted(address indexed account);\\n  //Fires when minter role is revoked\\n  event MinterRoleRevoked(address indexed account);\\n\\n  constructor() {\\n    owner = msg.sender;\\n    emit OwnerPulled(msg.sender, address(0));\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyMinter() {\\n    require(isMinter[msg.sender], \\\"Only minter\\\");\\n    _;\\n  }\\n\\n  function pushOwner(address account) public onlyOwner {\\n    require(account != address(0), \\\"No address(0)\\\");\\n    newOwner = account;\\n    emit OwnerPushed(account);\\n  }\\n\\n  function pullOwner() external {\\n    require(msg.sender == newOwner, \\\"Only new owner\\\");\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    emit OwnerPulled(oldOwner, msg.sender);\\n  }\\n\\n  function grantMinterRole(address account) external onlyOwner {\\n    require(account != address(0), \\\"No address(0)\\\");\\n    require(!isMinter[account], \\\"Already granted\\\");\\n    isMinter[account] = true;\\n    emit MinterRoleGranted(account);\\n  }\\n\\n  function revokeMinterRole(address account) external onlyOwner {\\n    require(isMinter[account], \\\"Not granted\\\");\\n    isMinter[account] = false;\\n    emit MinterRoleRevoked(account);\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0x950a25e8ab43339c7f5e8fc55d80466264b2698d084c56c877868977440bf9d6\",\"license\":\"MIT\"},\"contracts/Rooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"./RoosterMetadata.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract Rooster is ERC721, AccessControl, RoosterMetadata {\\n  //Current roosterId count\\n  uint256 private _roosterIdCounter = 0;\\n\\n  constructor(string memory baseUri_) ERC721(\\\"Rooster\\\", \\\"ROOSTER\\\") {\\n    setBaseUri(baseUri_);\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return _roosterIdCounter;\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory roosterIds\\n  ) external {\\n    for (uint256 i = 0; i < roosterIds.length; ) {\\n      safeTransferFrom(from, to, roosterIds[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function mint(address to, uint256 breed) external onlyMinter {\\n    uint256 roosterId = _roosterIdCounter;\\n\\n    unchecked {\\n      _roosterIdCounter++;\\n    }\\n\\n    _mint(to, roosterId, breed);\\n  }\\n\\n  function batchMint(address to, uint256[] memory breeds) external onlyMinter {\\n    uint256 roosterId = _roosterIdCounter;\\n\\n    for (uint256 i = 0; i < breeds.length; ) {\\n      _mint(to, roosterId, breeds[i]);\\n\\n      unchecked {\\n        roosterId++;\\n        i++;\\n      }\\n    }\\n\\n    _roosterIdCounter = roosterId;\\n  }\\n\\n  function _mint(\\n    address to,\\n    uint256 roosterId,\\n    uint256 breed\\n  ) private {\\n    _safeMint(to, roosterId);\\n    _setBreed(roosterId, breed);\\n  }\\n}\\n\",\"keccak256\":\"0x700199574394d1f53ad0e4fffe8f0c1cbf08cbaa9abb53f60e98a89a44c29da3\",\"license\":\"MIT\"},\"contracts/RoosterMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract RoosterMetadata is ERC721, AccessControl {\\n  using Strings for uint256;\\n\\n  //Rooster metadata base uri\\n  string private _baseUri;\\n  //Maps rooster id to breed\\n  mapping(uint256 => uint256) private _breeds;\\n\\n  //Fires when base uri is updated\\n  event UpdateBaseUri(string baseUri);\\n  //Fires when breed is set\\n  event BreedSet(uint256 indexed roosterId, uint256 breed);\\n\\n  function breeds(uint256 roosterId) public view returns (uint256) {\\n    require(_exists(roosterId), \\\"Query for nonexistent rooster\\\");\\n    return _breeds[roosterId];\\n  }\\n\\n  function tokenURI(uint256 roosterId) public view override returns (string memory) {\\n    require(_exists(roosterId), \\\"Query for nonexistent rooster\\\");\\n    return string(abi.encodePacked(_baseUri, roosterId.toString()));\\n  }\\n\\n  function setBaseUri(string memory newUri) public onlyOwner {\\n    _baseUri = newUri;\\n    emit UpdateBaseUri(newUri);\\n  }\\n\\n  function _setBreed(uint256 roosterId, uint256 breed) internal {\\n    _breeds[roosterId] = breed;\\n    emit BreedSet(roosterId, breed);\\n  }\\n\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return ownerOf[tokenId] != address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xb6437089fcfa0ab98eae8627758a25efb4f9b6ea7cdc7103d6de4bedaeb340f0\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 4541,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4543,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4554,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "balanceOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4558,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "ownerOf",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4562,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "getApproved",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 4568,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "isApprovedForAll",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 122,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "_paused",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 5036,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "owner",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5038,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "newOwner",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 5042,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "isMinter",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7522,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "_baseUri",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 7526,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "_breeds",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7362,
            "contract": "contracts/Rooster.sol:Rooster",
            "label": "_roosterIdCounter",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract AccessControl is Pausable {\\n  //Address of current owner\\n  address public owner;\\n  //Address of new owner (Note: new owner must pull to be an owner)\\n  address public newOwner;\\n  //Maps if user has minter role\\n  mapping(address => bool) public isMinter;\\n\\n  //Fires when new owner is pushed\\n  event OwnerPushed(address indexed pushedOwner);\\n  //Fires when new owner pulled\\n  event OwnerPulled(address indexed previousOwner, address indexed newOwner);\\n  //Fires when minter role is granted\\n  event MinterRoleGranted(address indexed account);\\n  //Fires when minter role is revoked\\n  event MinterRoleRevoked(address indexed account);\\n\\n  constructor() {\\n    owner = msg.sender;\\n    emit OwnerPulled(msg.sender, address(0));\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyMinter() {\\n    require(isMinter[msg.sender], \\\"Only minter\\\");\\n    _;\\n  }\\n\\n  function pushOwner(address account) public onlyOwner {\\n    require(account != address(0), \\\"No address(0)\\\");\\n    newOwner = account;\\n    emit OwnerPushed(account);\\n  }\\n\\n  function pullOwner() external {\\n    require(msg.sender == newOwner, \\\"Only new owner\\\");\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    emit OwnerPulled(oldOwner, msg.sender);\\n  }\\n\\n  function grantMinterRole(address account) external onlyOwner {\\n    require(account != address(0), \\\"No address(0)\\\");\\n    require(!isMinter[account], \\\"Already granted\\\");\\n    isMinter[account] = true;\\n    emit MinterRoleGranted(account);\\n  }\\n\\n  function revokeMinterRole(address account) external onlyOwner {\\n    require(isMinter[account], \\\"Not granted\\\");\\n    isMinter[account] = false;\\n    emit MinterRoleRevoked(account);\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/RoosterMetadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract RoosterMetadata is ERC721, AccessControl {\\n  using Strings for uint256;\\n\\n  //Rooster metadata base uri\\n  string private _baseUri;\\n  //Maps rooster id to breed\\n  mapping(uint256 => uint256) private _breeds;\\n\\n  //Fires when base uri is updated\\n  event UpdateBaseUri(string baseUri);\\n  //Fires when breed is set\\n  event BreedSet(uint256 indexed roosterId, uint256 breed);\\n\\n  function breeds(uint256 roosterId) public view returns (uint256) {\\n    require(_exists(roosterId), \\\"Query for nonexistent rooster\\\");\\n    return _breeds[roosterId];\\n  }\\n\\n  function tokenURI(uint256 roosterId) public view override returns (string memory) {\\n    require(_exists(roosterId), \\\"Query for nonexistent rooster\\\");\\n    return string(abi.encodePacked(_baseUri, roosterId.toString()));\\n  }\\n\\n  function setBaseUri(string memory newUri) public onlyOwner {\\n    _baseUri = newUri;\\n    emit UpdateBaseUri(newUri);\\n  }\\n\\n  function _setBreed(uint256 roosterId, uint256 breed) internal {\\n    _breeds[roosterId] = breed;\\n    emit BreedSet(roosterId, breed);\\n  }\\n\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return ownerOf[tokenId] != address(0);\\n  }\\n}\\n\"\n    },\n    \"@rari-capital/solmate/src/tokens/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"contracts/GemMetadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract GemMetadata is ERC721, AccessControl {\\n  using Strings for uint256;\\n\\n  //Gem metadata base uri\\n  string private _baseUri;\\n  //Maps gem id to gem types\\n  mapping(uint256 => uint256) private _gemTypes;\\n\\n  //Fires when base uri is updated\\n  event UpdateBaseUri(string baseUri);\\n  //Fires when gem type is set\\n  event GemTypeSet(uint256 indexed gemId, uint256 gemType);\\n\\n  function gemTypes(uint256 gemId) public view returns (uint256) {\\n    require(_exists(gemId), \\\"Query for nonexistent gem\\\");\\n    return _gemTypes[gemId];\\n  }\\n\\n  function tokenURI(uint256 gemId) public view override returns (string memory) {\\n    require(_exists(gemId), \\\"Query for nonexistent gem\\\");\\n    return string(abi.encodePacked(_baseUri, gemId.toString()));\\n  }\\n\\n  function setBaseUri(string memory newUri) public onlyOwner {\\n    _baseUri = newUri;\\n    emit UpdateBaseUri(newUri);\\n  }\\n\\n  function _setGemType(uint256 gemId, uint256 gemType) internal {\\n    _gemTypes[gemId] = gemType;\\n    emit GemTypeSet(gemId, gemType);\\n  }\\n\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return ownerOf[tokenId] != address(0);\\n  }\\n}\\n\"\n    },\n    \"contracts/Rooster.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"./RoosterMetadata.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract Rooster is ERC721, AccessControl, RoosterMetadata {\\n  //Current roosterId count\\n  uint256 private _roosterIdCounter = 0;\\n\\n  constructor(string memory baseUri_) ERC721(\\\"Rooster\\\", \\\"ROOSTER\\\") {\\n    setBaseUri(baseUri_);\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return _roosterIdCounter;\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory roosterIds\\n  ) external {\\n    for (uint256 i = 0; i < roosterIds.length; ) {\\n      safeTransferFrom(from, to, roosterIds[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function mint(address to, uint256 breed) external onlyMinter {\\n    uint256 roosterId = _roosterIdCounter;\\n\\n    unchecked {\\n      _roosterIdCounter++;\\n    }\\n\\n    _mint(to, roosterId, breed);\\n  }\\n\\n  function batchMint(address to, uint256[] memory breeds) external onlyMinter {\\n    uint256 roosterId = _roosterIdCounter;\\n\\n    for (uint256 i = 0; i < breeds.length; ) {\\n      _mint(to, roosterId, breeds[i]);\\n\\n      unchecked {\\n        roosterId++;\\n        i++;\\n      }\\n    }\\n\\n    _roosterIdCounter = roosterId;\\n  }\\n\\n  function _mint(\\n    address to,\\n    uint256 roosterId,\\n    uint256 breed\\n  ) private {\\n    _safeMint(to, roosterId);\\n    _setBreed(roosterId, breed);\\n  }\\n}\\n\"\n    },\n    \"contracts/Gem.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"./GemMetadata.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract Gem is ERC721, AccessControl, GemMetadata {\\n  //Current gemId count\\n  uint256 private _gemIdCounter = 0;\\n\\n  constructor(string memory baseUri_) ERC721(\\\"Gem\\\", \\\"GEM\\\") {\\n    setBaseUri(baseUri_);\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return _gemIdCounter;\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory gemIds\\n  ) external {\\n    for (uint256 i = 0; i < gemIds.length; ) {\\n      safeTransferFrom(from, to, gemIds[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function mint(address to, uint256 gemType) external onlyMinter {\\n    uint256 gemId = _gemIdCounter;\\n\\n    unchecked {\\n      _gemIdCounter++;\\n    }\\n\\n    _mint(to, gemId, gemType);\\n  }\\n\\n  function batchMint(address to, uint256[] memory gemTypes) external onlyMinter {\\n    uint256 gemId = _gemIdCounter;\\n\\n    for (uint256 i = 0; i < gemTypes.length; ) {\\n      _mint(to, gemId, gemTypes[i]);\\n\\n      unchecked {\\n        gemId++;\\n        i++;\\n      }\\n    }\\n\\n    _gemIdCounter = gemId;\\n  }\\n\\n  function _mint(\\n    address to,\\n    uint256 gemId,\\n    uint256 gemType\\n  ) private {\\n    _safeMint(to, gemId);\\n    _setGemType(gemId, gemType);\\n  }\\n}\\n\"\n    },\n    \"contracts/GaffMetadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\nabstract contract GaffMetadata is ERC721, AccessControl {\\n  using Strings for uint256;\\n\\n  //Gaff metadata base uri\\n  string private _baseUri;\\n  //Maps gaff id to gaff types\\n  mapping(uint256 => uint256) private _gaffTypes;\\n\\n  //Fires when base uri is updated\\n  event UpdateBaseUri(string baseUri);\\n  //Fires when gaff type is set\\n  event GaffTypeSet(uint256 indexed gaffId, uint256 gaffType);\\n\\n  function gaffTypes(uint256 gaffId) public view returns (uint256) {\\n    require(_exists(gaffId), \\\"Query for nonexistent gaff\\\");\\n    return _gaffTypes[gaffId];\\n  }\\n\\n  function tokenURI(uint256 gaffId) public view override returns (string memory) {\\n    require(_exists(gaffId), \\\"Query for nonexistent gaff\\\");\\n    return string(abi.encodePacked(_baseUri, gaffId.toString()));\\n  }\\n\\n  function setBaseUri(string memory newUri) public onlyOwner {\\n    _baseUri = newUri;\\n    emit UpdateBaseUri(newUri);\\n  }\\n\\n  function _setGaffType(uint256 gaffId, uint256 gaffType) internal {\\n    _gaffTypes[gaffId] = gaffType;\\n    emit GaffTypeSet(gaffId, gaffType);\\n  }\\n\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return ownerOf[tokenId] != address(0);\\n  }\\n}\\n\"\n    },\n    \"contracts/Gaff.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721} from \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"./GaffMetadata.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract Gaff is ERC721, AccessControl, GaffMetadata {\\n  //Current gaffId count\\n  uint256 private _gaffIdCounter = 0;\\n\\n  constructor(string memory baseUri_) ERC721(\\\"Gaff\\\", \\\"GAFF\\\") {\\n    setBaseUri(baseUri_);\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return _gaffIdCounter;\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory gaffIds\\n  ) external {\\n    for (uint256 i = 0; i < gaffIds.length; ) {\\n      safeTransferFrom(from, to, gaffIds[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function mint(address to, uint256 gaffType) external onlyMinter {\\n    uint256 gaffId = _gaffIdCounter;\\n\\n    unchecked {\\n      _gaffIdCounter++;\\n    }\\n\\n    _mint(to, gaffId, gaffType);\\n  }\\n\\n  function batchMint(address to, uint256[] memory gaffTypes) external onlyMinter {\\n    uint256 gaffId = _gaffIdCounter;\\n\\n    for (uint256 i = 0; i < gaffTypes.length; ) {\\n      _mint(to, gaffId, gaffTypes[i]);\\n\\n      unchecked {\\n        gaffId++;\\n        i++;\\n      }\\n    }\\n\\n    _gaffIdCounter = gaffId;\\n  }\\n\\n  function _mint(\\n    address to,\\n    uint256 gaffId,\\n    uint256 gaffType\\n  ) private {\\n    _safeMint(to, gaffId);\\n    _setGaffType(gaffId, gaffType);\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\n    },\n    \"contracts/old/OldRooster.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RoosterOld is ERC1155Burnable, Pausable, Ownable {\\n  mapping(address => bool) public isOperator;\\n  mapping(uint256 => BaseStats) public baseStats;\\n\\n  event UpdateOperator(address user, bool isOperator);\\n\\n  struct BaseStats {\\n    uint32 VIT;\\n    uint32 WATK;\\n    uint32 BATK;\\n    uint32 CATK;\\n    uint32 SPD;\\n    uint32 AGRO;\\n  }\\n\\n  constructor() ERC1155(\\\"Rooster\\\") {\\n    isOperator[msg.sender] = true;\\n  }\\n\\n  modifier onlyOperator() {\\n    require(isOperator[_msgSender()], \\\"Invalid access\\\");\\n    _;\\n  }\\n\\n  function mint(\\n    address account,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public onlyOperator {\\n    _mint(account, id, amount, data);\\n  }\\n\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public onlyOperator {\\n    _mintBatch(to, ids, amounts, data);\\n  }\\n\\n  /* Admin settings  */\\n  function setOperator(address user, bool isOperator_) external onlyOwner {\\n    isOperator[user] = isOperator_;\\n    emit UpdateOperator(user, isOperator_);\\n  }\\n\\n  function setURI(string memory newuri) public onlyOperator {\\n    _setURI(newuri);\\n  }\\n\\n  function setBaseStats(uint256 id, BaseStats memory newStats) external onlyOperator {\\n    baseStats[id] = newStats;\\n  }\\n\\n  function pause() public onlyOperator {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOperator {\\n    _unpause();\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal override whenNotPaused {\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC1155) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"contracts/EggHatching.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ninterface IEgg {\\n  function burnBatch(uint24[] memory eggIds) external;\\n\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\ninterface INft {\\n  function batchMint(address to, uint256[] memory types) external;\\n}\\n\\ncontract RoosterEggHatching is Ownable, Pausable {\\n  //Address of RoosterEgg contract\\n  address public immutable egg;\\n  //Address of Rooster contract\\n  address public immutable rooster;\\n  //Address of Gaff contract\\n  address public immutable gaff;\\n  //Address of Gem contract\\n  address public immutable gem;\\n  //Address of signer\\n  address public signer;\\n\\n  //Fires when eggs are hatched\\n  event EggsHatched(address indexed user, uint24[] eggIds);\\n  //Fires when signer address is updated\\n  event UpdateSigner(address indexed previousSigner, address indexed newSigner);\\n\\n  struct Sig {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n  }\\n\\n  constructor(\\n    address signer_,\\n    address egg_,\\n    address rooster_,\\n    address gaff_,\\n    address gem_\\n  ) {\\n    egg = egg_;\\n    rooster = rooster_;\\n    gaff = gaff_;\\n    gem = gem_;\\n    setSigner(signer_);\\n  }\\n\\n  /**\\n   * @param eggIds Array of rooster egg ids to burn\\n   * @param breeds Array of rooster breeds to mint\\n   * @param gaffTypes Array of gaff amounts to mint (Index number corresponds to gaff id)\\n   * @param gemTypes Array of gem ids to mint\\n   */\\n  function hatch(\\n    address to,\\n    uint24[] calldata eggIds,\\n    uint256[] calldata breeds,\\n    uint256[] calldata gaffTypes,\\n    uint256[] calldata gemTypes,\\n    Sig calldata sig\\n  ) external whenNotPaused {\\n    //Check if parameters are valid\\n    require(_isParamValid(breeds, gaffTypes, gemTypes, sig), \\\"Invalid parameter\\\");\\n    //Check if egg owner\\n    require(_isOwnerCorrect(eggIds), \\\"Invalid owner\\\");\\n\\n    //Burn eggs\\n    IEgg(egg).burnBatch(eggIds);\\n    //Mint roosters\\n    INft(rooster).batchMint(to, breeds);\\n    //Mint gaffs\\n    INft(gaff).batchMint(to, gaffTypes);\\n    //Mint gems\\n    INft(gem).batchMint(to, gemTypes);\\n\\n    emit EggsHatched(msg.sender, eggIds);\\n  }\\n\\n  function _isParamValid(\\n    uint256[] calldata breeds,\\n    uint256[] calldata gaffTypes,\\n    uint256[] calldata gemTypes,\\n    Sig calldata sig\\n  ) private view returns (bool) {\\n    bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, breeds, gaffTypes, gemTypes));\\n    bytes32 ethSignedMessageHash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n    );\\n\\n    return ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s) == signer;\\n  }\\n\\n  function _isOwnerCorrect(uint24[] calldata eggIds) private view returns (bool) {\\n    unchecked {\\n      for (uint256 i = 0; i < eggIds.length; i++) {\\n        if (IEgg(egg).ownerOf(eggIds[i]) != msg.sender) {\\n          return false;\\n        }\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function setSigner(address newSigner) public onlyOwner {\\n    require(newSigner != address(0), \\\"No address(0)\\\");\\n    address oldSigner = signer;\\n    signer = newSigner;\\n    emit UpdateSigner(oldSigner, newSigner);\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\"\n    },\n    \"contracts/Egg.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n\\n//solhint-disable avoid-low-level-calls\\ncontract RoosterEgg is ERC721, ERC721Burnable, Ownable, Pausable {\\n  using Strings for uint256;\\n\\n  // Presale time in UNIX\\n  uint32 public openingTime;\\n  uint32 public closingTime;\\n\\n  //Max supply for round\\n  uint24 public supply;\\n\\n  //Tokens sold for round\\n  uint24 public sold;\\n\\n  //Indivisual cap for round\\n  uint24 public cap;\\n\\n  //Current tokenID count\\n  uint24 private _tokenIdCounter;\\n\\n  //The price per egg (1egg = ? wei)\\n  uint256 public price;\\n\\n  //Matic cashback per egg\\n  uint256 public cashbackPerEgg;\\n\\n  //USDC address\\n  IERC20 public immutable usdc;\\n\\n  // Vault wallet address\\n  address public immutable wallet;\\n\\n  //Base URI\\n  string public baseURI;\\n\\n  //user => amount\\n  mapping(address => uint8) public purchasedAmount;\\n\\n  event Purchase(address indexed purchaser, uint8 amount, uint256 value);\\n  event NewPresale(\\n    uint24 supply,\\n    uint24 cap,\\n    uint32 openingTime,\\n    uint32 closingTime,\\n    uint256 price,\\n    uint256 cashbackPerEgg\\n  );\\n  event MaticReceived(address user, uint256 amount);\\n  event MaticWithdrawn(uint256 amount);\\n  event MaticCashback(address user, uint256 amount);\\n  event MaticCashbackFailed(address indexed user, uint256 balance);\\n\\n  constructor(\\n    IERC20 usdc_,\\n    address wallet_,\\n    uint24 inititalTokenId_,\\n    string memory baseURI_\\n  ) ERC721(\\\"RoosterEgg\\\", \\\"ROOSTER_EGG\\\") {\\n    usdc = usdc_;\\n    wallet = wallet_;\\n    baseURI = baseURI_;\\n    _tokenIdCounter = inititalTokenId_;\\n  }\\n\\n  receive() external payable {\\n    emit MaticReceived(msg.sender, msg.value);\\n  }\\n\\n  function isOpen() public view returns (bool) {\\n    return block.timestamp >= openingTime && block.timestamp <= closingTime;\\n  }\\n\\n  function getTime() external view returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(bytes(baseURI).length > 0, \\\"BaseURI not set\\\");\\n    require(_exists(tokenId), \\\"Query for nonexistent token\\\");\\n    return string(abi.encodePacked(baseURI, tokenId.toString()));\\n  }\\n\\n  function _baseURI() internal view override returns (string memory) {\\n    return baseURI;\\n  }\\n\\n  function buyEggs(uint8 amount) external {\\n    address purchaser = _msgSender();\\n    uint256 value = price * amount;\\n    uint256 cashbackAmount = cashbackPerEgg * amount;\\n\\n    //Checks\\n    _preValidatePurchase(purchaser, amount);\\n\\n    //Effects\\n    sold += amount;\\n    purchasedAmount[purchaser] += amount;\\n\\n    //Interactions\\n    usdc.transferFrom(purchaser, wallet, value);\\n    _mintEggs(purchaser, amount);\\n\\n    (bool success, ) = payable(purchaser).call{value: cashbackAmount}(\\\"\\\");\\n    if (success) {\\n      emit MaticCashback(purchaser, cashbackAmount);\\n    } else {\\n      emit MaticCashbackFailed(purchaser, address(this).balance);\\n    }\\n\\n    emit Purchase(purchaser, amount, value);\\n  }\\n\\n  function burnBatch(uint24[] calldata tokenIds) external {\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      burn(tokenIds[i]);\\n    }\\n  }\\n\\n  function _preValidatePurchase(address purchaser, uint8 amount) private view whenNotPaused {\\n    require(isOpen(), \\\"Not open\\\");\\n    require(sold + amount <= supply, \\\"Exceeds supply\\\");\\n    require(amount + purchasedAmount[purchaser] <= cap, \\\"Exceeds cap\\\");\\n  }\\n\\n  function _mintEggs(address to, uint256 amount) private {\\n    uint24 newtokenId = _tokenIdCounter;\\n\\n    for (uint256 i = 0; i < amount; i++) {\\n      _safeMint(to, newtokenId++);\\n    }\\n\\n    _tokenIdCounter = newtokenId;\\n  }\\n\\n  /* Only owner functions */\\n\\n  function setPresale(\\n    uint32 openingTime_,\\n    uint32 closingTime_,\\n    uint24 supply_,\\n    uint24 cap_,\\n    uint256 price_,\\n    uint256 cashbackPerEgg_\\n  ) external onlyOwner {\\n    require(!isOpen() || paused(), \\\"Cannot set now\\\");\\n    if (!isOpen()) {\\n      require(closingTime_ >= openingTime_, \\\"Closing time < Opening time\\\");\\n      require(openingTime_ > block.timestamp, \\\"Invalid opening time\\\");\\n      openingTime = openingTime_;\\n    }\\n\\n    supply = supply_;\\n    cap = cap_;\\n    price = price_;\\n    closingTime = closingTime_;\\n    cashbackPerEgg = cashbackPerEgg_;\\n\\n    emit NewPresale(supply_, cap_, openingTime_, closingTime_, price_, cashbackPerEgg_);\\n  }\\n\\n  function mintEggs(address to, uint256 amount) external onlyOwner {\\n    _mintEggs(to, amount);\\n  }\\n\\n  function setBaseURI(string memory baseURI_) external onlyOwner {\\n    baseURI = baseURI_;\\n  }\\n\\n  function withdrawMatic(uint256 amount) external {\\n    address user = msg.sender;\\n    require(user == owner() || user == wallet, \\\"Invalid access\\\");\\n    (bool success, ) = payable(wallet).call{value: amount}(\\\"\\\");\\n    require(success, \\\"Withdraw failed\\\");\\n    emit MaticWithdrawn(amount);\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"contracts/mocks/Usdc.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockUsdc is ERC20 {\\n  constructor() ERC20(\\\"USD Coin\\\", \\\"USDC\\\") {\\n    _mint(msg.sender, 1_000_000e6);\\n  }\\n\\n  function mint(uint256 amount) external {\\n    _mint(msg.sender, amount);\\n  }\\n\\n  function decimals() public pure override returns (uint8) {\\n    return 6;\\n  }\\n}\\n\"\n    },\n    \"contracts/EggSale.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\n\\ninterface Egg {\\n  function mintEggs(address to, uint256 amount) external;\\n  function setBaseURI(string memory baseURI_) external;\\n  function purchasedAmount(address user) external view returns (uint8);\\n}\\n\\n//solhint-disable avoid-low-level-calls\\ncontract RoosterEggSale is AccessControl {\\n  //Presale struct\\n  Presale public presale;\\n\\n  //RoosterEgg address\\n  Egg public immutable egg;\\n\\n  //USDC address\\n  IERC20 public immutable usdc;\\n\\n  //Vault address\\n  address public immutable vault;\\n\\n  //Whitelist verification signer address\\n  address public immutable signer;\\n\\n  //Total minted\\n  uint256 public minted;\\n\\n  //Max supply of eggs\\n  uint256 public constant maxSupply = 150_000;\\n\\n  //User egg purchased amount (user => amount)\\n  mapping(address => uint256) public purchasedAmount;\\n  //Check if nonce is used (nonce => boolean)\\n  mapping(bytes32 => bool) private _nonceUsed;\\n\\n  event Purchase(address indexed purchaser, uint256 amount, uint256 value);\\n  event NewPresale(\\n    uint256 supply,\\n    uint256 cap,\\n    uint256 openingTime,\\n    uint256 closingTime,\\n    bool whitelist,\\n    uint256 price,\\n    uint256 cashback\\n  );\\n  event MaticCashback(address user, uint256 amount);\\n  event MaticCashbackFailed(address indexed user, uint256 balance);\\n\\n  struct Presale {\\n    uint32 supply;\\n    uint32 cap;\\n    uint32 sold;\\n    uint32 openingTime;\\n    uint32 closingTime;\\n    bool whitelist;\\n    uint256 price;\\n    uint256 cashback;\\n  }\\n\\n  struct Sig {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n  }\\n\\n  constructor(\\n    address usdc_,\\n    address egg_,\\n    address vault_,\\n    address signer_,\\n    uint256 minted_\\n  ) {\\n    usdc = IERC20(usdc_);\\n    egg = Egg(egg_);\\n    vault = vault_;\\n    signer = signer_;\\n    minted = minted_;\\n  }\\n\\n  receive() external payable {}\\n\\n  function isOpen() public view returns (bool) {\\n    return block.timestamp >= presale.openingTime && block.timestamp < presale.closingTime;\\n  }\\n\\n  function getTime() external view returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function buyEggs(\\n    uint8 amount,\\n    bytes32 nonce,\\n    Sig calldata sig\\n  ) external whenNotPaused {\\n    address purchaser = msg.sender;\\n    uint256 value = presale.price * amount;\\n    uint256 cashbackAmount = presale.cashback * amount;\\n\\n    //Basic chekcs\\n    require(isOpen(), \\\"Not open\\\");\\n    require(minted + amount <= maxSupply, \\\"Exceeds max supply\\\");\\n    require(presale.sold + amount <= presale.supply, \\\"Exceeds supply\\\");\\n    require(\\n      purchasedAmount[purchaser] + egg.purchasedAmount(purchaser) + amount <= presale.cap,\\n      \\\"Exceeds cap\\\"\\n    );\\n\\n    //Whitelist check\\n    if (presale.whitelist) {\\n      require(_nonceUsed[nonce], \\\"Nonce used\\\");\\n      require(_isWhitelisted(purchaser, nonce, sig), \\\"Not whitelisted\\\");\\n      _nonceUsed[nonce] = true;\\n    }\\n\\n    //Effects\\n    unchecked {\\n      minted += amount;\\n      presale.sold += amount;\\n      purchasedAmount[purchaser] += amount;\\n    }\\n\\n    //Interactions\\n    usdc.transferFrom(purchaser, vault, value);\\n\\n    egg.mintEggs(purchaser, amount);\\n\\n    if (cashbackAmount > 0) {\\n      (bool success, ) = payable(purchaser).call{value: cashbackAmount}(\\\"\\\");\\n      if (success) {\\n        emit MaticCashback(purchaser, cashbackAmount);\\n      } else {\\n        emit MaticCashbackFailed(purchaser, address(this).balance);\\n      }\\n    }\\n\\n    emit Purchase(purchaser, amount, value);\\n  }\\n\\n  function _isWhitelisted(\\n    address user,\\n    bytes32 nonce,\\n    Sig calldata sig\\n  ) private view returns (bool) {\\n    bytes32 messageHash = keccak256(abi.encodePacked(user, nonce));\\n    bytes32 ethSignedMessageHash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n    );\\n\\n    return ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s) == signer;\\n  }\\n\\n  /* Only owner functions */\\n\\n  function setPresale(\\n    uint32 openingTime,\\n    uint32 closingTime,\\n    uint32 supply,\\n    uint32 cap,\\n    bool whitelist,\\n    uint256 price,\\n    uint256 cashback\\n  ) external onlyOwner {\\n    require(closingTime >= openingTime, \\\"Closing time < Opening time\\\");\\n\\n    if (!isOpen()) {\\n      require(openingTime > block.timestamp, \\\"Invalid opening time\\\");\\n      presale.openingTime = openingTime;\\n    }\\n\\n    presale.closingTime = closingTime;\\n    presale.supply = supply;\\n    presale.cap = cap;\\n    presale.whitelist = whitelist;\\n    presale.price = price;\\n    presale.cashback = cashback;\\n\\n    emit NewPresale(supply, cap, openingTime, closingTime, whitelist, price, cashback);\\n  }\\n\\n  function mintEggs(address to, uint256 amount) external onlyMinter {\\n    require(minted + amount <= maxSupply, \\\"Exceeds max supply\\\");\\n    unchecked {\\n      minted += amount;\\n    }\\n    egg.mintEggs(to, amount);\\n  }\\n\\n  function setBaseURI(string memory baseURI_) external onlyOwner {\\n    egg.setBaseURI(baseURI_);\\n  }\\n\\n  function withdrawMatic(uint256 amount) external onlyOwner {\\n    (bool success, ) = payable(vault).call{value: amount}(\\\"\\\");\\n    require(success, \\\"Withdraw failed\\\");\\n  }\\n}\\n\"\n    },\n    \"contracts/GameItem.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC1155.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract GameItem is ERC1155, AccessControl {\\n  //Base Uri of gem metadata\\n  string private _uri;\\n\\n  //Fires when base uri is updated\\n  event UpdateUri(string uri);\\n\\n  constructor(string memory uri_) {\\n    setUri(uri_);\\n  }\\n\\n  function uri(uint256) public view override returns (string memory) {\\n    return _uri;\\n  }\\n\\n  function mint(\\n    address to,\\n    uint256 gameItemId,\\n    uint256 amount\\n  ) external onlyMinter {\\n    _mint(to, gameItemId, amount, \\\"\\\");\\n  }\\n\\n  function batchMint(\\n    address to,\\n    uint256[] memory gameItemIds,\\n    uint256[] memory amounts\\n  ) external onlyMinter {\\n    _batchMint(to, gameItemIds, amounts, \\\"\\\");\\n  }\\n\\n  function setUri(string memory newUri) public onlyOwner {\\n    _uri = newUri;\\n    emit UpdateUri(newUri);\\n  }\\n}\\n\"\n    },\n    \"@rari-capital/solmate/src/tokens/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        uint256 ownersLength = owners.length; // Saves MLOADs.\\n\\n        require(ownersLength == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < ownersLength; i++) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\ninterface ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    },\n    \"libraries\": {\n      \"\": {\n        \"__CACHE_BREAKER__\": \"0x00000000d41867734bbee4c6863d9255b2b06ac1\"\n      }\n    }\n  }\n}",
      "solcInputHash": "098ca35b27a7f562232c87be6222f611",
      "transactionHash": "0x989e45fd82f7955ced3ad2c0156714f5a55517657ac6433326bb36214ad97714",
      "args": [
        ""
      ]
    },
    "decoded": {
      "from": "0x374180e6E1b14454C18e44b635A95e7d37160570",
      "gasPrice": "2500000092",
      "maxFeePerGas": "2500000092",
      "maxPriorityFeePerGas": "2500000000",
      "gasLimit": "1718763",
      "to": null,
      "value": "0",
      "nonce": 614,
      "data": "0x60806040526000600b553480156200001657600080fd5b506040516200204e3803806200204e833981016040819052620000399162000295565b604051806040016040528060078152602001662937b7b9ba32b960c91b815250604051806040016040528060078152602001662927a7a9aa22a960c91b815250816000908051906020019062000091929190620001a6565b508051620000a7906001906020840190620001a6565b5050600680546001600160a81b0319166101003390810291909117909155604051600092507faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c73908390a3620000fc8162000103565b50620003bf565b60065461010090046001600160a01b03163314620001545760405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015260640160405180910390fd5b805162000169906009906020840190620001a6565b507f157eb1fffc1000c7f0ee8cb1f87be2620ec910b8be9e3af7db8c97328e2757cf816040516200019b91906200034d565b60405180910390a150565b828054620001b49062000382565b90600052602060002090601f016020900481019282620001d8576000855562000223565b82601f10620001f357805160ff191683800117855562000223565b8280016001018555821562000223579182015b828111156200022357825182559160200191906001019062000206565b506200023192915062000235565b5090565b5b8082111562000231576000815560010162000236565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200027f57818101518382015260200162000265565b838111156200028f576000848401525b50505050565b600060208284031215620002a857600080fd5b81516001600160401b0380821115620002c057600080fd5b818401915084601f830112620002d557600080fd5b815181811115620002ea57620002ea6200024c565b604051601f8201601f19908116603f011681019083821181831017156200031557620003156200024c565b816040528281528760208487010111156200032f57600080fd5b6200034283602083016020880162000262565b979650505050505050565b60208152600082518060208401526200036e81604085016020870162000262565b601f01601f19169190910160400192915050565b600181811c908216806200039757607f821691505b60208210811415620003b957634e487b7160e01b600052602260045260246000fd5b50919050565b611c7f80620003cf6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063a0bcfc7f116100a2578063b88d4fde11610071578063b88d4fde146103f9578063c87b56dd1461040c578063d4ee1d901461041f578063e985e9c51461043257600080fd5b8063a0bcfc7f1461039d578063a22cb465146103b0578063aa271e1a146103c3578063ac5a7d5c146103e657600080fd5b806370a08231116100de57806370a08231146103555780638456cb59146103755780638da5cb5b1461037d57806395d89b411461039557600080fd5b80636352211e1461031157806369e2f0fb1461033a5780636cef16e61461034d57600080fd5b80632c0209f51161017157806340c10f191161014b57806340c10f19146102cd57806342842e0e146102e05780634684d7e9146102f35780635c975abb1461030657600080fd5b80632c0209f51461029f5780633dd1eb61146102b25780633f4ba83a146102c557600080fd5b8063081812fc116101ad578063081812fc14610226578063095ea7b31461026757806318160ddd1461027a57806323b872dd1461028c57600080fd5b806301ffc9a7146101d4578063034601ec146101fc57806306fdde0314610211575b600080fd5b6101e76101e23660046115ab565b610460565b60405190151581526020015b60405180910390f35b61020f61020a3660046116b2565b6104b2565b005b6102196104f0565b6040516101f39190611768565b61024f61023436600461177b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b61020f610275366004611794565b61057e565b600b545b6040519081526020016101f3565b61020f61029a3660046117be565b610665565b61027e6102ad36600461177b565b61082c565b61020f6102c03660046117fa565b6108a3565b61020f6109bf565b61020f6102db366004611794565b6109f8565b61020f6102ee3660046117be565b610a60565b61020f610301366004611815565b610b3f565b60065460ff166101e7565b61024f61031f36600461177b565b6003602052600090815260409020546001600160a01b031681565b61020f6103483660046117fa565b610bd3565b61020f610ca1565b61027e6103633660046117fa565b60026020526000908152604090205481565b61020f610d46565b60065461024f9061010090046001600160a01b031681565b610219610d7d565b61020f6103ab3660046118bb565b610d8a565b61020f6103be366004611904565b610e07565b6101e76103d13660046117fa565b60086020526000908152604090205460ff1681565b61020f6103f43660046117fa565b610e73565b61020f610407366004611940565b610f32565b61021961041a36600461177b565b610ffd565b60075461024f906001600160a01b031681565b6101e76104403660046119bc565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061049157506380ac58cd60e01b6001600160e01b03198316145b806104ac5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60005b81518110156104ea576104e284848484815181106104d5576104d56119ef565b6020026020010151610a60565b6001016104b5565b50505050565b600080546104fd90611a05565b80601f016020809104026020016040519081016040528092919081815260200182805461052990611a05565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b505050505081565b6000818152600360205260409020546001600160a01b0316338114806105c757506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106095760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600360205260409020546001600160a01b038481169116146106bb5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610600565b6001600160a01b0382166107055760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b336001600160a01b038416148061073257506000818152600460205260409020546001600160a01b031633145b8061076057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b61079d5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610600565b6001600160a01b0380841660008181526002602090815260408083208054600019019055938616808352848320805460010190558583526003825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600360205260408120546001600160a01b03166108905760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b506000908152600a602052604090205490565b60065461010090046001600160a01b031633146108d25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b0381166109185760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b6001600160a01b03811660009081526008602052604090205460ff16156109735760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4819dc985b9d1959608a1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517fbd42b6cd963a984d8cbff85acad4dd2c87a6d85ac756d16e6d2ec5ce6c8f07309190a250565b60065461010090046001600160a01b031633146109ee5760405162461bcd60e51b815260040161060090611a40565b6109f6611096565b565b3360009081526008602052604090205460ff16610a455760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b805460018101909155610a5b838284611129565b505050565b610a6b838383610665565b6001600160a01b0382163b1580610b235750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a401602060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611a64565b6001600160e01b031916145b610a5b5760405162461bcd60e51b815260040161060090611a81565b3360009081526008602052604090205460ff16610b8c5760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b6044820152606401610600565b600b5460005b8251811015610bcb57610bbf8483858481518110610bb257610bb26119ef565b6020026020010151611129565b60019182019101610b92565b50600b555050565b60065461010090046001600160a01b03163314610c025760405162461bcd60e51b815260040161060090611a40565b6001600160a01b03811660009081526008602052604090205460ff16610c585760405162461bcd60e51b815260206004820152600b60248201526a139bdd0819dc985b9d195960aa1b6044820152606401610600565b6001600160a01b038116600081815260086020526040808220805460ff19169055517ff474b72f3e21ebafdad7dadfcb99ae7eabdbf538d52a0e0eecbf8ce0fa7043fe9190a250565b6007546001600160a01b03163314610cec5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c903732bb9037bbb732b960911b6044820152606401610600565b60068054610100600160a81b031981166101003381810292909217909355604051929091046001600160a01b03169182907faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c7390600090a350565b60065461010090046001600160a01b03163314610d755760405162461bcd60e51b815260040161060090611a40565b6109f661113d565b600180546104fd90611a05565b60065461010090046001600160a01b03163314610db95760405162461bcd60e51b815260040161060090611a40565b8051610dcc9060099060208401906114f9565b507f157eb1fffc1000c7f0ee8cb1f87be2620ec910b8be9e3af7db8c97328e2757cf81604051610dfc9190611768565b60405180910390a150565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60065461010090046001600160a01b03163314610ea25760405162461bcd60e51b815260040161060090611a40565b6001600160a01b038116610ee85760405162461bcd60e51b815260206004820152600d60248201526c4e6f206164647265737328302960981b6044820152606401610600565b600780546001600160a01b0319166001600160a01b0383169081179091556040517fd52a054f85e9a057277cd95bf6d5da45465068f0467ec7991f3fcc017be6b72590600090a250565b610f3d848484610665565b6001600160a01b0383163b1580610fe15750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a0290610f83903390899088908890600401611aab565b602060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190611a64565b6001600160e01b031916145b6104ea5760405162461bcd60e51b815260040161060090611a81565b6000818152600360205260409020546060906001600160a01b03166110645760405162461bcd60e51b815260206004820152601d60248201527f517565727920666f72206e6f6e6578697374656e7420726f6f737465720000006044820152606401610600565b600961106f836111b8565b604051602001611080929190611b04565b6040516020818303038152906040529050919050565b60065460ff166110df5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610600565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61113383836112be565b610a5b828261139d565b60065460ff16156111835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610600565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861110c3390565b6060816111dc5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561120657806111f081611bc1565b91506111ff9050600a83611bf2565b91506111e0565b60008167ffffffffffffffff811115611221576112216115eb565b6040519080825280601f01601f19166020018201604052801561124b576020820181803683370190505b5090505b84156112b657611260600183611c06565b915061126d600a86611c1d565b611278906030611c31565b60f81b81838151811061128d5761128d6119ef565b60200101906001600160f81b031916908160001a9053506112af600a86611bf2565b945061124f565b949350505050565b6112c882826113ee565b6001600160a01b0382163b158061137d5750604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a401602060405180830381600087803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190611a64565b6001600160e01b031916145b6113995760405162461bcd60e51b815260040161060090611a81565b5050565b6000828152600a6020526040908190208290555182907fe46d199dd459049fd4c9c752a8b7559ad5dbc0ddb9b399cd9db4636fd5aa8a83906113e29084815260200190565b60405180910390a25050565b6001600160a01b0382166114385760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610600565b6000818152600360205260409020546001600160a01b03161561148e5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610600565b6001600160a01b038216600081815260026020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461150590611a05565b90600052602060002090601f016020900481019282611527576000855561156d565b82601f1061154057805160ff191683800117855561156d565b8280016001018555821561156d579182015b8281111561156d578251825591602001919060010190611552565b5061157992915061157d565b5090565b5b80821115611579576000815560010161157e565b6001600160e01b0319811681146115a857600080fd5b50565b6000602082840312156115bd57600080fd5b81356115c881611592565b9392505050565b80356001600160a01b03811681146115e657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561162a5761162a6115eb565b604052919050565b600082601f83011261164357600080fd5b8135602067ffffffffffffffff82111561165f5761165f6115eb565b8160051b61166e828201611601565b928352848101820192828101908785111561168857600080fd5b83870192505b848310156116a75782358252918301919083019061168e565b979650505050505050565b6000806000606084860312156116c757600080fd5b6116d0846115cf565b92506116de602085016115cf565b9150604084013567ffffffffffffffff8111156116fa57600080fd5b61170686828701611632565b9150509250925092565b60005b8381101561172b578181015183820152602001611713565b838111156104ea5750506000910152565b60008151808452611754816020860160208601611710565b601f01601f19169290920160200192915050565b6020815260006115c8602083018461173c565b60006020828403121561178d57600080fd5b5035919050565b600080604083850312156117a757600080fd5b6117b0836115cf565b946020939093013593505050565b6000806000606084860312156117d357600080fd5b6117dc846115cf565b92506117ea602085016115cf565b9150604084013590509250925092565b60006020828403121561180c57600080fd5b6115c8826115cf565b6000806040838503121561182857600080fd5b611831836115cf565b9150602083013567ffffffffffffffff81111561184d57600080fd5b61185985828601611632565b9150509250929050565b600067ffffffffffffffff83111561187d5761187d6115eb565b611890601f8401601f1916602001611601565b90508281528383830111156118a457600080fd5b828260208301376000602084830101529392505050565b6000602082840312156118cd57600080fd5b813567ffffffffffffffff8111156118e457600080fd5b8201601f810184136118f557600080fd5b6112b684823560208401611863565b6000806040838503121561191757600080fd5b611920836115cf565b91506020830135801515811461193557600080fd5b809150509250929050565b6000806000806080858703121561195657600080fd5b61195f856115cf565b935061196d602086016115cf565b925060408501359150606085013567ffffffffffffffff81111561199057600080fd5b8501601f810187136119a157600080fd5b6119b087823560208401611863565b91505092959194509250565b600080604083850312156119cf57600080fd5b6119d8836115cf565b91506119e6602084016115cf565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611a1957607f821691505b60208210811415611a3a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a908201526927b7363c9037bbb732b960b11b604082015260600190565b600060208284031215611a7657600080fd5b81516115c881611592565b60208082526010908201526f155394d0519157d49150d2541251539560821b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ade9083018461173c565b9695505050505050565b60008151611afa818560208601611710565b9290920192915050565b600080845481600182811c915080831680611b2057607f831692505b6020808410821415611b4057634e487b7160e01b86526022600452602486fd5b818015611b545760018114611b6557611b92565b60ff19861689528489019650611b92565b60008b81526020902060005b86811015611b8a5781548b820152908501908301611b71565b505084890196505b505050505050611ba28185611ae8565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bd557611bd5611bab565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611c0157611c01611bdc565b500490565b600082821015611c1857611c18611bab565b500390565b600082611c2c57611c2c611bdc565b500690565b60008219821115611c4457611c44611bab565b50019056fea2646970667358221220622a4bf4b5069fd86fd0332fdd1434a9e61297949b032236b89c924618ef39f364736f6c6343000809003300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
      "r": "0x968d8b4e532b0e40304298a1d19909d33b244f105bb17e87008da7db51cde484",
      "s": "0x525e5448aa12e17c7bb5b40f6105741a4668793e60b6a6f1dfb7fe9f36b6240b",
      "v": 1,
      "chainId": 4
    }
  }
}