{
  "address": "0xAb162177a144f5df7578abCd455B20d67edCc359",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdc_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rooster_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "scholarship_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPaused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ClaimRefund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "organzier",
          "type": "address"
        }
      ],
      "name": "CreateGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pushedOwner",
          "type": "address"
        }
      ],
      "name": "OwnerPushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RegisterGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum ITournament.Action",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "SetGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawExpiredRewards",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchQuery",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimRefund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "rankings",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "proofs",
          "type": "bytes32[][]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "registrationStartTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "registrationEndTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "tournamentStartTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "tournamentEndTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minRoosters",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxRoosters",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "entranceFee",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "fee",
              "type": "uint16"
            },
            {
              "internalType": "uint16[]",
              "name": "distributions",
              "type": "uint16[]"
            }
          ],
          "internalType": "struct ITournament.CreateGameParam",
          "name": "game",
          "type": "tuple"
        }
      ],
      "name": "createGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "registrationStartTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "registrationEndTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tournamentStartTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tournamentEndTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "minRoosters",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxRoosters",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "roosters",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "entranceFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "balance",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "prizePool",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        },
        {
          "internalType": "enum ITournament.State",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "rankingRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getDistributionsSum",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "sum",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pushOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "roosterIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct ITournament.Sig",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rooster",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roosters",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scholarship",
      "outputs": [
        {
          "internalType": "contract Scholarship",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ITournament.Action",
          "name": "action",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "rankingRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint16[]",
          "name": "distributions",
          "type": "uint16[]"
        }
      ],
      "name": "setGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "scholarship_",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "withdrawExpiredRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa16b974fd7da9a31853a3cc9fd2d3bed40dda936a00cbb90028e9d18abed91f8",
  "receipt": {
    "to": null,
    "from": "0x374180e6E1b14454C18e44b635A95e7d37160570",
    "contractAddress": "0xAb162177a144f5df7578abCd455B20d67edCc359",
    "transactionIndex": 18,
    "gasUsed": "4325045",
    "logsBloom": "0x
    "blockHash": "0xe7204c57fa2e15f193cb2910efc86669ec18e10af7d10eea7acafab91116e761",
    "transactionHash": "0xa16b974fd7da9a31853a3cc9fd2d3bed40dda936a00cbb90028e9d18abed91f8",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 10936304,
        "transactionHash": "0xa16b974fd7da9a31853a3cc9fd2d3bed40dda936a00cbb90028e9d18abed91f8",
        "address": "0xAb162177a144f5df7578abCd455B20d67edCc359",
        "topics": [
          "0xaac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c73",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000374180e6e1b14454c18e44b635a95e7d37160570"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xe7204c57fa2e15f193cb2910efc86669ec18e10af7d10eea7acafab91116e761"
      }
    ],
    "blockNumber": 10936304,
    "cumulativeGasUsed": "9474757",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF54F493A2fE3D03bDB7474ddb5AA103eedE8A81C",
    "0xA66c49DBf7285c9f9C741Cf1a6c77E74a89C8048",
    "0x719Da3BC40A33b22D7639587c3Bb4DA914b21bB8",
    "0x18bF4D2Da2A03134834107F7cCF2cEA2d6bdbbCc"
  ],
  "numDeployments": 3,
  "solcInputHash": "c8f59fcb4c7de45eb424b1d311919958",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rooster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"scholarship_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ClaimRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"organzier\",\"type\":\"address\"}],\"name\":\"CreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pushedOwner\",\"type\":\"address\"}],\"name\":\"OwnerPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RegisterGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum ITournament.Action\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"SetGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawExpiredRewards\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"}],\"name\":\"batchQuery\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"rankings\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"registrationStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"registrationEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tournamentStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tournamentEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minRoosters\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxRoosters\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"entranceFee\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"distributions\",\"type\":\"uint16[]\"}],\"internalType\":\"struct ITournament.CreateGameParam\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"registrationStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"registrationEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tournamentStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tournamentEndTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minRoosters\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxRoosters\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roosters\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"entranceFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"balance\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prizePool\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"enum ITournament.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"rankingRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getDistributionsSum\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"sum\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pushOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"roosterIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ITournament.Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rooster\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roosters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scholarship\",\"outputs\":[{\"internalType\":\"contract Scholarship\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ITournament.Action\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"rankingRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint16[]\",\"name\":\"distributions\",\"type\":\"uint16[]\"}],\"name\":\"setGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"scholarship_\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"withdrawExpiredRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchQuery(uint256,uint256[])\":{\"params\":{\"gameId\":\"Game id\",\"roosterIds\":\"List of rooster ids\"}},\"claimRefund(uint256,uint256[],address)\":{\"params\":{\"gameId\":\"Game id\",\"recipient\":\"Recipient address\",\"roosterIds\":\"List of roosters registered\"},\"returns\":{\"amount\":\"Amount claimed\"}},\"claimReward(uint256,uint256[],uint32[],bytes32[][],address)\":{\"params\":{\"gameId\":\"Game id\",\"rankings\":\"List of rankings\",\"roosterIds\":\"List of rooster ids\"},\"returns\":{\"amount\":\"Total USDC rewarded\",\"fee\":\"Fee in USDC\"}},\"createGame((uint32,uint32,uint32,uint32,uint32,uint32,uint64,uint16,uint16[]))\":{\"params\":{\"game\":\"CreateGameParam new game info\"},\"returns\":{\"gameId\":\"uint256\"}},\"getDistributionsSum(uint256)\":{\"params\":{\"gameId\":\"Game id\"},\"returns\":{\"sum\":\"uint16\"}},\"register(uint256,uint256[],(bytes32,bytes32,uint8))\":{\"params\":{\"gameId\":\"Game id\",\"roosterIds\":\"List of roosters to register\",\"sig\":\"Signature for tournament qualification\"},\"returns\":{\"amount\":\"Total USDC paid\"}},\"setGame(uint8,uint256,uint256,bytes32,uint16[])\":{\"params\":{\"action\":\"Action enum\",\"distributions\":\"Distrubtion percentages to add.\",\"fundAmount\":\"Amount to fund in USDC\",\"gameId\":\"Game id\",\"rankingRoot\":\"Merkle root of ranking\"}},\"setProtocol(address,address)\":{\"params\":{\"scholarship_\":\"Scholarship contract address\",\"vault_\":\"Vault address\"}},\"totalGames()\":{\"returns\":{\"_0\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchQuery(uint256,uint256[])\":{\"notice\":\"Queries state of roosters in batch\"},\"claimRefund(uint256,uint256[],address)\":{\"notice\":\"Claims refund from cancelled tournament\"},\"claimReward(uint256,uint256[],uint32[],bytes32[][],address)\":{\"notice\":\"Claims reward from tournament prize pool\"},\"createGame((uint32,uint32,uint32,uint32,uint32,uint32,uint64,uint16,uint16[]))\":{\"notice\":\"Creates new game\"},\"getDistributionsSum(uint256)\":{\"notice\":\"Gets sum of distribution percentages\"},\"register(uint256,uint256[],(bytes32,bytes32,uint8))\":{\"notice\":\"Registers for the tournament game\"},\"setGame(uint8,uint256,uint256,bytes32,uint16[])\":{\"notice\":\"Sets state of game\"},\"setProtocol(address,address)\":{\"notice\":\"Sets addresses\"},\"totalGames()\":{\"notice\":\"Returns total `games` created\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tournament/Tournament.sol\":\"Tournament\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/scholarship/Scholarship.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract Scholarship is Ownable {\\n  IERC721 public immutable nft_contract;\\n  bool public disabled;\\n\\n  mapping(uint256 => address) public nft_scholar;\\n  mapping(uint256 => address) public nft_owner;\\n  mapping(address => uint256) public lended_nfts;\\n\\n  event Lend(uint256 nft_id, address scholar);\\n  event Transfer(uint256 nft_id, address scholar);\\n  event Revoke(uint256 nft_id);\\n  event Disable();\\n  event Enable();\\n\\n  constructor(address _nft_contract_address) {\\n    nft_contract = IERC721(_nft_contract_address);\\n  }\\n\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes calldata\\n  ) public pure returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  modifier notDisabled() {\\n    require(!disabled, \\\"Scholarship:CONTRACT_DISABLED\\\");\\n    _;\\n  }\\n\\n  modifier shouldBeOwner(uint256 nft_id) {\\n    require(nft_owner[nft_id] == msg.sender, \\\"Scholarship:NOT_OWNER\\\");\\n    _;\\n  }\\n\\n  modifier lended(uint256 nft_id) {\\n    require(nft_owner[nft_id] != address(0), \\\"Scholarship:NOT_LENDED\\\");\\n    _;\\n  }\\n\\n  function disable() public onlyOwner {\\n    disabled = true;\\n\\n    emit Disable();\\n  }\\n\\n  function enable() public onlyOwner {\\n    disabled = false;\\n\\n    emit Enable();\\n  }\\n\\n  function info(uint256 nft_id)\\n    public\\n    view\\n    lended(nft_id)\\n    returns (address owner, address scholar)\\n  {\\n    owner = nft_owner[nft_id];\\n    scholar = nft_scholar[nft_id];\\n  }\\n\\n  function getOwner(uint256 nft_id) public view lended(nft_id) returns (address owner) {\\n    owner = nft_owner[nft_id];\\n  }\\n\\n  function getScholar(uint256 nft_id) public view lended(nft_id) returns (address scholar) {\\n    scholar = nft_scholar[nft_id];\\n  }\\n\\n  function lendNFT(uint256 nft_id, address scholar) public notDisabled {\\n    nft_scholar[nft_id] = scholar;\\n    nft_owner[nft_id] = msg.sender;\\n    unchecked {\\n      lended_nfts[msg.sender] += 1;\\n    }\\n\\n    nft_contract.safeTransferFrom(msg.sender, address(this), nft_id);\\n    emit Lend(nft_id, scholar);\\n  }\\n\\n  function transferScholar(uint256 nft_id, address scholar)\\n    public\\n    notDisabled\\n    shouldBeOwner(nft_id)\\n  {\\n    nft_scholar[nft_id] = scholar;\\n\\n    emit Transfer(nft_id, scholar);\\n  }\\n\\n  function revoke(uint256 nft_id) public shouldBeOwner(nft_id) {\\n    lended_nfts[msg.sender] = lended_nfts[msg.sender] - 1;\\n    nft_owner[nft_id] = address(0);\\n    nft_scholar[nft_id] = address(0);\\n\\n    nft_contract.safeTransferFrom(address(this), msg.sender, nft_id);\\n\\n    emit Revoke(nft_id);\\n  }\\n\\n  function bulkLendNFT(uint256[] calldata nft_ids, address[] calldata scholars) public {\\n    require(nft_ids.length == scholars.length, \\\"Scholarship:PARAM_MISMATCH\\\");\\n\\n    for (uint256 i = 0; i < nft_ids.length; i++) {\\n      lendNFT(nft_ids[i], scholars[i]);\\n    }\\n  }\\n\\n  function bulkTransferScholar(uint256[] calldata nft_ids, address[] calldata scholars) public {\\n    require(nft_ids.length == scholars.length, \\\"Scholarship:PARAM_MISMATCH\\\");\\n\\n    for (uint256 i = 0; i < nft_ids.length; i++) {\\n      transferScholar(nft_ids[i], scholars[i]);\\n    }\\n  }\\n\\n  function bulkRevoke(uint256[] calldata nft_ids) public {\\n    for (uint256 i = 0; i < nft_ids.length; i++) {\\n      revoke(nft_ids[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8aa3bb9968d8766923bcc2827c51e943cdb0caa6b66aed79f03686c16be4f5fe\",\"license\":\"GPL-3.0\"},\"contracts/tournament/ITournament.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.4;\\n\\ninterface ITournament {\\n  // 4slots\\n  struct Game {\\n    uint32 registrationStartTimestamp; // Registration start date in block.timestamp [4]\\n    uint32 registrationEndTimestamp; // Registeration end date in block.timestamp [4]\\n    uint32 tournamentStartTimestamp; // Tournament start date in block.timestamp [4]\\n    uint32 tournamentEndTimestamp; // Tournament end date in block.timestamp [4]\\n    uint32 minRoosters; // Minimum roosters required to start [4]\\n    uint32 maxRoosters; // Maximum roosters for game [4]\\n    uint32 roosters; // Number of rooosters [4]\\n    uint64 entranceFee; // Entrance fee in USDC [8]\\n    uint64 balance; // Balance of tournament pool in USDC [8]\\n    uint64 prizePool; // Prize pool in USDC [8]\\n    uint16 fee; // Protocol fee in hundreds [2]\\n    State state; // Event state [1]\\n    bytes32 rankingRoot; // Merkle root of tournament ranking [32]\\n    uint16[] distributions; // Array of distrubution percentages in hundreds [32 + 2n]\\n  }\\n\\n  struct CreateGameParam {\\n    uint32 registrationStartTimestamp;\\n    uint32 registrationEndTimestamp;\\n    uint32 tournamentStartTimestamp;\\n    uint32 tournamentEndTimestamp;\\n    uint32 minRoosters;\\n    uint32 maxRoosters;\\n    uint64 entranceFee;\\n    uint16 fee;\\n    uint16[] distributions;\\n  }\\n\\n  struct Sig {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n  }\\n\\n  enum State {\\n    ONGOING,\\n    ENDED,\\n    PAUSED,\\n    CANCELLED\\n  }\\n\\n  enum Action {\\n    ADD,\\n    FUND,\\n    END,\\n    PAUSE,\\n    UNPAUSE,\\n    CANCEL\\n  }\\n\\n  event CreateGame(uint256 indexed gameId, address indexed organzier);\\n  event SetGame(uint256 indexed gameId, Action indexed action);\\n  event RegisterGame(uint256 indexed gameId, uint256[] roosterIds, address indexed sender);\\n  event ClaimReward(\\n    uint256 indexed gameId,\\n    uint256[] roosterIds,\\n    uint256 amount,\\n    address indexed recipient\\n  );\\n  event ClaimRefund(\\n    uint256 indexed gameId,\\n    uint256[] roosterIds,\\n    uint256 amount,\\n    address indexed recipient\\n  );\\n  event WithdrawExpiredRewards(uint256 indexed gameId, uint256 amount);\\n}\\n\",\"keccak256\":\"0xa5da9e8df12e7216acb82a89a72d7abb7fb94074c78a026a2537289557d028d2\",\"license\":\"AGPL-3.0\"},\"contracts/tournament/Tournament.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Auth} from \\\"../utils/Auth.sol\\\";\\nimport {ITournament} from \\\"./ITournament.sol\\\";\\nimport {Scholarship} from \\\"../scholarship/Scholarship.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract Tournament is ITournament, Auth {\\n  using SafeERC20 for IERC20;\\n  using SafeCast for uint256;\\n\\n  // Constants\\n  uint256 private constant _BASIS_POINTS = 100_00;\\n  uint256 private constant _EXPIRATION_PERIOD = 1 weeks;\\n  string private constant _MANAGER = \\\"MANAGER\\\";\\n  uint32 private constant _MAX_UINT32 = type(uint32).max;\\n\\n  // Address of USDC\\n  IERC20 public immutable usdc;\\n  // Address of rooster\\n  IERC721 public immutable rooster;\\n  // Address of scholarship contract\\n  Scholarship public scholarship;\\n  // Address of vault -- where fees go\\n  address public vault;\\n\\n  // List of tournament games\\n  Game[] public games;\\n  // List of roosters (game id => rooster id => rooster state)\\n  // 0: not registered\\n  // 1 ~ 2^32 - 2: ranking of winners\\n  // 2^32 - 1: registered / unranked roosters\\n  mapping(uint256 => mapping(uint256 => uint32)) public roosters;\\n\\n  constructor(\\n    address usdc_,\\n    address rooster_,\\n    address scholarship_,\\n    address vault_\\n  ) {\\n    usdc = IERC20(usdc_);\\n    rooster = IERC721(rooster_);\\n    scholarship = Scholarship(scholarship_);\\n    vault = vault_;\\n  }\\n\\n  /**\\n   * @notice Queries state of roosters in batch\\n   * @param gameId Game id\\n   * @param roosterIds List of rooster ids\\n   */\\n  function batchQuery(uint256 gameId, uint256[] calldata roosterIds)\\n    external\\n    view\\n    returns (uint32[] memory)\\n  {\\n    uint32[] memory result = new uint32[](roosterIds.length);\\n    for (uint256 i = 0; i < roosterIds.length; i++) {\\n      result[i] = roosters[gameId][roosterIds[i]];\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Returns total `games` created\\n   * @return uint256\\n   */\\n  function totalGames() external view returns (uint256) {\\n    return games.length;\\n  }\\n\\n  /**\\n   * @notice Gets sum of distribution percentages\\n   * @param gameId Game id\\n   * @return sum uint16\\n   */\\n  function getDistributionsSum(uint256 gameId) external view returns (uint16 sum) {\\n    Game storage game = games[gameId];\\n    for (uint256 i = 1; i < game.distributions.length; i++) {\\n      sum += game.distributions[i];\\n    }\\n  }\\n\\n  /**\\n   * @notice Creates new game\\n   * @param game CreateGameParam new game info\\n   * @return gameId uint256\\n   */\\n  function createGame(CreateGameParam calldata game)\\n    external\\n    onlyRole(_MANAGER)\\n    returns (uint256 gameId)\\n  {\\n    // Param check\\n    require(\\n      game.registrationStartTimestamp < game.registrationEndTimestamp,\\n      \\\"Invalid registeration time window\\\"\\n    );\\n    require(game.registrationStartTimestamp >= block.timestamp, \\\"Invalid registeration start time\\\");\\n    require(\\n      game.tournamentStartTimestamp < game.tournamentEndTimestamp,\\n      \\\"Invalid tournament time window\\\"\\n    );\\n    require(\\n      game.tournamentStartTimestamp > game.registrationEndTimestamp,\\n      \\\"Invalid tournament start time\\\"\\n    );\\n    require(game.distributions[0] == 0, \\\"0th index must be 0\\\");\\n    require(game.fee <= _BASIS_POINTS, \\\"Invalid fee\\\");\\n\\n    // Get game id\\n    gameId = games.length;\\n\\n    // Initialize and create game\\n    Game memory newGame = Game({\\n      registrationStartTimestamp: game.registrationStartTimestamp,\\n      registrationEndTimestamp: game.registrationEndTimestamp,\\n      tournamentStartTimestamp: game.tournamentStartTimestamp,\\n      tournamentEndTimestamp: game.tournamentEndTimestamp,\\n      minRoosters: game.minRoosters,\\n      maxRoosters: game.maxRoosters,\\n      roosters: 0,\\n      entranceFee: game.entranceFee,\\n      balance: 0,\\n      prizePool: 0,\\n      fee: game.fee,\\n      state: State.ONGOING,\\n      rankingRoot: bytes32(0),\\n      distributions: game.distributions\\n    });\\n    games.push(newGame);\\n\\n    emit CreateGame(gameId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Sets state of game\\n   * @param action Action enum\\n   * @param gameId Game id\\n   * @param fundAmount Amount to fund in USDC\\n   * @param rankingRoot Merkle root of ranking\\n   * @param distributions Distrubtion percentages to add.\\n   */\\n  function setGame(\\n    Action action,\\n    uint256 gameId,\\n    uint256 fundAmount,\\n    bytes32 rankingRoot,\\n    uint16[] calldata distributions\\n  ) external onlyRole(_MANAGER) {\\n    Game storage game = games[gameId];\\n\\n    if (action == Action.ADD) {\\n      // Add distributions percentages\\n      uint256 num = distributions.length;\\n      require(block.timestamp < game.registrationStartTimestamp, \\\"Registeration started\\\");\\n      require(num > 0, \\\"distrubutions not provided\\\");\\n\\n      // TODO: pre-package `distributions` and push by batch\\n      for (uint256 i = 0; i < num; i++) {\\n        game.distributions.push(distributions[i]);\\n      }\\n    } else if (action == Action.FUND) {\\n      // Fund to prize pool\\n      require(game.state != State.ENDED && game.state != State.CANCELLED, \\\"Ended or cancelled\\\");\\n      require(fundAmount > 0, \\\"Amount not provided\\\");\\n      game.balance += fundAmount.toUint64();\\n      game.prizePool += fundAmount.toUint64();\\n      usdc.safeTransferFrom(msg.sender, address(this), fundAmount);\\n    } else if (action == Action.END) {\\n      // End game\\n      require(block.timestamp >= game.tournamentEndTimestamp, \\\"Not ended\\\");\\n      require(rankingRoot != bytes32(0), \\\"rankingRoot not provided\\\");\\n      require(game.roosters >= game.minRoosters, \\\"Not enough roosters\\\");\\n      game.rankingRoot = rankingRoot;\\n      game.state = State.ENDED;\\n    } else if (action == Action.CANCEL) {\\n      // Cancel game and withdraw funded rewards\\n      require(game.state == State.ONGOING, \\\"Not ongoing\\\");\\n      uint256 fundedAmount = game.prizePool - game.roosters * game.entranceFee;\\n      game.state = State.CANCELLED;\\n      if (fundedAmount > 0) {\\n        game.balance -= fundedAmount.toUint64();\\n        usdc.safeTransfer(vault, fundedAmount);\\n      }\\n    } else if (action == Action.PAUSE) {\\n      // Pause game\\n      require(game.state == State.ONGOING, \\\"Not ongoing\\\");\\n      game.state = State.PAUSED;\\n    } else if (action == Action.UNPAUSE) {\\n      // Unpause game\\n      require(game.state == State.PAUSED, \\\"Not paused\\\");\\n      game.state = State.ONGOING;\\n    }\\n\\n    emit SetGame(gameId, action);\\n  }\\n\\n  /**\\n   * @notice Registers for the tournament game\\n   * @param gameId Game id\\n   * @param roosterIds List of roosters to register\\n   * @param sig Signature for tournament qualification\\n   * @return amount Total USDC paid\\n   */\\n  function register(\\n    uint256 gameId,\\n    uint256[] calldata roosterIds,\\n    Sig calldata sig\\n  ) external whenNotPaused returns (uint256 amount) {\\n    Game storage game = games[gameId];\\n    uint256 num = roosterIds.length;\\n\\n    // Checks\\n    require(block.timestamp >= game.registrationStartTimestamp, \\\"Not started\\\");\\n    require(block.timestamp < game.registrationEndTimestamp, \\\"Ended\\\");\\n    require(game.state == State.ONGOING, \\\"Paused or Cancelled\\\");\\n    require(num <= game.maxRoosters - game.roosters, \\\"Reached limit\\\");\\n    require(_isOwner(msg.sender, roosterIds), \\\"Not owner\\\");\\n    require(_isQualified(gameId, roosterIds, sig), \\\"Not qualified\\\");\\n\\n    // Effects\\n    for (uint256 i = 0; i < num; i++) {\\n      require(roosters[gameId][roosterIds[i]] == 0, \\\"Already registered\\\");\\n      roosters[gameId][roosterIds[i]] = _MAX_UINT32;\\n    }\\n    game.roosters += num.toUint32();\\n    game.balance += ((amount = game.entranceFee * num)).toUint64();\\n    game.prizePool += amount.toUint64();\\n\\n    // Interactions\\n    usdc.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit RegisterGame(gameId, roosterIds, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Claims reward from tournament prize pool\\n   * @param gameId Game id\\n   * @param roosterIds List of rooster ids\\n   * @param rankings List of rankings\\n   * @return amount Total USDC rewarded\\n   * @return fee Fee in USDC\\n   */\\n  function claimReward(\\n    uint256 gameId,\\n    uint256[] calldata roosterIds,\\n    uint32[] calldata rankings,\\n    bytes32[][] memory proofs,\\n    address recipient\\n  ) external whenNotPaused returns (uint256 amount, uint256 fee) {\\n    Game storage game = games[gameId];\\n\\n    // Checks\\n    require(roosterIds.length == rankings.length, \\\"Length mismatch\\\");\\n    require(game.state == State.ENDED, \\\"Not ended\\\");\\n    require(block.timestamp < game.tournamentEndTimestamp + _EXPIRATION_PERIOD, \\\"Expired\\\");\\n    require(_isOwner(msg.sender, roosterIds), \\\"Not owner\\\");\\n\\n    // Individual Checks & Effects\\n    for (uint256 i = 0; i < roosterIds.length; i++) {\\n      bytes32 node = keccak256(abi.encodePacked(gameId, roosterIds[i], rankings[i]));\\n      require(MerkleProof.verify(proofs[i], game.rankingRoot, node), \\\"Invalid proof\\\");\\n      require(roosters[gameId][roosterIds[i]] == _MAX_UINT32, \\\"Already claimed or not registered\\\");\\n\\n      // Set rooster ranking\\n      roosters[gameId][roosterIds[i]] = rankings[i];\\n      // Sum up distribution percentages\\n      amount += game.distributions[rankings[i]];\\n    }\\n    amount = (game.prizePool * amount) / _BASIS_POINTS;\\n    fee = (amount * game.fee) / _BASIS_POINTS;\\n    game.balance -= amount.toUint64();\\n\\n    // Interactions\\n    usdc.safeTransfer(vault, fee);\\n    usdc.safeTransfer(recipient, amount - fee);\\n\\n    emit ClaimReward(gameId, roosterIds, amount, recipient);\\n  }\\n\\n  /**\\n   * @notice Claims refund from cancelled tournament\\n   * @param gameId Game id\\n   * @param roosterIds List of roosters registered\\n   * @param recipient Recipient address\\n   * @return amount Amount claimed\\n   */\\n  function claimRefund(\\n    uint256 gameId,\\n    uint256[] calldata roosterIds,\\n    address recipient\\n  ) external whenNotPaused returns (uint256 amount) {\\n    Game storage game = games[gameId];\\n    uint256 num = roosterIds.length;\\n\\n    // Checks\\n    require(game.state == State.CANCELLED, \\\"Not cancelled\\\");\\n    require(_isOwner(msg.sender, roosterIds), \\\"Not owner\\\");\\n\\n    // Individual Checks & Effects\\n    for (uint256 i = 0; i < num; i++) {\\n      require(roosters[gameId][roosterIds[i]] == _MAX_UINT32, \\\"Already claimed\\\");\\n      roosters[gameId][roosterIds[i]] = _MAX_UINT32 - 1;\\n    }\\n    amount = game.entranceFee * num;\\n    game.balance -= amount.toUint64();\\n\\n    // Interactions\\n    usdc.safeTransfer(recipient, amount);\\n\\n    emit ClaimRefund(gameId, roosterIds, amount, recipient);\\n  }\\n\\n  function withdrawExpiredRewards(uint256 gameId)\\n    external\\n    onlyRole(_MANAGER)\\n    returns (uint256 amount)\\n  {\\n    Game storage game = games[gameId];\\n\\n    // Checks\\n    require(block.timestamp >= game.tournamentEndTimestamp + _EXPIRATION_PERIOD, \\\"Not expired\\\");\\n    require(game.state == State.ENDED, \\\"Not ended\\\");\\n    require((amount = game.balance) > 0, \\\"Nothing to withdraw\\\");\\n\\n    // Effects\\n    game.balance = 0;\\n\\n    // Interactions\\n    usdc.safeTransfer(vault, amount);\\n\\n    emit WithdrawExpiredRewards(gameId, amount);\\n  }\\n\\n  function _isOwner(address owner, uint256[] calldata roosterIds) private view returns (bool) {\\n    for (uint256 i = 0; i < roosterIds.length; i++) {\\n      if (\\n        rooster.ownerOf(roosterIds[i]) != owner && scholarship.nft_owner(roosterIds[i]) != owner\\n      ) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function _isQualified(\\n    uint256 gameId,\\n    uint256[] calldata roosterIds,\\n    Sig calldata sig\\n  ) private view returns (bool) {\\n    bytes32 messageHash = keccak256(abi.encodePacked(gameId, roosterIds));\\n    bytes32 ethSignedMessageHash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n    );\\n    return hasRole(\\\"SIGNER\\\", ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s));\\n  }\\n\\n  /**\\n   * @notice Sets addresses\\n   * @param vault_ Vault address\\n   * @param scholarship_ Scholarship contract address\\n   */\\n  function setProtocol(address vault_, address scholarship_) external onlyOwner {\\n    if (vault_ != address(0)) {\\n      vault = vault_;\\n    }\\n    if (scholarship_ != address(0)) {\\n      scholarship = Scholarship(scholarship_);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x13a4b3aae1e2f818cf080e855edfab082b10f6011f3a491c5a7b54e557d35b66\",\"license\":\"AGPL-3.0\"},\"contracts/utils/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary Strings {\\n  function toBytes32(string memory text) internal pure returns (bytes32) {\\n    return bytes32(bytes(text));\\n  }\\n\\n  function toString(bytes32 text) internal pure returns (string memory) {\\n    return string(abi.encodePacked(text));\\n  }\\n}\\n\\ncontract Auth {\\n  //Address of current owner\\n  address public owner;\\n  //Address of new owner (Note: new owner must pull to be an owner)\\n  address public newOwner;\\n  //If paused or not\\n  uint256 private _paused;\\n  //Roles mapping (role => address => has role)\\n  mapping(bytes32 => mapping(address => bool)) private _roles;\\n\\n  //Fires when a new owner is pushed\\n  event OwnerPushed(address indexed pushedOwner);\\n  //Fires when new owner pulled\\n  event OwnerPulled(address indexed previousOwner, address indexed newOwner);\\n  //Fires when account is granted role\\n  event RoleGranted(string indexed role, address indexed account, address indexed sender);\\n  //Fires when accoount is revoked role\\n  event RoleRevoked(string indexed role, address indexed account, address indexed sender);\\n  //Fires when pause is triggered by account\\n  event Paused(address account);\\n  //Fires when pause is lifted by account\\n  event Unpaused(address account);\\n\\n  error Unauthorized(string role, address user);\\n  error IsPaused();\\n  error NotPaused();\\n\\n  constructor() {\\n    owner = msg.sender;\\n    emit OwnerPulled(address(0), msg.sender);\\n  }\\n\\n  modifier whenNotPaused() {\\n    if (paused()) revert IsPaused();\\n    _;\\n  }\\n\\n  modifier whenPaused() {\\n    if (!paused()) revert NotPaused();\\n    _;\\n  }\\n\\n  modifier onlyOwner() {\\n    if (msg.sender != owner) revert Unauthorized(\\\"OWNER\\\", msg.sender);\\n    _;\\n  }\\n\\n  modifier onlyRole(string memory role) {\\n    if (!hasRole(role, msg.sender)) revert Unauthorized(role, msg.sender);\\n    _;\\n  }\\n\\n  function hasRole(string memory role, address account) public view virtual returns (bool) {\\n    return _roles[Strings.toBytes32(role)][account];\\n  }\\n\\n  function paused() public view virtual returns (bool) {\\n    return _paused == 1 ? true : false;\\n  }\\n\\n  function pushOwner(address account) public virtual onlyOwner {\\n    require(account != address(0), \\\"No address(0)\\\");\\n    require(account != owner, \\\"Only new owner\\\");\\n    newOwner = account;\\n    emit OwnerPushed(account);\\n  }\\n\\n  function pullOwner() public virtual {\\n    if (msg.sender != newOwner) revert Unauthorized(\\\"NEW_OWNER\\\", msg.sender);\\n    address oldOwner = owner;\\n    owner = msg.sender;\\n    emit OwnerPulled(oldOwner, msg.sender);\\n  }\\n\\n  function grantRole(string memory role, address account) public virtual onlyOwner {\\n    require(bytes(role).length > 0, \\\"Role not given\\\");\\n    require(account != address(0), \\\"No address(0)\\\");\\n    _grantRole(role, account);\\n  }\\n\\n  function revokeRole(string memory role, address account) public virtual onlyOwner {\\n    require(hasRole(role, account), \\\"Role not granted\\\");\\n    _revokeRole(role, account);\\n  }\\n\\n  function renounceRole(string memory role) public virtual {\\n    require(hasRole(role, msg.sender), \\\"Role not granted\\\");\\n    _revokeRole(role, msg.sender);\\n  }\\n\\n  function pause() public virtual onlyRole(\\\"PAUSER\\\") whenNotPaused {\\n    _paused = 1;\\n    emit Paused(msg.sender);\\n  }\\n\\n  function unpause() public virtual onlyRole(\\\"PAUSER\\\") whenPaused {\\n    _paused = 0;\\n    emit Unpaused(msg.sender);\\n  }\\n\\n  function _grantRole(string memory role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      bytes32 encodedRole = Strings.toBytes32(role);\\n      _roles[encodedRole][account] = true;\\n      emit RoleGranted(role, account, msg.sender);\\n    }\\n  }\\n\\n  function _revokeRole(string memory role, address account) internal virtual {\\n    bytes32 encodedRole = Strings.toBytes32(role);\\n    _roles[encodedRole][account] = false;\\n    emit RoleRevoked(role, account, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xdc8d6dbb9c1781cfb232484fcdbbfb0fbadba69cbfe5597fd835cf2d9a7c854d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c806376229440116100f9578063c3b4627e11610097578063d0ebe5f511610071578063d0ebe5f51461043a578063d4ee1d901461044d578063db560f161461046d578063fbfa77cf1461049357600080fd5b8063c3b4627e146103df578063cae32752146103f2578063cba119f21461041a57600080fd5b80639c9d6e2e116100d35780639c9d6e2e14610386578063a753977514610399578063ac5a7d5c146103b9578063c19ae2ed146103cc57600080fd5b8063762294401461034b5780638456cb591461035e5780638da5cb5b1461036657600080fd5b806343a390c3116101665780636c9cd097116101405780636c9cd0971461030a5780636cef16e61461031d57806370768f8614610325578063731f21a01461033857600080fd5b806343a390c3146102995780634e3522bf146102ac5780635c975abb146102f257600080fd5b80633d76ba95116101975780633d76ba951461021c5780633e413bee146102685780633f4ba83a1461028f57600080fd5b8063117a5b90146101be5780632956d699146101f35780632c4e591b14610214575b600080fd5b6101d16101cc366004613f65565b6104b3565b6040516101ea9d9c9b9a99989796959493929190613fe8565b60405180910390f35b61020661020136600461408a565b6105b2565b6040519081526020016101ea565b600654610206565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ea565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b610297610dcc565b005b6102066102a7366004613f65565b610ec0565b6102dd6102ba3660046140c6565b600760209081526000928352604080842090915290825290205463ffffffff1681565b60405163ffffffff90911681526020016101ea565b6102fa61117a565b60405190151581526020016101ea565b6102fa610318366004614226565b611192565b6102976111e0565b610297610333366004614278565b6112db565b610297610346366004614226565b61133e565b6102976103593660046142f9565b61142b565b610297611e0f565b6000546102439073ffffffffffffffffffffffffffffffffffffffff1681565b610206610394366004614370565b611efd565b6004546102439073ffffffffffffffffffffffffffffffffffffffff1681565b6102976103c73660046143cf565b612275565b6102976103da366004614226565b61243b565b6102976103ed3660046143ec565b612582565b61040561040036600461443e565b6126ca565b604080519283526020830191909152016101ea565b61042d6104283660046145e8565b612d73565b6040516101ea9190614634565b61020661044836600461467e565b612e52565b6001546102439073ffffffffffffffffffffffffffffffffffffffff1681565b61048061047b366004613f65565b613414565b60405161ffff90911681526020016101ea565b6005546102439073ffffffffffffffffffffffffffffffffffffffff1681565b600681815481106104c357600080fd5b600091825260209091206004909102018054600182015460029092015463ffffffff80831694506401000000008304811693680100000000000000008085048316946c0100000000000000000000000081048416947001000000000000000000000000000000008083048616957401000000000000000000000000000000000000000084048116957801000000000000000000000000000000000000000000000000948590049091169467ffffffffffffffff80831695918304811694938304169290820461ffff16917a010000000000000000000000000000000000000000000000000000900460ff16908d565b60006040518060400160405280600781526020017f4d414e41474552000000000000000000000000000000000000000000000000008152506105f48133611192565b6106375780336040517f09ab81ed00000000000000000000000000000000000000000000000000000000815260040161062e929190614779565b60405180910390fd5b61064760408401602085016147b1565b63ffffffff1661065a60208501856147b1565b63ffffffff16106106d35760405162461bcd60e51b815260206004820152602160248201527f496e76616c69642072656769737465726174696f6e2074696d652077696e646f60448201527f7700000000000000000000000000000000000000000000000000000000000000606482015260840161062e565b426106e160208501856147b1565b63ffffffff1610156107355760405162461bcd60e51b815260206004820181905260248201527f496e76616c69642072656769737465726174696f6e2073746172742074696d65604482015260640161062e565b61074560808401606085016147b1565b63ffffffff1661075b60608501604086016147b1565b63ffffffff16106107ae5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420746f75726e616d656e742074696d652077696e646f770000604482015260640161062e565b6107be60408401602085016147b1565b63ffffffff166107d460608501604086016147b1565b63ffffffff16116108275760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420746f75726e616d656e742073746172742074696d65000000604482015260640161062e565b6108356101008401846147d7565b60008181106108465761084661483f565b905060200201602081019061085b919061486e565b61ffff16156108ac5760405162461bcd60e51b815260206004820152601360248201527f30746820696e646578206d757374206265203000000000000000000000000000604482015260640161062e565b6127106108c0610100850160e0860161486e565b61ffff1611156109125760405162461bcd60e51b815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015260640161062e565b600654604080516101c081019091529092506000908061093560208701876147b1565b63ffffffff16815260200185602001602081019061095391906147b1565b63ffffffff16815260200161096e60608701604088016147b1565b63ffffffff16815260200161098960808701606088016147b1565b63ffffffff1681526020016109a460a08701608088016147b1565b63ffffffff1681526020016109bf60c0870160a088016147b1565b63ffffffff168152600060208201526040016109e160e0870160c08801614892565b67ffffffffffffffff1681526000602082018190526040820152606001610a0f610100870160e0880161486e565b61ffff1681526020016000815260006020820152604001610a346101008701876147d7565b80806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093909452505060068054600181018255915282517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60049092029182018054602086015160408701516060880151608089015160a08a015160c08b015163ffffffff9889167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009097169690961764010000000095891695909502949094177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000093881684027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16176c0100000000000000000000000092881692909202919091177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000091871682027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16177401000000000000000000000000000000000000000093871693909302929092177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000095909316850292909217835560e08701517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4090950180546101008901516101208a01516101408b015167ffffffffffffffff998a167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090941693909317918916909502177fffffffffffff00000000000000000000ffffffffffffffffffffffffffffffff16969093169091027fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff169490941761ffff9091169092029190911780835561016085015194955085949193509091907fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff167a010000000000000000000000000000000000000000000000000000836003811115610d6957610d69613f7e565b021790555061018082015160028201556101a08201518051610d95916003840191602090910190613eb0565b505060405133915084907fb26a18817e1b688c3c2cdfe3e22ed439b9e3f423302d08b70d6e4ad0e278a2d190600090a35050919050565b6040518060400160405280600681526020017f5041555345520000000000000000000000000000000000000000000000000000815250610e0c8133611192565b610e465780336040517f09ab81ed00000000000000000000000000000000000000000000000000000000815260040161062e929190614779565b610e4e61117a565b610e84576040517f6cd6020100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a150565b60006040518060400160405280600781526020017f4d414e4147455200000000000000000000000000000000000000000000000000815250610f028133611192565b610f3c5780336040517f09ab81ed00000000000000000000000000000000000000000000000000000000815260040161062e929190614779565b600060068481548110610f5157610f5161483f565b600091825260209091206004909102018054909150610f8a9062093a80906c01000000000000000000000000900463ffffffff166148eb565b421015610fd95760405162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015260640161062e565b6001808201547a010000000000000000000000000000000000000000000000000000900460ff16600381111561101157611011613f7e565b1461105e5760405162461bcd60e51b815260206004820152600960248201527f4e6f7420656e6465640000000000000000000000000000000000000000000000604482015260640161062e565b600181015468010000000000000000900467ffffffffffffffff169250826110c85760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f20776974686472617700000000000000000000000000604482015260640161062e565b6001810180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1690556005546111399073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169116856134ac565b837fec3e09ac5180123230478a10d990cff7e788545bf19cf184c13b2ce9231c7e418460405161116b91815260200190565b60405180910390a25050919050565b600060025460011461118c5750600090565b50600190565b6000600360006111a185613585565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8616825290925290205460ff16905092915050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461126957604080517f09ab81ed0000000000000000000000000000000000000000000000000000000081526004810191909152600960448201527f4e45575f4f574e45520000000000000000000000000000000000000000000000606482015233602482015260840161062e565b60008054337fffffffffffffffffffffffff000000000000000000000000000000000000000082168117835560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917faac18e3887f7d855b2483e20615f8e3fb6efc18e25502090082b47047fb57c7391a350565b6112e58133611192565b6113315760405162461bcd60e51b815260206004820152601060248201527f526f6c65206e6f74206772616e74656400000000000000000000000000000000604482015260640161062e565b61133b8133613596565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146113c757604080517f09ab81ed0000000000000000000000000000000000000000000000000000000081526004810191909152600560448201527f4f574e4552000000000000000000000000000000000000000000000000000000606482015233602482015260840161062e565b6113d18282611192565b61141d5760405162461bcd60e51b815260206004820152601060248201527f526f6c65206e6f74206772616e74656400000000000000000000000000000000604482015260640161062e565b6114278282613596565b5050565b6040518060400160405280600781526020017f4d414e414745520000000000000000000000000000000000000000000000000081525061146b8133611192565b6114a55780336040517f09ab81ed00000000000000000000000000000000000000000000000000000000815260040161062e929190614779565b6000600687815481106114ba576114ba61483f565b60009182526020822060049091020191508860058111156114dd576114dd613f7e565b1415611614578054839063ffffffff16421061153b5760405162461bcd60e51b815260206004820152601560248201527f52656769737465726174696f6e20737461727465640000000000000000000000604482015260640161062e565b6000811161158b5760405162461bcd60e51b815260206004820152601a60248201527f646973747275627574696f6e73206e6f742070726f7669646564000000000000604482015260640161062e565b60005b8181101561160d57826003018686838181106115ac576115ac61483f565b90506020020160208101906115c1919061486e565b81546001810183556000928352602090922060108304018054600f9093166002026101000a61ffff8181021990941692909316929092021790558061160581614903565b91505061158e565b5050611dc8565b600188600581111561162857611628613f7e565b1415611853576001808201547a010000000000000000000000000000000000000000000000000000900460ff16600381111561166657611666613f7e565b141580156116ab5750600360018201547a010000000000000000000000000000000000000000000000000000900460ff1660038111156116a8576116a8613f7e565b14155b6116f75760405162461bcd60e51b815260206004820152601260248201527f456e646564206f722063616e63656c6c65640000000000000000000000000000604482015260640161062e565b600086116117475760405162461bcd60e51b815260206004820152601360248201527f416d6f756e74206e6f742070726f766964656400000000000000000000000000604482015260640161062e565b6117508661363f565b60018201805460089061177a90849068010000000000000000900467ffffffffffffffff1661493c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506117a98661363f565b6001820180546010906117db908490700100000000000000000000000000000000900467ffffffffffffffff1661493c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061184e3330887f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166136c3909392919063ffffffff16565b611dc8565b600288600581111561186757611867613f7e565b1415611a025780546c01000000000000000000000000900463ffffffff164210156118d45760405162461bcd60e51b815260206004820152600960248201527f4e6f7420656e6465640000000000000000000000000000000000000000000000604482015260640161062e565b846119215760405162461bcd60e51b815260206004820152601860248201527f72616e6b696e67526f6f74206e6f742070726f76696465640000000000000000604482015260640161062e565b805463ffffffff7001000000000000000000000000000000008204811678010000000000000000000000000000000000000000000000009092041610156119aa5760405162461bcd60e51b815260206004820152601360248201527f4e6f7420656e6f75676820726f6f737465727300000000000000000000000000604482015260640161062e565b60028101859055600180820180547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff167a010000000000000000000000000000000000000000000000000000835b0217905550611dc8565b6005886005811115611a1657611a16613f7e565b1415611c0f57600060018201547a010000000000000000000000000000000000000000000000000000900460ff166003811115611a5557611a55613f7e565b14611aa25760405162461bcd60e51b815260206004820152600b60248201527f4e6f74206f6e676f696e67000000000000000000000000000000000000000000604482015260640161062e565b60018101548154600091611ae49167ffffffffffffffff909116907801000000000000000000000000000000000000000000000000900463ffffffff16614968565b6001830154611b119190700100000000000000000000000000000000900467ffffffffffffffff16614998565b6001830180547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff167a03000000000000000000000000000000000000000000000000000017905567ffffffffffffffff1690508015611c0957611b738161363f565b600183018054600890611b9d90849068010000000000000000900467ffffffffffffffff16614998565b825467ffffffffffffffff9182166101009390930a928302919092021990911617905550600554611c09907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116836134ac565b50611dc8565b6003886005811115611c2357611c23613f7e565b1415611cfd57600060018201547a010000000000000000000000000000000000000000000000000000900460ff166003811115611c6257611c62613f7e565b14611caf5760405162461bcd60e51b815260206004820152600b60248201527f4e6f74206f6e676f696e67000000000000000000000000000000000000000000604482015260640161062e565b600181018054600291907fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff167a010000000000000000000000000000000000000000000000000000836119f8565b6004886005811115611d1157611d11613f7e565b1415611dc857600260018201547a010000000000000000000000000000000000000000000000000000900460ff166003811115611d5057611d50613f7e565b14611d9d5760405162461bcd60e51b815260206004820152600a60248201527f4e6f742070617573656400000000000000000000000000000000000000000000604482015260640161062e565b6001810180547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff1690555b876005811115611dda57611dda613f7e565b60405188907fded99f1a8ca84d9e91ae9369ef5dab9758de46b4e8109da848ceda6ed4464e8590600090a35050505050505050565b6040518060400160405280600681526020017f5041555345520000000000000000000000000000000000000000000000000000815250611e4f8133611192565b611e895780336040517f09ab81ed00000000000000000000000000000000000000000000000000000000815260040161062e929190614779565b611e9161117a565b15611ec8576040517f1309a56300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001610eb5565b6000611f0761117a565b15611f3e576040517f1309a56300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060068681548110611f5357611f5361483f565b60009182526020909120600490910201905083600360018301547a010000000000000000000000000000000000000000000000000000900460ff166003811115611f9f57611f9f613f7e565b14611fec5760405162461bcd60e51b815260206004820152600d60248201527f4e6f742063616e63656c6c656400000000000000000000000000000000000000604482015260640161062e565b611ff7338787613727565b6120435760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161062e565b60005b8181101561215757600088815260076020526040812063ffffffff918989858181106120745761207461483f565b602090810292909201358352508101919091526040016000205463ffffffff16146120e15760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920636c61696d65640000000000000000000000000000000000604482015260640161062e565b6120f0600163ffffffff6149c1565b6000898152600760205260408120908989858181106121115761211161483f565b90506020020135815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550808061214f90614903565b915050612046565b50600182015461217290829067ffffffffffffffff166149de565b925061217d8361363f565b6001830180546008906121a790849068010000000000000000900467ffffffffffffffff16614998565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061221884847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166134ac9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff16877f5fcacaea1fd24459895ce71c81d7f698e8142ac0dff6a7ab1c226d2bd6dd97f688888760405161226393929190614a6a565b60405180910390a35050949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146122fe57604080517f09ab81ed0000000000000000000000000000000000000000000000000000000081526004810191909152600560448201527f4f574e4552000000000000000000000000000000000000000000000000000000606482015233602482015260840161062e565b73ffffffffffffffffffffffffffffffffffffffff81166123615760405162461bcd60e51b815260206004820152600d60248201527f4e6f206164647265737328302900000000000000000000000000000000000000604482015260640161062e565b60005473ffffffffffffffffffffffffffffffffffffffff828116911614156123cc5760405162461bcd60e51b815260206004820152600e60248201527f4f6e6c79206e6577206f776e6572000000000000000000000000000000000000604482015260640161062e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fd52a054f85e9a057277cd95bf6d5da45465068f0467ec7991f3fcc017be6b72590600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff1633146124c457604080517f09ab81ed0000000000000000000000000000000000000000000000000000000081526004810191909152600560448201527f4f574e4552000000000000000000000000000000000000000000000000000000606482015233602482015260840161062e565b60008251116125155760405162461bcd60e51b815260206004820152600e60248201527f526f6c65206e6f7420676976656e000000000000000000000000000000000000604482015260640161062e565b73ffffffffffffffffffffffffffffffffffffffff81166125785760405162461bcd60e51b815260206004820152600d60248201527f4e6f206164647265737328302900000000000000000000000000000000000000604482015260640161062e565b611427828261391a565b60005473ffffffffffffffffffffffffffffffffffffffff16331461260b57604080517f09ab81ed0000000000000000000000000000000000000000000000000000000081526004810191909152600560448201527f4f574e4552000000000000000000000000000000000000000000000000000000606482015233602482015260840161062e565b73ffffffffffffffffffffffffffffffffffffffff82161561266857600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff811615611427576004805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790555050565b6000806126d561117a565b1561270c576040517f1309a56300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060068a815481106127215761272161483f565b6000918252602090912060049091020190508786146127825760405162461bcd60e51b815260206004820152600f60248201527f4c656e677468206d69736d617463680000000000000000000000000000000000604482015260640161062e565b6001808201547a010000000000000000000000000000000000000000000000000000900460ff1660038111156127ba576127ba613f7e565b146128075760405162461bcd60e51b815260206004820152600960248201527f4e6f7420656e6465640000000000000000000000000000000000000000000000604482015260640161062e565b805461282d9062093a80906c01000000000000000000000000900463ffffffff166148eb565b421061287b5760405162461bcd60e51b815260206004820152600760248201527f4578706972656400000000000000000000000000000000000000000000000000604482015260640161062e565b612886338a8a613727565b6128d25760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161062e565b60005b88811015612ba95760008b8b8b848181106128f2576128f261483f565b905060200201358a8a8581811061290b5761290b61483f565b905060200201602081019061292091906147b1565b60405160200161296893929190928352602083019190915260e01b7fffffffff0000000000000000000000000000000000000000000000000000000016604082015260440190565b6040516020818303038152906040528051906020012090506129a88783815181106129955761299561483f565b60200260200101518460020154836139d4565b6129f45760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f6600000000000000000000000000000000000000604482015260640161062e565b60008c815260076020526040812063ffffffff918d8d86818110612a1a57612a1a61483f565b602090810292909201358352508101919091526040016000205463ffffffff1614612aad5760405162461bcd60e51b815260206004820152602160248201527f416c726561647920636c61696d6564206f72206e6f742072656769737465726560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161062e565b888883818110612abf57612abf61483f565b9050602002016020810190612ad491906147b1565b60008d8152600760205260408120908d8d86818110612af557612af561483f565b90506020020135815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555082600301898984818110612b3e57612b3e61483f565b9050602002016020810190612b5391906147b1565b63ffffffff1681548110612b6957612b6961483f565b60009182526020909120601082040154612b9391600f166002026101000a900461ffff16866148eb565b9450508080612ba190614903565b9150506128d5565b50600181015461271090612bdc908590700100000000000000000000000000000000900467ffffffffffffffff166149de565b612be69190614a8e565b600182015490935061271090612c1c907801000000000000000000000000000000000000000000000000900461ffff16856149de565b612c269190614a8e565b9150612c318361363f565b600182018054600890612c5b90849068010000000000000000900467ffffffffffffffff16614998565b825467ffffffffffffffff9182166101009390930a928302919092021990911617905550600554612cc7907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116846134ac565b612d1384612cd58486614ac9565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691906134ac565b8373ffffffffffffffffffffffffffffffffffffffff168a7ffdf9f5a42428bac06c94e56a8cf625dbda565529322c5ad85170e8a01f05773a8b8b87604051612d5e93929190614a6a565b60405180910390a35097509795505050505050565b606060008267ffffffffffffffff811115612d9057612d906140e8565b604051908082528060200260200182016040528015612db9578160200160208202803683370190505b50905060005b83811015612e4757600086815260076020526040812090868684818110612de857612de861483f565b90506020020135815260200190815260200160002060009054906101000a900463ffffffff16828281518110612e2057612e2061483f565b63ffffffff9092166020928302919091019091015280612e3f81614903565b915050612dbf565b5090505b9392505050565b6000612e5c61117a565b15612e93576040517f1309a56300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060068681548110612ea857612ea861483f565b600091825260209091206004909102018054909150849063ffffffff16421015612f145760405162461bcd60e51b815260206004820152600b60248201527f4e6f742073746172746564000000000000000000000000000000000000000000604482015260640161062e565b8154640100000000900463ffffffff164210612f725760405162461bcd60e51b815260206004820152600560248201527f456e646564000000000000000000000000000000000000000000000000000000604482015260640161062e565b600060018301547a010000000000000000000000000000000000000000000000000000900460ff166003811115612fab57612fab613f7e565b14612ff85760405162461bcd60e51b815260206004820152601360248201527f506175736564206f722043616e63656c6c656400000000000000000000000000604482015260640161062e565b81546130409063ffffffff78010000000000000000000000000000000000000000000000008204811691740100000000000000000000000000000000000000009004166149c1565b63ffffffff168111156130955760405162461bcd60e51b815260206004820152600d60248201527f52656163686564206c696d697400000000000000000000000000000000000000604482015260640161062e565b6130a0338787613727565b6130ec5760405162461bcd60e51b815260206004820152600960248201527f4e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161062e565b6130f8878787876139ea565b6131445760405162461bcd60e51b815260206004820152600d60248201527f4e6f74207175616c696669656400000000000000000000000000000000000000604482015260640161062e565b60005b81811015613249576000888152600760205260408120908888848181106131705761317061483f565b602090810292909201358352508101919091526040016000205463ffffffff16156131dd5760405162461bcd60e51b815260206004820152601260248201527f416c726561647920726567697374657265640000000000000000000000000000604482015260640161062e565b600088815260076020526040812063ffffffff918989858181106132035761320361483f565b90506020020135815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550808061324190614903565b915050613147565b5061325381613b2c565b825483906018906132879084907801000000000000000000000000000000000000000000000000900463ffffffff16614ae0565b825463ffffffff9182166101009390930a92830291909202199091161790555060018201546132cd906132c590839067ffffffffffffffff166149de565b93508361363f565b6001830180546008906132f790849068010000000000000000900467ffffffffffffffff1661493c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506133268361363f565b600183018054601090613358908490700100000000000000000000000000000000900467ffffffffffffffff1661493c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506133cb3330857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166136c3909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16877fb27d176135db41e0d10f2aeed50c1a07e7086df2be3298b376b1a59997a5b81d8888604051612263929190614aff565b6000806006838154811061342a5761342a61483f565b906000526020600020906004020190506000600190505b60038201548110156134a5578160030181815481106134625761346261483f565b90600052602060002090601091828204019190066002029054906101000a900461ffff16836134919190614b13565b92508061349d81614903565b915050613441565b5050919050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526135809084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ba8565b505050565b600061359082614b30565b92915050565b60006135a183613585565b600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff871680855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690559051919250339161360a908690614b75565b604051908190038120907ff3a2b91552b535c273a48d8b7453c8b0b287e20e51d74121eb50d975dbaa506d90600090a4505050565b600067ffffffffffffffff8211156136bf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f3420626974730000000000000000000000000000000000000000000000000000606482015260840161062e565b5090565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526137219085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016134fe565b50505050565b6000805b8281101561390f578473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e8686858181106137985761379861483f565b905060200201356040518263ffffffff1660e01b81526004016137bd91815260200190565b60206040518083038186803b1580156137d557600080fd5b505afa1580156137e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380d9190614b91565b73ffffffffffffffffffffffffffffffffffffffff16141580156138ee575060045473ffffffffffffffffffffffffffffffffffffffff808716911663e336a1088686858181106138605761386061483f565b905060200201356040518263ffffffff1660e01b815260040161388591815260200190565b60206040518083038186803b15801561389d57600080fd5b505afa1580156138b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d59190614b91565b73ffffffffffffffffffffffffffffffffffffffff1614155b156138fd576000915050612e4b565b8061390781614903565b91505061372b565b506001949350505050565b6139248282611192565b61142757600061393383613585565b600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff871680855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559051919250339161399f908690614b75565b604051908190038120907fe0ca4f6d52d59033a91ab89e93c98f9acada14e0086d8b1038284f42e6d5325790600090a4505050565b6000826139e18584613c9a565b14949350505050565b600080858585604051602001613a0293929190614bae565b604051602081830303815290604052805190602001209050600081604051602001613a5991907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b604051602081830303815290604052805190602001209050613b216040518060400160405280600681526020017f5349474e45520000000000000000000000000000000000000000000000000000815250600183876040016020810190613ac09190614bfd565b604080516000815260208181018084529490945260ff909216908201528835606082015290880135608082015260a0016020604051602081039080840390855afa158015613b12573d6000803e3d6000fd5b50505060206040510351611192565b979650505050505050565b600063ffffffff8211156136bf5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161062e565b6000613c0a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d0e9092919063ffffffff16565b8051909150156135805780806020019051810190613c289190614c20565b6135805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161062e565b600081815b8451811015613d06576000858281518110613cbc57613cbc61483f565b60200260200101519050808311613ce25760008381526020829052604090209250613cf3565b600081815260208490526040902092505b5080613cfe81614903565b915050613c9f565b509392505050565b6060613d1d8484600085613d25565b949350505050565b606082471015613d9d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161062e565b73ffffffffffffffffffffffffffffffffffffffff85163b613e015760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e2a9190614b75565b60006040518083038185875af1925050503d8060008114613e67576040519150601f19603f3d011682016040523d82523d6000602084013e613e6c565b606091505b5091509150613b2182828660608315613e86575081612e4b565b825115613e965782518084602001fd5b8160405162461bcd60e51b815260040161062e9190614c42565b82805482825590600052602060002090600f01601090048101928215613f495791602002820160005b83821115613f1957835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613ed9565b8015613f475782816101000a81549061ffff0219169055600201602081600101049283019260010302613f19565b505b506136bf9291505b808211156136bf5760008155600101613f51565b600060208284031215613f7757600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613fe4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b63ffffffff8e811682528d811660208301528c811660408301528b811660608301528a8116608083015289811660a0830152881660c08201526101a0810167ffffffffffffffff881660e083015267ffffffffffffffff871661010083015267ffffffffffffffff861661012083015261ffff8516610140830152614071610160830185613fad565b826101808301529e9d5050505050505050505050505050565b60006020828403121561409c57600080fd5b813567ffffffffffffffff8111156140b357600080fd5b82016101208185031215612e4b57600080fd5b600080604083850312156140d957600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561415e5761415e6140e8565b604052919050565b600082601f83011261417757600080fd5b813567ffffffffffffffff811115614191576141916140e8565b6141c260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614117565b8181528460208386010111156141d757600080fd5b816020850160208301376000918101602001919091529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461133b57600080fd5b8035614221816141f4565b919050565b6000806040838503121561423957600080fd5b823567ffffffffffffffff81111561425057600080fd5b61425c85828601614166565b925050602083013561426d816141f4565b809150509250929050565b60006020828403121561428a57600080fd5b813567ffffffffffffffff8111156142a157600080fd5b613d1d84828501614166565b60008083601f8401126142bf57600080fd5b50813567ffffffffffffffff8111156142d757600080fd5b6020830191508360208260051b85010111156142f257600080fd5b9250929050565b60008060008060008060a0878903121561431257600080fd5b86356006811061432157600080fd5b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff81111561435257600080fd5b61435e89828a016142ad565b979a9699509497509295939492505050565b6000806000806060858703121561438657600080fd5b84359350602085013567ffffffffffffffff8111156143a457600080fd5b6143b0878288016142ad565b90945092505060408501356143c4816141f4565b939692955090935050565b6000602082840312156143e157600080fd5b8135612e4b816141f4565b600080604083850312156143ff57600080fd5b823561440a816141f4565b9150602083013561426d816141f4565b600067ffffffffffffffff821115614434576144346140e8565b5060051b60200190565b600080600080600080600060a0888a03121561445957600080fd5b8735965067ffffffffffffffff6020890135111561447657600080fd5b6144868960208a01358a016142ad565b909650945067ffffffffffffffff604089013511156144a457600080fd5b6144b48960408a01358a016142ad565b909450925067ffffffffffffffff606089013511156144d257600080fd5b6060880135880189601f8201126144e857600080fd5b6144fa6144f5823561441a565b614117565b81358082526020808301929160051b8401018c101561451857600080fd5b602083015b6020843560051b8501018110156145c85767ffffffffffffffff8135111561454457600080fd5b803584018d603f82011261455757600080fd5b6145676144f5602083013561441a565b80602083013582526020820191508f6040602085013560051b850101111561458e57600080fd5b604083015b6040602085013560051b8501018110156145b7578035835260209283019201614593565b50855250506020928301920161451d565b5093506145da91505060808901614216565b905092959891949750929550565b6000806000604084860312156145fd57600080fd5b83359250602084013567ffffffffffffffff81111561461b57600080fd5b614627868287016142ad565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b8181101561467257835163ffffffff1683529284019291840191600101614650565b50909695505050505050565b60008060008084860360a081121561469557600080fd5b85359450602086013567ffffffffffffffff8111156146b357600080fd5b6146bf888289016142ad565b90955093505060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0820112156146f557600080fd5b509295919450926040019150565b60005b8381101561471e578181015183820152602001614706565b838111156137215750506000910152565b60008151808452614747816020860160208601614703565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061478c604083018561472f565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b6000602082840312156147c357600080fd5b813563ffffffff81168114612e4b57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261480c57600080fd5b83018035915067ffffffffffffffff82111561482757600080fd5b6020019150600581901b36038213156142f257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561488057600080fd5b813561ffff81168114612e4b57600080fd5b6000602082840312156148a457600080fd5b813567ffffffffffffffff81168114612e4b57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156148fe576148fe6148bc565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614935576149356148bc565b5060010190565b600067ffffffffffffffff80831681851680830382111561495f5761495f6148bc565b01949350505050565b600067ffffffffffffffff8083168185168183048111821515161561498f5761498f6148bc565b02949350505050565b600067ffffffffffffffff838116908316818110156149b9576149b96148bc565b039392505050565b600063ffffffff838116908316818110156149b9576149b96148bc565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a1657614a166148bc565b500290565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614a4d57600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000614a7e604083018587614a1b565b9050826020830152949350505050565b600082614ac4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015614adb57614adb6148bc565b500390565b600063ffffffff80831681851680830382111561495f5761495f6148bc565b602081526000613d1d602083018486614a1b565b600061ffff80831681851680830382111561495f5761495f6148bc565b80516020808301519190811015614b6f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b60008251614b87818460208701614703565b9190910192915050565b600060208284031215614ba357600080fd5b8151612e4b816141f4565b83815260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614be057600080fd5b8260051b8085602085013760009201602001918252509392505050565b600060208284031215614c0f57600080fd5b813560ff81168114612e4b57600080fd5b600060208284031215614c3257600080fd5b81518015158114612e4b57600080fd5b602081526000612e4b602083018461472f56fea2646970667358221220f9eac0a55129f604e321f1231ba2be192a476642b1e1a93798e941dd97c042e964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchQuery(uint256,uint256[])": {
        "params": {
          "gameId": "Game id",
          "roosterIds": "List of rooster ids"
        }
      },
      "claimRefund(uint256,uint256[],address)": {
        "params": {
          "gameId": "Game id",
          "recipient": "Recipient address",
          "roosterIds": "List of roosters registered"
        },
        "returns": {
          "amount": "Amount claimed"
        }
      },
      "claimReward(uint256,uint256[],uint32[],bytes32[][],address)": {
        "params": {
          "gameId": "Game id",
          "rankings": "List of rankings",
          "roosterIds": "List of rooster ids"
        },
        "returns": {
          "amount": "Total USDC rewarded",
          "fee": "Fee in USDC"
        }
      },
      "createGame((uint32,uint32,uint32,uint32,uint32,uint32,uint64,uint16,uint16[]))": {
        "params": {
          "game": "CreateGameParam new game info"
        },
        "returns": {
          "gameId": "uint256"
        }
      },
      "getDistributionsSum(uint256)": {
        "params": {
          "gameId": "Game id"
        },
        "returns": {
          "sum": "uint16"
        }
      },
      "register(uint256,uint256[],(bytes32,bytes32,uint8))": {
        "params": {
          "gameId": "Game id",
          "roosterIds": "List of roosters to register",
          "sig": "Signature for tournament qualification"
        },
        "returns": {
          "amount": "Total USDC paid"
        }
      },
      "setGame(uint8,uint256,uint256,bytes32,uint16[])": {
        "params": {
          "action": "Action enum",
          "distributions": "Distrubtion percentages to add.",
          "fundAmount": "Amount to fund in USDC",
          "gameId": "Game id",
          "rankingRoot": "Merkle root of ranking"
        }
      },
      "setProtocol(address,address)": {
        "params": {
          "scholarship_": "Scholarship contract address",
          "vault_": "Vault address"
        }
      },
      "totalGames()": {
        "returns": {
          "_0": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchQuery(uint256,uint256[])": {
        "notice": "Queries state of roosters in batch"
      },
      "claimRefund(uint256,uint256[],address)": {
        "notice": "Claims refund from cancelled tournament"
      },
      "claimReward(uint256,uint256[],uint32[],bytes32[][],address)": {
        "notice": "Claims reward from tournament prize pool"
      },
      "createGame((uint32,uint32,uint32,uint32,uint32,uint32,uint64,uint16,uint16[]))": {
        "notice": "Creates new game"
      },
      "getDistributionsSum(uint256)": {
        "notice": "Gets sum of distribution percentages"
      },
      "register(uint256,uint256[],(bytes32,bytes32,uint8))": {
        "notice": "Registers for the tournament game"
      },
      "setGame(uint8,uint256,uint256,bytes32,uint16[])": {
        "notice": "Sets state of game"
      },
      "setProtocol(address,address)": {
        "notice": "Sets addresses"
      },
      "totalGames()": {
        "notice": "Returns total `games` created"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17047,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17049,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17051,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17057,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15576,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "scholarship",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Scholarship)13655"
      },
      {
        "astId": 15578,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "vault",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 15582,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "games",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Game)15432_storage)dyn_storage"
      },
      {
        "astId": 15588,
        "contract": "contracts/tournament/Tournament.sol:Tournament",
        "label": "roosters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint32))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)15432_storage)dyn_storage": {
        "base": "t_struct(Game)15432_storage",
        "encoding": "dynamic_array",
        "label": "struct ITournament.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Scholarship)13655": {
        "encoding": "inplace",
        "label": "contract Scholarship",
        "numberOfBytes": "20"
      },
      "t_enum(State)15464": {
        "encoding": "inplace",
        "label": "enum ITournament.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint32)"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Game)15432_storage": {
        "encoding": "inplace",
        "label": "struct ITournament.Game",
        "members": [
          {
            "astId": 15403,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "registrationStartTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15405,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "registrationEndTimestamp",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15407,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "tournamentStartTimestamp",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15409,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "tournamentEndTimestamp",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15411,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "minRoosters",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15413,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "maxRoosters",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15415,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "roosters",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15417,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "entranceFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 15419,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "balance",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 15421,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "prizePool",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 15423,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "fee",
            "offset": 24,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 15426,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "state",
            "offset": 26,
            "slot": "1",
            "type": "t_enum(State)15464"
          },
          {
            "astId": 15428,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "rankingRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 15431,
            "contract": "contracts/tournament/Tournament.sol:Tournament",
            "label": "distributions",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint16)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}