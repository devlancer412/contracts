{
  "address": "0x5304651fbC23801177c81734d2be6C669e8f9e82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "usdc_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "inititalTokenId_",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaticCashback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "MaticCashbackFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaticReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaticWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "supply",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "cap",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "openingTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "closingTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashbackPerEgg",
          "type": "uint256"
        }
      ],
      "name": "NewPresale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24[]",
          "name": "tokenIds",
          "type": "uint24[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "buyEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashbackPerEgg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closingTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchasedAmount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "openingTime_",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "closingTime_",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "supply_",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "cap_",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cashbackPerEgg_",
          "type": "uint256"
        }
      ],
      "name": "setPresale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sold",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawMatic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0fa4395fa10d15823b0b77c58272e700ce089d17a435217d2cacf6f66ecedf03",
  "receipt": {
    "to": null,
    "from": "0x374180e6E1b14454C18e44b635A95e7d37160570",
    "contractAddress": "0x5304651fbC23801177c81734d2be6C669e8f9e82",
    "transactionIndex": 21,
    "gasUsed": "2622062",
    "logsBloom": "0x
    "blockHash": "0x3cad6126e60a4e3764b741e6201e43a2e7d3315eca0c5277517ff25fa7839f29",
    "transactionHash": "0x0fa4395fa10d15823b0b77c58272e700ce089d17a435217d2cacf6f66ecedf03",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 10408220,
        "transactionHash": "0x0fa4395fa10d15823b0b77c58272e700ce089d17a435217d2cacf6f66ecedf03",
        "address": "0x5304651fbC23801177c81734d2be6C669e8f9e82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000374180e6e1b14454c18e44b635a95e7d37160570"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x3cad6126e60a4e3764b741e6201e43a2e7d3315eca0c5277517ff25fa7839f29"
      }
    ],
    "blockNumber": 10408220,
    "cumulativeGasUsed": "5306765",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF54F493A2fE3D03bDB7474ddb5AA103eedE8A81C",
    "0x18bF4D2Da2A03134834107F7cCF2cEA2d6bdbbCc",
    1,
    "https://mds-roosterwars-backend-test.azurewebsites.net/egg/metadata/"
  ],
  "numDeployments": 4,
  "solcInputHash": "73545f6ca06f03b61659eb24ad9d44ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"inititalTokenId_\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaticCashback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"MaticCashbackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaticReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaticWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"supply\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"cap\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"closingTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashbackPerEgg\",\"type\":\"uint256\"}],\"name\":\"NewPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24[]\",\"name\":\"tokenIds\",\"type\":\"uint24[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashbackPerEgg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedAmount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"openingTime_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"closingTime_\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"supply_\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"cap_\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cashbackPerEgg_\",\"type\":\"uint256\"}],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Egg.sol\":\"RoosterEgg\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Egg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n//\\n\\n//solhint-disable avoid-low-level-calls\\ncontract RoosterEgg is ERC721, ERC721Burnable, Ownable, Pausable {\\n  using Strings for uint256;\\n\\n  // Presale time in UNIX\\n  uint32 public openingTime;\\n  uint32 public closingTime;\\n\\n  //Max supply for round\\n  uint24 public supply;\\n\\n  //Tokens sold for round\\n  uint24 public sold;\\n\\n  //Indivisual cap for round\\n  uint24 public cap;\\n\\n  //Current tokenID count\\n  uint24 private _tokenIdCounter;\\n\\n  //The price per egg (1egg = ? wei)\\n  uint256 public price;\\n\\n  //Matic cashback per egg\\n  uint256 public cashbackPerEgg;\\n\\n  //USDC address\\n  IERC20 public immutable usdc;\\n\\n  // Vault wallet address\\n  address public immutable wallet;\\n\\n  //Base URI\\n  string public baseURI;\\n\\n  //user => amount\\n  mapping(address => uint8) public purchasedAmount;\\n\\n  event Purchase(address indexed purchaser, uint8 amount, uint256 value);\\n  event NewPresale(\\n    uint24 supply,\\n    uint24 cap,\\n    uint32 openingTime,\\n    uint32 closingTime,\\n    uint256 price,\\n    uint256 cashbackPerEgg\\n  );\\n  event MaticReceived(address user, uint256 amount);\\n  event MaticWithdrawn(uint256 amount);\\n  event MaticCashback(address user, uint256 amount);\\n  event MaticCashbackFailed(address indexed user, uint256 balance);\\n\\n  constructor(\\n    IERC20 usdc_,\\n    address wallet_,\\n    uint24 inititalTokenId_,\\n    string memory baseURI_\\n  ) ERC721(\\\"RoosterEgg\\\", \\\"ROOSTER_EGG\\\") {\\n    usdc = usdc_;\\n    wallet = wallet_;\\n    baseURI = baseURI_;\\n    _tokenIdCounter = inititalTokenId_;\\n  }\\n\\n  receive() external payable {\\n    emit MaticReceived(msg.sender, msg.value);\\n  }\\n\\n  function isOpen() public view returns (bool) {\\n    return block.timestamp >= openingTime && block.timestamp <= closingTime;\\n  }\\n\\n  function getTime() external view returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(bytes(baseURI).length > 0, \\\"BaseURI not set\\\");\\n    require(_exists(tokenId), \\\"Query for nonexistent token\\\");\\n    return string(abi.encodePacked(baseURI, tokenId.toString()));\\n  }\\n\\n  function _baseURI() internal view override returns (string memory) {\\n    return baseURI;\\n  }\\n\\n  function buyEggs(uint8 amount) external {\\n    address purchaser = _msgSender();\\n    uint256 value = price * amount;\\n    uint256 cashbackAmount = cashbackPerEgg * amount;\\n\\n    //Checks\\n    _preValidatePurchase(purchaser, amount);\\n\\n    //Effects\\n    sold += amount;\\n    purchasedAmount[purchaser] += amount;\\n\\n    //Interactions\\n    usdc.transferFrom(purchaser, wallet, value);\\n    _mintEggs(purchaser, amount);\\n\\n    (bool success, ) = payable(purchaser).call{value: cashbackAmount}(\\\"\\\");\\n    if (success) {\\n      emit MaticCashback(purchaser, cashbackAmount);\\n    } else {\\n      emit MaticCashbackFailed(purchaser, address(this).balance);\\n    }\\n\\n    emit Purchase(purchaser, amount, value);\\n  }\\n\\n  function burnBatch(uint24[] calldata tokenIds) external {\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      burn(tokenIds[i]);\\n    }\\n  }\\n\\n  function _preValidatePurchase(address purchaser, uint8 amount) private view whenNotPaused {\\n    require(isOpen(), \\\"Not open\\\");\\n    require(sold + amount <= supply, \\\"Exceeds supply\\\");\\n    require(amount + purchasedAmount[purchaser] <= cap, \\\"Exceeds cap\\\");\\n  }\\n\\n  function _mintEggs(address to, uint256 amount) private {\\n    uint24 newtokenId = _tokenIdCounter;\\n\\n    for (uint256 i = 0; i < amount; i++) {\\n      _safeMint(to, newtokenId++);\\n    }\\n\\n    _tokenIdCounter = newtokenId;\\n  }\\n\\n  /* Only owner functions */\\n\\n  function setPresale(\\n    uint32 openingTime_,\\n    uint32 closingTime_,\\n    uint24 supply_,\\n    uint24 cap_,\\n    uint256 price_,\\n    uint256 cashbackPerEgg_\\n  ) external onlyOwner {\\n    require(!isOpen() || paused(), \\\"Cannot set now\\\");\\n    if (!isOpen()) {\\n      require(closingTime_ >= openingTime_, \\\"Closing time < Opening time\\\");\\n      require(openingTime_ > block.timestamp, \\\"Invalid opening time\\\");\\n      openingTime = openingTime_;\\n    }\\n\\n    supply = supply_;\\n    cap = cap_;\\n    price = price_;\\n    closingTime = closingTime_;\\n    cashbackPerEgg = cashbackPerEgg_;\\n\\n    emit NewPresale(supply_, cap_, openingTime_, closingTime_, price_, cashbackPerEgg_);\\n  }\\n\\n  function mintEggs(address to, uint256 amount) external onlyOwner {\\n    _mintEggs(to, amount);\\n  }\\n\\n  function setBaseURI(string memory baseURI_) external onlyOwner {\\n    baseURI = baseURI_;\\n  }\\n\\n  function withdrawMatic(uint256 amount) external {\\n    address user = msg.sender;\\n    require(user == owner() || user == wallet, \\\"Invalid access\\\");\\n    (bool success, ) = payable(wallet).call{value: amount}(\\\"\\\");\\n    require(success, \\\"Withdraw failed\\\");\\n    emit MaticWithdrawn(amount);\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0x475449a6ddb5b3eb43dd177d3a899a3d2a53cd1a4d94a14150e2d01d26abe6f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002edc38038062002edc83398101604081905262000034916200024c565b604080518082018252600a815269526f6f7374657245676760b01b60208083019182528351808501909452600b84526a524f4f535445525f45474760a81b908401528151919291620000899160009162000177565b5080516200009f90600190602084019062000177565b505050620000bc620000b66200012160201b60201c565b62000125565b6006805460ff60a01b191690556001600160a01b03808516608052831660a0528051620000f190600a90602084019062000177565b50506007805462ffffff90921666010000000000000262ffffff60301b1990921691909117905550620003ae9050565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001859062000371565b90600052602060002090601f016020900481019282620001a95760008555620001f4565b82601f10620001c457805160ff1916838001178555620001f4565b82800160010185558215620001f4579182015b82811115620001f4578251825591602001919060010190620001d7565b506200020292915062000206565b5090565b5b8082111562000202576000815560010162000207565b6001600160a01b03811681146200023357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200026357600080fd5b845162000270816200021d565b8094505060208086015162000285816200021d565b604087015190945062ffffff811681146200029f57600080fd5b60608701519093506001600160401b0380821115620002bd57600080fd5b818801915088601f830112620002d257600080fd5b815181811115620002e757620002e762000236565b604051601f8201601f19908116603f0116810190838211818310171562000312576200031262000236565b816040528281528b868487010111156200032b57600080fd5b600093505b828410156200034f578484018601518185018701529285019262000330565b82841115620003615760008684830101525b989b979a50959850505050505050565b600181811c908216806200038657607f821691505b60208210811415620003a857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051612aec620003f06000396000818161052a01528181610c910152818161125101526112c60152600081816103f10152610cc00152612aec6000f3fe6080604052600436106102345760003560e01c806355f804b31161012e578063a22cb465116100ab578063e985e9c51161006f578063e985e9c514610718578063ec0d16a114610761578063f2fde38b14610781578063f7f8bae2146107a1578063f924a57e146107c157600080fd5b8063a22cb46514610674578063b7a8807c14610694578063b88d4fde146106b8578063c87b56dd146106d8578063e8a379b2146106f857600080fd5b8063715018a6116100f2578063715018a6146106015780638456cb59146106165780638da5cb5b1461062b57806395d89b4114610649578063a035b1fe1461065e57600080fd5b806355f804b31461055f5780635c975abb1461057f5780636352211e1461059e5780636c0360eb146105be57806370a08231146105d357600080fd5b80633e413bee116101bc57806346852d301161018057806346852d30146104aa57806347535d7b146104ca5780634b6753bc146104df578063521eb27314610518578063557ed1ba1461054c57600080fd5b80633e413bee146103df5780633f4ba83a1461041357806342842e0e1461042857806342966c681461044857806344c4dcc11461046857600080fd5b8063081812fc11610203578063081812fc14610322578063095ea7b31461035a57806323b872dd1461037c578063291f05221461039c578063355274ea146103bc57600080fd5b806301ffc9a71461027857806302c7e7af146102ad578063047fc9aa146102dd57806306fdde031461030057600080fd5b3661027357604080513381523460208201527fecb865883ec69b0d00ee1bed3b735ecf8dec2e91e6ce400100c5e3fad740abb4910160405180910390a1005b600080fd5b34801561028457600080fd5b506102986102933660046122d9565b6107d7565b60405190151581526020015b60405180910390f35b3480156102b957600080fd5b506007546102c99062ffffff1681565b60405162ffffff90911681526020016102a4565b3480156102e957600080fd5b506006546102c990600160e81b900462ffffff1681565b34801561030c57600080fd5b50610315610829565b6040516102a49190612355565b34801561032e57600080fd5b5061034261033d366004612368565b6108bb565b6040516001600160a01b0390911681526020016102a4565b34801561036657600080fd5b5061037a61037536600461239d565b610955565b005b34801561038857600080fd5b5061037a6103973660046123c7565b610a6b565b3480156103a857600080fd5b5061037a6103b7366004612403565b610a9d565b3480156103c857600080fd5b506007546102c9906301000000900462ffffff1681565b3480156103eb57600080fd5b506103427f000000000000000000000000000000000000000000000000000000000000000081565b34801561041f57600080fd5b5061037a610aee565b34801561043457600080fd5b5061037a6104433660046123c7565b610b22565b34801561045457600080fd5b5061037a610463366004612368565b610b3d565b34801561047457600080fd5b50610498610483366004612478565b600b6020526000908152604090205460ff1681565b60405160ff90911681526020016102a4565b3480156104b657600080fd5b5061037a6104c5366004612493565b610bb7565b3480156104d657600080fd5b50610298610e7f565b3480156104eb57600080fd5b5060065461050390600160c81b900463ffffffff1681565b60405163ffffffff90911681526020016102a4565b34801561052457600080fd5b506103427f000000000000000000000000000000000000000000000000000000000000000081565b34801561055857600080fd5b5042610503565b34801561056b57600080fd5b5061037a61057a366004612542565b610eb5565b34801561058b57600080fd5b50600654600160a01b900460ff16610298565b3480156105aa57600080fd5b506103426105b9366004612368565b610ef6565b3480156105ca57600080fd5b50610315610f6d565b3480156105df57600080fd5b506105f36105ee366004612478565b610ffb565b6040519081526020016102a4565b34801561060d57600080fd5b5061037a611082565b34801561062257600080fd5b5061037a6110b6565b34801561063757600080fd5b506006546001600160a01b0316610342565b34801561065557600080fd5b506103156110e8565b34801561066a57600080fd5b506105f360085481565b34801561068057600080fd5b5061037a61068f366004612599565b6110f7565b3480156106a057600080fd5b5060065461050390600160a81b900463ffffffff1681565b3480156106c457600080fd5b5061037a6106d33660046125d0565b611102565b3480156106e457600080fd5b506103156106f3366004612368565b61113a565b34801561070457600080fd5b5061037a610713366004612368565b611222565b34801561072457600080fd5b5061029861073336600461264c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561076d57600080fd5b5061037a61077c36600461239d565b6113af565b34801561078d57600080fd5b5061037a61079c366004612478565b6113e3565b3480156107ad57600080fd5b5061037a6107bc3660046126a6565b61147b565b3480156107cd57600080fd5b506105f360095481565b60006001600160e01b031982166380ac58cd60e01b148061080857506001600160e01b03198216635b5e139f60e01b145b8061082357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546108389061270c565b80601f01602080910402602001604051908101604052809291908181526020018280546108649061270c565b80156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109395760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061096082610ef6565b9050806001600160a01b0316836001600160a01b031614156109ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610930565b336001600160a01b03821614806109ea57506109ea8133610733565b610a5c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610930565b610a66838361169b565b505050565b610a76335b82611709565b610a925760405162461bcd60e51b815260040161093090612747565b610a66838383611800565b60005b81811015610a6657610adc838383818110610abd57610abd612798565b9050602002016020810190610ad291906127ae565b62ffffff16610b3d565b80610ae6816127df565b915050610aa0565b6006546001600160a01b03163314610b185760405162461bcd60e51b8152600401610930906127fa565b610b2061199c565b565b610a6683838360405180602001604052806000815250611102565b610b4633610a70565b610bab5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610930565b610bb481611a39565b50565b6008543390600090610bcd9060ff85169061282f565b905060008360ff16600954610be2919061282f565b9050610bee8385611ad4565b6007805460ff86169190600090610c0b90849062ffffff1661284e565b825462ffffff9182166101009390930a9283029190920219909116179055506001600160a01b0383166000908152600b602052604081208054869290610c5590849060ff16612875565b825460ff9182166101009390930a9283029190920219909116179055506040516323b872dd60e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401602060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c919061289a565b50610d4a838560ff16611c3e565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d97576040519150601f19603f3d011682016040523d82523d6000602084013e610d9c565b606091505b505090508015610ded57604080516001600160a01b0386168152602081018490527f9db06889236e0d3ccbb25b6d3235472c344c7c6344f6a2c4d439baf64558adf7910160405180910390a1610e31565b836001600160a01b03167faa7c8b793f177361ae906f241e79303b4257976b38d8139e2f1f4a54704a7a8547604051610e2891815260200190565b60405180910390a25b6040805160ff87168152602081018590526001600160a01b038616917f86ca388bddbd052fddab95414057fccc7d306c3af44b103dad7efab306b06ee0910160405180910390a25050505050565b600654600090600160a81b900463ffffffff164210801590610eb05750600654600160c81b900463ffffffff164211155b905090565b6006546001600160a01b03163314610edf5760405162461bcd60e51b8152600401610930906127fa565b8051610ef290600a90602084019061222a565b5050565b6000818152600260205260408120546001600160a01b0316806108235760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610930565b600a8054610f7a9061270c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa69061270c565b8015610ff35780601f10610fc857610100808354040283529160200191610ff3565b820191906000526020600020905b815481529060010190602001808311610fd657829003601f168201915b505050505081565b60006001600160a01b0382166110665760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610930565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146110ac5760405162461bcd60e51b8152600401610930906127fa565b610b206000611cb4565b6006546001600160a01b031633146110e05760405162461bcd60e51b8152600401610930906127fa565b610b20611d06565b6060600180546108389061270c565b610ef2338383611d8e565b61110c3383611709565b6111285760405162461bcd60e51b815260040161093090612747565b61113484848484611e5d565b50505050565b60606000600a805461114b9061270c565b90501161118c5760405162461bcd60e51b815260206004820152600f60248201526e10985cd9555492481b9bdd081cd95d608a1b6044820152606401610930565b6000828152600260205260409020546001600160a01b03166111f05760405162461bcd60e51b815260206004820152601b60248201527f517565727920666f72206e6f6e6578697374656e7420746f6b656e00000000006044820152606401610930565b600a6111fb83611e90565b60405160200161120c9291906128d3565b6040516020818303038152906040529050919050565b336112356006546001600160a01b031690565b6001600160a01b0316816001600160a01b0316148061128557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b6112c25760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642061636365737360901b6044820152606401610930565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360405160006040518083038185875af1925050503d806000811461132f576040519150601f19603f3d011682016040523d82523d6000602084013e611334565b606091505b50509050806113775760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610930565b6040518381527f5285e88bb974363c82f2ddb2e8a509e21f6ec0034e56f1f94f2adc306d1d55839060200160405180910390a1505050565b6006546001600160a01b031633146113d95760405162461bcd60e51b8152600401610930906127fa565b610ef28282611c3e565b6006546001600160a01b0316331461140d5760405162461bcd60e51b8152600401610930906127fa565b6001600160a01b0381166114725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610930565b610bb481611cb4565b6006546001600160a01b031633146114a55760405162461bcd60e51b8152600401610930906127fa565b6114ad610e7f565b15806114c25750600654600160a01b900460ff165b6114ff5760405162461bcd60e51b815260206004820152600e60248201526d43616e6e6f7420736574206e6f7760901b6044820152606401610930565b611507610e7f565b6115d2578563ffffffff168563ffffffff1610156115675760405162461bcd60e51b815260206004820152601b60248201527f436c6f73696e672074696d65203c204f70656e696e672074696d6500000000006044820152606401610930565b428663ffffffff16116115b35760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206f70656e696e672074696d6560601b6044820152606401610930565b6006805463ffffffff60a81b1916600160a81b63ffffffff8916021790555b600680546007805465ffffff0000001916630100000062ffffff8881169182029290921790925560088690556001600160c81b03909216600160e81b92881692830263ffffffff60c81b191617600160c81b63ffffffff8a811691820292909217909455600985905560408051938452602084019290925289169082015260608101919091526080810183905260a081018290527ff50edff2299e0c1c34da34ad84c64df54150e833ef534a802ef8c2dcdbaec53c9060c00160405180910390a1505050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906116d082610ef6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166117825760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610930565b600061178d83610ef6565b9050806001600160a01b0316846001600160a01b031614806117c85750836001600160a01b03166117bd846108bb565b6001600160a01b0316145b806117f857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661181382610ef6565b6001600160a01b0316146118775760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610930565b6001600160a01b0382166118d95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610930565b6118e460008261169b565b6001600160a01b038316600090815260036020526040812080546001929061190d90849061297a565b90915550506001600160a01b038216600090815260036020526040812080546001929061193b908490612991565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600654600160a01b900460ff166119ec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610930565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611a4482610ef6565b9050611a5160008361169b565b6001600160a01b0381166000908152600360205260408120805460019290611a7a90849061297a565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600654600160a01b900460ff1615611b215760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610930565b611b29610e7f565b611b605760405162461bcd60e51b81526020600482015260086024820152672737ba1037b832b760c11b6044820152606401610930565b60065460075462ffffff600160e81b909204821691611b849160ff8516911661284e565b62ffffff161115611bc85760405162461bcd60e51b815260206004820152600e60248201526d4578636565647320737570706c7960901b6044820152606401610930565b6007546001600160a01b0383166000908152600b6020526040902054630100000090910462ffffff1690611bff9060ff1683612875565b60ff161115610ef25760405162461bcd60e51b815260206004820152600b60248201526a045786365656473206361760ac1b6044820152606401610930565b6007546601000000000000900462ffffff1660005b82811015611c8757611c758483611c69816129a9565b945062ffffff16611f8e565b80611c7f816127df565b915050611c53565b506007805462ffffff90921666010000000000000268ffffff000000000000199092169190911790555050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600160a01b900460ff1615611d535760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610930565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a1c3390565b816001600160a01b0316836001600160a01b03161415611df05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610930565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e68848484611800565b611e7484848484611fa8565b6111345760405162461bcd60e51b8152600401610930906129cc565b606081611eb45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ede5780611ec8816127df565b9150611ed79050600a83612a34565b9150611eb8565b60008167ffffffffffffffff811115611ef957611ef96124b6565b6040519080825280601f01601f191660200182016040528015611f23576020820181803683370190505b5090505b84156117f857611f3860018361297a565b9150611f45600a86612a48565b611f50906030612991565b60f81b818381518110611f6557611f65612798565b60200101906001600160f81b031916908160001a905350611f87600a86612a34565b9450611f27565b610ef28282604051806020016040528060008152506120b5565b60006001600160a01b0384163b156120aa57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fec903390899088908890600401612a5c565b602060405180830381600087803b15801561200657600080fd5b505af1925050508015612036575060408051601f3d908101601f1916820190925261203391810190612a99565b60015b612090573d808015612064576040519150601f19603f3d011682016040523d82523d6000602084013e612069565b606091505b5080516120885760405162461bcd60e51b8152600401610930906129cc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117f8565b506001949350505050565b6120bf83836120e8565b6120cc6000848484611fa8565b610a665760405162461bcd60e51b8152600401610930906129cc565b6001600160a01b03821661213e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610930565b6000818152600260205260409020546001600160a01b0316156121a35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610930565b6001600160a01b03821660009081526003602052604081208054600192906121cc908490612991565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546122369061270c565b90600052602060002090601f016020900481019282612258576000855561229e565b82601f1061227157805160ff191683800117855561229e565b8280016001018555821561229e579182015b8281111561229e578251825591602001919060010190612283565b506122aa9291506122ae565b5090565b5b808211156122aa57600081556001016122af565b6001600160e01b031981168114610bb457600080fd5b6000602082840312156122eb57600080fd5b81356122f6816122c3565b9392505050565b60005b83811015612318578181015183820152602001612300565b838111156111345750506000910152565b600081518084526123418160208601602086016122fd565b601f01601f19169290920160200192915050565b6020815260006122f66020830184612329565b60006020828403121561237a57600080fd5b5035919050565b80356001600160a01b038116811461239857600080fd5b919050565b600080604083850312156123b057600080fd5b6123b983612381565b946020939093013593505050565b6000806000606084860312156123dc57600080fd5b6123e584612381565b92506123f360208501612381565b9150604084013590509250925092565b6000806020838503121561241657600080fd5b823567ffffffffffffffff8082111561242e57600080fd5b818501915085601f83011261244257600080fd5b81358181111561245157600080fd5b8660208260051b850101111561246657600080fd5b60209290920196919550909350505050565b60006020828403121561248a57600080fd5b6122f682612381565b6000602082840312156124a557600080fd5b813560ff811681146122f657600080fd5b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156124e7576124e76124b6565b604051601f8501601f19908116603f0116810190828211818310171561250f5761250f6124b6565b8160405280935085815286868601111561252857600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561255457600080fd5b813567ffffffffffffffff81111561256b57600080fd5b8201601f8101841361257c57600080fd5b6117f8848235602084016124cc565b8015158114610bb457600080fd5b600080604083850312156125ac57600080fd5b6125b583612381565b915060208301356125c58161258b565b809150509250929050565b600080600080608085870312156125e657600080fd5b6125ef85612381565b93506125fd60208601612381565b925060408501359150606085013567ffffffffffffffff81111561262057600080fd5b8501601f8101871361263157600080fd5b612640878235602084016124cc565b91505092959194509250565b6000806040838503121561265f57600080fd5b61266883612381565b915061267660208401612381565b90509250929050565b803563ffffffff8116811461239857600080fd5b803562ffffff8116811461239857600080fd5b60008060008060008060c087890312156126bf57600080fd5b6126c88761267f565b95506126d66020880161267f565b94506126e460408801612693565b93506126f260608801612693565b92506080870135915060a087013590509295509295509295565b600181811c9082168061272057607f821691505b6020821081141561274157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156127c057600080fd5b6122f682612693565b634e487b7160e01b600052601160045260246000fd5b60006000198214156127f3576127f36127c9565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000816000190483118215151615612849576128496127c9565b500290565b600062ffffff80831681851680830382111561286c5761286c6127c9565b01949350505050565b600060ff821660ff84168060ff03821115612892576128926127c9565b019392505050565b6000602082840312156128ac57600080fd5b81516122f68161258b565b600081516128c98185602086016122fd565b9290920192915050565b600080845481600182811c9150808316806128ef57607f831692505b602080841082141561290f57634e487b7160e01b86526022600452602486fd5b818015612923576001811461293457612961565b60ff19861689528489019650612961565b60008b81526020902060005b868110156129595781548b820152908501908301612940565b505084890196505b50505050505061297181856128b7565b95945050505050565b60008282101561298c5761298c6127c9565b500390565b600082198211156129a4576129a46127c9565b500190565b600062ffffff808316818114156129c2576129c26127c9565b6001019392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612a4357612a43612a1e565b500490565b600082612a5757612a57612a1e565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a8f90830184612329565b9695505050505050565b600060208284031215612aab57600080fd5b81516122f6816122c356fea2646970667358221220c3cfb9e81a7e00b5bdc572ee9851c4996cc923e7f62e8266c729956f096a29df64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c806355f804b31161012e578063a22cb465116100ab578063e985e9c51161006f578063e985e9c514610718578063ec0d16a114610761578063f2fde38b14610781578063f7f8bae2146107a1578063f924a57e146107c157600080fd5b8063a22cb46514610674578063b7a8807c14610694578063b88d4fde146106b8578063c87b56dd146106d8578063e8a379b2146106f857600080fd5b8063715018a6116100f2578063715018a6146106015780638456cb59146106165780638da5cb5b1461062b57806395d89b4114610649578063a035b1fe1461065e57600080fd5b806355f804b31461055f5780635c975abb1461057f5780636352211e1461059e5780636c0360eb146105be57806370a08231146105d357600080fd5b80633e413bee116101bc57806346852d301161018057806346852d30146104aa57806347535d7b146104ca5780634b6753bc146104df578063521eb27314610518578063557ed1ba1461054c57600080fd5b80633e413bee146103df5780633f4ba83a1461041357806342842e0e1461042857806342966c681461044857806344c4dcc11461046857600080fd5b8063081812fc11610203578063081812fc14610322578063095ea7b31461035a57806323b872dd1461037c578063291f05221461039c578063355274ea146103bc57600080fd5b806301ffc9a71461027857806302c7e7af146102ad578063047fc9aa146102dd57806306fdde031461030057600080fd5b3661027357604080513381523460208201527fecb865883ec69b0d00ee1bed3b735ecf8dec2e91e6ce400100c5e3fad740abb4910160405180910390a1005b600080fd5b34801561028457600080fd5b506102986102933660046122d9565b6107d7565b60405190151581526020015b60405180910390f35b3480156102b957600080fd5b506007546102c99062ffffff1681565b60405162ffffff90911681526020016102a4565b3480156102e957600080fd5b506006546102c990600160e81b900462ffffff1681565b34801561030c57600080fd5b50610315610829565b6040516102a49190612355565b34801561032e57600080fd5b5061034261033d366004612368565b6108bb565b6040516001600160a01b0390911681526020016102a4565b34801561036657600080fd5b5061037a61037536600461239d565b610955565b005b34801561038857600080fd5b5061037a6103973660046123c7565b610a6b565b3480156103a857600080fd5b5061037a6103b7366004612403565b610a9d565b3480156103c857600080fd5b506007546102c9906301000000900462ffffff1681565b3480156103eb57600080fd5b506103427f000000000000000000000000000000000000000000000000000000000000000081565b34801561041f57600080fd5b5061037a610aee565b34801561043457600080fd5b5061037a6104433660046123c7565b610b22565b34801561045457600080fd5b5061037a610463366004612368565b610b3d565b34801561047457600080fd5b50610498610483366004612478565b600b6020526000908152604090205460ff1681565b60405160ff90911681526020016102a4565b3480156104b657600080fd5b5061037a6104c5366004612493565b610bb7565b3480156104d657600080fd5b50610298610e7f565b3480156104eb57600080fd5b5060065461050390600160c81b900463ffffffff1681565b60405163ffffffff90911681526020016102a4565b34801561052457600080fd5b506103427f000000000000000000000000000000000000000000000000000000000000000081565b34801561055857600080fd5b5042610503565b34801561056b57600080fd5b5061037a61057a366004612542565b610eb5565b34801561058b57600080fd5b50600654600160a01b900460ff16610298565b3480156105aa57600080fd5b506103426105b9366004612368565b610ef6565b3480156105ca57600080fd5b50610315610f6d565b3480156105df57600080fd5b506105f36105ee366004612478565b610ffb565b6040519081526020016102a4565b34801561060d57600080fd5b5061037a611082565b34801561062257600080fd5b5061037a6110b6565b34801561063757600080fd5b506006546001600160a01b0316610342565b34801561065557600080fd5b506103156110e8565b34801561066a57600080fd5b506105f360085481565b34801561068057600080fd5b5061037a61068f366004612599565b6110f7565b3480156106a057600080fd5b5060065461050390600160a81b900463ffffffff1681565b3480156106c457600080fd5b5061037a6106d33660046125d0565b611102565b3480156106e457600080fd5b506103156106f3366004612368565b61113a565b34801561070457600080fd5b5061037a610713366004612368565b611222565b34801561072457600080fd5b5061029861073336600461264c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561076d57600080fd5b5061037a61077c36600461239d565b6113af565b34801561078d57600080fd5b5061037a61079c366004612478565b6113e3565b3480156107ad57600080fd5b5061037a6107bc3660046126a6565b61147b565b3480156107cd57600080fd5b506105f360095481565b60006001600160e01b031982166380ac58cd60e01b148061080857506001600160e01b03198216635b5e139f60e01b145b8061082357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546108389061270c565b80601f01602080910402602001604051908101604052809291908181526020018280546108649061270c565b80156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109395760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061096082610ef6565b9050806001600160a01b0316836001600160a01b031614156109ce5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610930565b336001600160a01b03821614806109ea57506109ea8133610733565b610a5c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610930565b610a66838361169b565b505050565b610a76335b82611709565b610a925760405162461bcd60e51b815260040161093090612747565b610a66838383611800565b60005b81811015610a6657610adc838383818110610abd57610abd612798565b9050602002016020810190610ad291906127ae565b62ffffff16610b3d565b80610ae6816127df565b915050610aa0565b6006546001600160a01b03163314610b185760405162461bcd60e51b8152600401610930906127fa565b610b2061199c565b565b610a6683838360405180602001604052806000815250611102565b610b4633610a70565b610bab5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610930565b610bb481611a39565b50565b6008543390600090610bcd9060ff85169061282f565b905060008360ff16600954610be2919061282f565b9050610bee8385611ad4565b6007805460ff86169190600090610c0b90849062ffffff1661284e565b825462ffffff9182166101009390930a9283029190920219909116179055506001600160a01b0383166000908152600b602052604081208054869290610c5590849060ff16612875565b825460ff9182166101009390930a9283029190920219909116179055506040516323b872dd60e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401602060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c919061289a565b50610d4a838560ff16611c3e565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d97576040519150601f19603f3d011682016040523d82523d6000602084013e610d9c565b606091505b505090508015610ded57604080516001600160a01b0386168152602081018490527f9db06889236e0d3ccbb25b6d3235472c344c7c6344f6a2c4d439baf64558adf7910160405180910390a1610e31565b836001600160a01b03167faa7c8b793f177361ae906f241e79303b4257976b38d8139e2f1f4a54704a7a8547604051610e2891815260200190565b60405180910390a25b6040805160ff87168152602081018590526001600160a01b038616917f86ca388bddbd052fddab95414057fccc7d306c3af44b103dad7efab306b06ee0910160405180910390a25050505050565b600654600090600160a81b900463ffffffff164210801590610eb05750600654600160c81b900463ffffffff164211155b905090565b6006546001600160a01b03163314610edf5760405162461bcd60e51b8152600401610930906127fa565b8051610ef290600a90602084019061222a565b5050565b6000818152600260205260408120546001600160a01b0316806108235760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610930565b600a8054610f7a9061270c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa69061270c565b8015610ff35780601f10610fc857610100808354040283529160200191610ff3565b820191906000526020600020905b815481529060010190602001808311610fd657829003601f168201915b505050505081565b60006001600160a01b0382166110665760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610930565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146110ac5760405162461bcd60e51b8152600401610930906127fa565b610b206000611cb4565b6006546001600160a01b031633146110e05760405162461bcd60e51b8152600401610930906127fa565b610b20611d06565b6060600180546108389061270c565b610ef2338383611d8e565b61110c3383611709565b6111285760405162461bcd60e51b815260040161093090612747565b61113484848484611e5d565b50505050565b60606000600a805461114b9061270c565b90501161118c5760405162461bcd60e51b815260206004820152600f60248201526e10985cd9555492481b9bdd081cd95d608a1b6044820152606401610930565b6000828152600260205260409020546001600160a01b03166111f05760405162461bcd60e51b815260206004820152601b60248201527f517565727920666f72206e6f6e6578697374656e7420746f6b656e00000000006044820152606401610930565b600a6111fb83611e90565b60405160200161120c9291906128d3565b6040516020818303038152906040529050919050565b336112356006546001600160a01b031690565b6001600160a01b0316816001600160a01b0316148061128557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316145b6112c25760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642061636365737360901b6044820152606401610930565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360405160006040518083038185875af1925050503d806000811461132f576040519150601f19603f3d011682016040523d82523d6000602084013e611334565b606091505b50509050806113775760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610930565b6040518381527f5285e88bb974363c82f2ddb2e8a509e21f6ec0034e56f1f94f2adc306d1d55839060200160405180910390a1505050565b6006546001600160a01b031633146113d95760405162461bcd60e51b8152600401610930906127fa565b610ef28282611c3e565b6006546001600160a01b0316331461140d5760405162461bcd60e51b8152600401610930906127fa565b6001600160a01b0381166114725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610930565b610bb481611cb4565b6006546001600160a01b031633146114a55760405162461bcd60e51b8152600401610930906127fa565b6114ad610e7f565b15806114c25750600654600160a01b900460ff165b6114ff5760405162461bcd60e51b815260206004820152600e60248201526d43616e6e6f7420736574206e6f7760901b6044820152606401610930565b611507610e7f565b6115d2578563ffffffff168563ffffffff1610156115675760405162461bcd60e51b815260206004820152601b60248201527f436c6f73696e672074696d65203c204f70656e696e672074696d6500000000006044820152606401610930565b428663ffffffff16116115b35760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206f70656e696e672074696d6560601b6044820152606401610930565b6006805463ffffffff60a81b1916600160a81b63ffffffff8916021790555b600680546007805465ffffff0000001916630100000062ffffff8881169182029290921790925560088690556001600160c81b03909216600160e81b92881692830263ffffffff60c81b191617600160c81b63ffffffff8a811691820292909217909455600985905560408051938452602084019290925289169082015260608101919091526080810183905260a081018290527ff50edff2299e0c1c34da34ad84c64df54150e833ef534a802ef8c2dcdbaec53c9060c00160405180910390a1505050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906116d082610ef6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166117825760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610930565b600061178d83610ef6565b9050806001600160a01b0316846001600160a01b031614806117c85750836001600160a01b03166117bd846108bb565b6001600160a01b0316145b806117f857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661181382610ef6565b6001600160a01b0316146118775760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610930565b6001600160a01b0382166118d95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610930565b6118e460008261169b565b6001600160a01b038316600090815260036020526040812080546001929061190d90849061297a565b90915550506001600160a01b038216600090815260036020526040812080546001929061193b908490612991565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600654600160a01b900460ff166119ec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610930565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611a4482610ef6565b9050611a5160008361169b565b6001600160a01b0381166000908152600360205260408120805460019290611a7a90849061297a565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600654600160a01b900460ff1615611b215760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610930565b611b29610e7f565b611b605760405162461bcd60e51b81526020600482015260086024820152672737ba1037b832b760c11b6044820152606401610930565b60065460075462ffffff600160e81b909204821691611b849160ff8516911661284e565b62ffffff161115611bc85760405162461bcd60e51b815260206004820152600e60248201526d4578636565647320737570706c7960901b6044820152606401610930565b6007546001600160a01b0383166000908152600b6020526040902054630100000090910462ffffff1690611bff9060ff1683612875565b60ff161115610ef25760405162461bcd60e51b815260206004820152600b60248201526a045786365656473206361760ac1b6044820152606401610930565b6007546601000000000000900462ffffff1660005b82811015611c8757611c758483611c69816129a9565b945062ffffff16611f8e565b80611c7f816127df565b915050611c53565b506007805462ffffff90921666010000000000000268ffffff000000000000199092169190911790555050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600160a01b900460ff1615611d535760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610930565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a1c3390565b816001600160a01b0316836001600160a01b03161415611df05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610930565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e68848484611800565b611e7484848484611fa8565b6111345760405162461bcd60e51b8152600401610930906129cc565b606081611eb45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ede5780611ec8816127df565b9150611ed79050600a83612a34565b9150611eb8565b60008167ffffffffffffffff811115611ef957611ef96124b6565b6040519080825280601f01601f191660200182016040528015611f23576020820181803683370190505b5090505b84156117f857611f3860018361297a565b9150611f45600a86612a48565b611f50906030612991565b60f81b818381518110611f6557611f65612798565b60200101906001600160f81b031916908160001a905350611f87600a86612a34565b9450611f27565b610ef28282604051806020016040528060008152506120b5565b60006001600160a01b0384163b156120aa57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fec903390899088908890600401612a5c565b602060405180830381600087803b15801561200657600080fd5b505af1925050508015612036575060408051601f3d908101601f1916820190925261203391810190612a99565b60015b612090573d808015612064576040519150601f19603f3d011682016040523d82523d6000602084013e612069565b606091505b5080516120885760405162461bcd60e51b8152600401610930906129cc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117f8565b506001949350505050565b6120bf83836120e8565b6120cc6000848484611fa8565b610a665760405162461bcd60e51b8152600401610930906129cc565b6001600160a01b03821661213e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610930565b6000818152600260205260409020546001600160a01b0316156121a35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610930565b6001600160a01b03821660009081526003602052604081208054600192906121cc908490612991565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546122369061270c565b90600052602060002090601f016020900481019282612258576000855561229e565b82601f1061227157805160ff191683800117855561229e565b8280016001018555821561229e579182015b8281111561229e578251825591602001919060010190612283565b506122aa9291506122ae565b5090565b5b808211156122aa57600081556001016122af565b6001600160e01b031981168114610bb457600080fd5b6000602082840312156122eb57600080fd5b81356122f6816122c3565b9392505050565b60005b83811015612318578181015183820152602001612300565b838111156111345750506000910152565b600081518084526123418160208601602086016122fd565b601f01601f19169290920160200192915050565b6020815260006122f66020830184612329565b60006020828403121561237a57600080fd5b5035919050565b80356001600160a01b038116811461239857600080fd5b919050565b600080604083850312156123b057600080fd5b6123b983612381565b946020939093013593505050565b6000806000606084860312156123dc57600080fd5b6123e584612381565b92506123f360208501612381565b9150604084013590509250925092565b6000806020838503121561241657600080fd5b823567ffffffffffffffff8082111561242e57600080fd5b818501915085601f83011261244257600080fd5b81358181111561245157600080fd5b8660208260051b850101111561246657600080fd5b60209290920196919550909350505050565b60006020828403121561248a57600080fd5b6122f682612381565b6000602082840312156124a557600080fd5b813560ff811681146122f657600080fd5b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156124e7576124e76124b6565b604051601f8501601f19908116603f0116810190828211818310171561250f5761250f6124b6565b8160405280935085815286868601111561252857600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561255457600080fd5b813567ffffffffffffffff81111561256b57600080fd5b8201601f8101841361257c57600080fd5b6117f8848235602084016124cc565b8015158114610bb457600080fd5b600080604083850312156125ac57600080fd5b6125b583612381565b915060208301356125c58161258b565b809150509250929050565b600080600080608085870312156125e657600080fd5b6125ef85612381565b93506125fd60208601612381565b925060408501359150606085013567ffffffffffffffff81111561262057600080fd5b8501601f8101871361263157600080fd5b612640878235602084016124cc565b91505092959194509250565b6000806040838503121561265f57600080fd5b61266883612381565b915061267660208401612381565b90509250929050565b803563ffffffff8116811461239857600080fd5b803562ffffff8116811461239857600080fd5b60008060008060008060c087890312156126bf57600080fd5b6126c88761267f565b95506126d66020880161267f565b94506126e460408801612693565b93506126f260608801612693565b92506080870135915060a087013590509295509295509295565b600181811c9082168061272057607f821691505b6020821081141561274157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156127c057600080fd5b6122f682612693565b634e487b7160e01b600052601160045260246000fd5b60006000198214156127f3576127f36127c9565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000816000190483118215151615612849576128496127c9565b500290565b600062ffffff80831681851680830382111561286c5761286c6127c9565b01949350505050565b600060ff821660ff84168060ff03821115612892576128926127c9565b019392505050565b6000602082840312156128ac57600080fd5b81516122f68161258b565b600081516128c98185602086016122fd565b9290920192915050565b600080845481600182811c9150808316806128ef57607f831692505b602080841082141561290f57634e487b7160e01b86526022600452602486fd5b818015612923576001811461293457612961565b60ff19861689528489019650612961565b60008b81526020902060005b868110156129595781548b820152908501908301612940565b505084890196505b50505050505061297181856128b7565b95945050505050565b60008282101561298c5761298c6127c9565b500390565b600082198211156129a4576129a46127c9565b500190565b600062ffffff808316818114156129c2576129c26127c9565b6001019392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612a4357612a43612a1e565b500490565b600082612a5757612a57612a1e565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a8f90830184612329565b9695505050505050565b600060208284031215612aab57600080fd5b81516122f6816122c356fea2646970667358221220c3cfb9e81a7e00b5bdc572ee9851c4996cc923e7f62e8266c729956f096a29df64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2256,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2258,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2262,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2266,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2270,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2276,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_paused",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5255,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "openingTime",
        "offset": 21,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 5257,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "closingTime",
        "offset": 25,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 5259,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "supply",
        "offset": 29,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 5261,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "sold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 5263,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "cap",
        "offset": 3,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 5265,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "_tokenIdCounter",
        "offset": 6,
        "slot": "7",
        "type": "t_uint24"
      },
      {
        "astId": 5267,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "price",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5269,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "cashbackPerEgg",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5276,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 5280,
        "contract": "contracts/Egg.sol:RoosterEgg",
        "label": "purchasedAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}