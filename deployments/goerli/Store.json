{
  "address": "0x433F4FfAD2AaFAEd1E646E4Fe567e34005dfDa4a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_operatingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Store.TokenType",
          "name": "tokentype",
          "type": "uint8"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "Revoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Sold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "UpdateSigner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyItemWithAffiliate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inactive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "last_purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum Store.TokenType",
          "name": "tokentype",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Store.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxval",
          "type": "uint256"
        }
      ],
      "name": "makeListing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "listingIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Claimable.Sig",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct Claimable.Claim",
          "name": "claimData",
          "type": "tuple"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "listingIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Claimable.Sig",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct Claimable.Claim",
          "name": "claimData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Store.Permit",
          "name": "_permit",
          "type": "tuple"
        }
      ],
      "name": "purchasePermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "reprice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "restock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAffiliateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedLister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Claimable.Sig",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct Claimable.Claim",
          "name": "claimData",
          "type": "tuple"
        }
      ],
      "name": "validateClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb67516a9d6792b97de4d5e88a6724610a779156c01c3b12eda241803d627dd89",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x433F4FfAD2AaFAEd1E646E4Fe567e34005dfDa4a",
    "transactionIndex": 7,
    "gasUsed": "1922899",
    "logsBloom": "0x
    "blockHash": "0x4f8bd078edefb6144fb2562203ded6a140febe64fa469ce691d1a25a34a83c3e",
    "transactionHash": "0xb67516a9d6792b97de4d5e88a6724610a779156c01c3b12eda241803d627dd89",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 7174152,
        "transactionHash": "0xb67516a9d6792b97de4d5e88a6724610a779156c01c3b12eda241803d627dd89",
        "address": "0x433F4FfAD2AaFAEd1E646E4Fe567e34005dfDa4a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5ca36c9873d61bc28c117bd470981ef6647a685"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x4f8bd078edefb6144fb2562203ded6a140febe64fa469ce691d1a25a34a83c3e"
      }
    ],
    "blockNumber": 7174152,
    "cumulativeGasUsed": "2606398",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x375397c1491E9C96282BAB1eFd8120FF68055130",
    "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685"
  ],
  "numDeployments": 1,
  "solcInputHash": "61c20db86f383acbf281885c4f75de62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_operatingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Store.TokenType\",\"name\":\"tokentype\",\"type\":\"uint8\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"UpdateSigner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedLister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyItemWithAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum Store.TokenType\",\"name\":\"tokentype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Store.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxval\",\"type\":\"uint256\"}],\"name\":\"makeListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"listingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Claimable.Sig\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct Claimable.Claim\",\"name\":\"claimData\",\"type\":\"tuple\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"listingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Claimable.Sig\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct Claimable.Claim\",\"name\":\"claimData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Store.Permit\",\"name\":\"_permit\",\"type\":\"tuple\"}],\"name\":\"purchasePermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"reprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"restock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAffiliateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedLister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Claimable.Sig\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct Claimable.Claim\",\"name\":\"claimData\",\"type\":\"tuple\"}],\"name\":\"validateClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/store/Store.sol\":\"Store\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/store/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n/**\\n  Claimable\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract Claimable is Ownable {\\n  mapping(address => bool) public signers;\\n  mapping(uint256 => bool) public burned;\\n\\n  struct Claim {\\n    uint256 nonce;\\n    address target;\\n    uint256 amount;\\n    Sig signature;\\n  }\\n\\n  struct Sig {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n  }\\n\\n  event UpdateSigner(address signer, bool state);\\n  event Claimed(uint256 indexed nonce, address indexed target, uint256 amount);\\n\\n  function setSigner(address _signer, bool _state) public onlyOwner {\\n    signers[_signer] = _state;\\n    emit UpdateSigner(_signer, _state);\\n  }\\n\\n  function authorize(\\n    Sig calldata sig,\\n    uint256 nonce,\\n    bytes32 messageHash\\n  ) internal view returns (bool) {\\n    require(!burned[nonce], \\\"Claimable:BURNED\\\");\\n    bytes32 ethSignedMessageHash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n    );\\n    address signer = ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s);\\n    return signers[signer];\\n  }\\n\\n  function validateClaim(Claim calldata claimData) public view returns (bool) {\\n    bytes32 messageHash = keccak256(\\n      abi.encodePacked(claimData.nonce, claimData.target, claimData.amount)\\n    );\\n    return authorize(claimData.signature, claimData.nonce, messageHash);\\n  }\\n\\n  function _burn_nonce(uint256 nonce) internal {\\n    burned[nonce] = true;\\n  }\\n}\\n\",\"keccak256\":\"0xcc4427a260d87851ffec0c0037904771b52336e47dc01d16e1eac72b96226003\",\"license\":\"UNLICENSED\"},\"contracts/store/Store.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n  Marketplace spec: https://www.notion.so/RoosterWars-Marketplace-6350187ee37f4e239aa8441b7e634e00\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Claimable.sol\\\";\\n\\ncontract Store is Ownable, Claimable {\\n  IERC20 public operatingToken;\\n  uint256 public feeRate;\\n  address immutable vault;\\n\\n  enum TokenType {\\n    ERC1155,\\n    ERC1155EXT,\\n    ERC721,\\n    ERC721EXT\\n  }\\n\\n  struct Listing {\\n    address token;\\n    uint256 tokenId;\\n    address owner;\\n    uint256 price;\\n    TokenType tokentype;\\n    uint256 maxval;\\n  }\\n\\n  struct Permit {\\n    address owner;\\n    address spender;\\n    uint256 value;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  uint256 public nextId;\\n  // { listingId: Listing}\\n  mapping(uint256 => Listing) public listings;\\n  mapping(uint256 => bool) public inactive;\\n  // { listingId: inStock }\\n  mapping(uint256 => uint256) public stocks;\\n  // { account: allowed }\\n  mapping(address => bool) public allowedLister;\\n  // { account: block.number}\\n  mapping(address => uint256) public last_purchase;\\n\\n  //==============================\\n  // for affiliate marketing\\n  address private affiliateAddress;\\n\\n  event Listed(\\n    uint256 listingId,\\n    address token,\\n    uint256 tokenId,\\n    address owner,\\n    uint256 amount,\\n    uint256 price,\\n    TokenType tokentype\\n  );\\n  event Sold(uint256 listingId, address indexed buyer, uint256 amount);\\n  event Revoke(uint256 listingId);\\n\\n  constructor(IERC20 _operatingToken, address _vault) {\\n    operatingToken = _operatingToken;\\n    vault = _vault;\\n  }\\n\\n  /*\\n        setAllowedLister gives an account access to call the makeListing method.\\n    */\\n  function setAllowedLister(address account, bool allowed) public onlyOwner {\\n    allowedLister[account] = allowed;\\n  }\\n\\n  /*\\n        setFeeRate sets the fee in down to a hundredth of a percent.\\n        1    =    0.01%\\n        100  =   10.00%\\n        1000 =  100.00%\\n    */\\n  function setFeeRate(uint256 _feeRate) public onlyOwner {\\n    feeRate = _feeRate;\\n  }\\n\\n  /*\\n        restock refills the amount of tokens the contract is allowed to muint\\n    */\\n  function restock(uint256 listingId, uint256 amount) public {\\n    require(listings[listingId].owner == msg.sender, \\\"not listing owner\\\");\\n    stocks[listingId] += amount;\\n  }\\n\\n  /*\\n        makeListing creates a listing based on the tokenType\\n            Token types with an EX suffix is expected to have a mint() function with an additional\\n        argument where the shop passes a random number based on the 'maxval' argument.\\n            The random value is [0, maxval). And is generated through the signer's signature.\\n    */\\n  function makeListing(\\n    TokenType tokenType,\\n    address token,\\n    uint256 tokenId,\\n    uint256 amount,\\n    uint256 price,\\n    uint256 maxval\\n  ) public returns (uint256) {\\n    require(allowedLister[msg.sender], \\\"STORE:NOT_AUTHORIZED\\\");\\n    unchecked {\\n      nextId = nextId + 1;\\n    }\\n\\n    // Verify that it conforms to the Mintable interface by making sure the mint method can be called.\\n    bytes memory payload = _generatePayload(msg.sender, tokenType, tokenId, 1, 0, \\\"\\\", 0);\\n    (bool ok, ) = token.call(payload);\\n\\n    require(ok, \\\"Store:TOKEN_VALIDATE_FAILED\\\");\\n\\n    if (feeRate != 0) {\\n      price += (price * feeRate) / 10_000;\\n    }\\n\\n    listings[nextId] = Listing(token, tokenId, msg.sender, price, tokenType, maxval);\\n    stocks[nextId] = amount;\\n\\n    emit Listed(nextId, token, tokenId, msg.sender, amount, price, tokenType);\\n    return nextId;\\n  }\\n\\n  /*\\n        reprice changes the listing's price.\\n    */\\n  function reprice(uint256 listingId, uint256 price) public {\\n    require(listings[listingId].owner == msg.sender, \\\"only owner can reprice the listing\\\");\\n\\n    if (feeRate != 0) {\\n      price += (price * feeRate) / 10_000;\\n    }\\n\\n    Listing memory l = listings[listingId];\\n    l.price = price;\\n    listings[listingId] = l;\\n  }\\n\\n  /*\\n        setActive changes the listing's state.\\n    */\\n  function setActive(uint256 listingId, bool active) public {\\n    require(listings[listingId].owner == msg.sender, \\\"only listing owner can revoke the listing\\\");\\n\\n    inactive[listingId] = active;\\n    emit Revoke(listingId);\\n  }\\n\\n  function _generatePayload(\\n    address recv,\\n    TokenType tokentype,\\n    uint256 id,\\n    uint256 amount,\\n    uint256 i,\\n    bytes32 r,\\n    uint256 max\\n  ) internal view returns (bytes memory payload) {\\n    if (tokentype == TokenType.ERC1155) {\\n\\n      payload = abi.encodeWithSignature(\\\"mint(address,uint256,uint256)\\\", recv, id, amount);\\n    } else if (tokentype == TokenType.ERC1155EXT) {\\n      uint256 unique = uint256(keccak256(abi.encodePacked(r, i)));\\n\\n      if (max > 0) {\\n        unique = unique % max;\\n      }\\n      payload = abi.encodeWithSignature(\\n        \\\"mint(address,uint256,uint256,uint256)\\\",\\n        recv,\\n        id,\\n        amount,\\n        unique\\n      );\\n    } else if (tokentype == TokenType.ERC721) {\\n      payload = abi.encodeWithSignature(\\\"mint(address)\\\", recv);\\n    } else if (tokentype == TokenType.ERC721EXT) {\\n      uint256 unique = uint256(keccak256(abi.encodePacked(r, i)));\\n\\n      if (max > 0) {\\n        unique = unique % max;\\n      }\\n      payload = abi.encodeWithSignature(\\\"mint(address,uint256)\\\", recv, unique);\\n    }\\n  }\\n\\n  function purchase(\\n    address to,\\n    uint256[] calldata listingIds,\\n    uint256[] calldata amounts,\\n    Claim calldata claimData\\n  ) public {\\n    require(claimData.target == msg.sender, \\\"Store:NOT_AUTHORIZED\\\");\\n    require(validateClaim(claimData), \\\"Store:INVALID_CLAIM\\\");\\n    require(claimData.amount == last_purchase[msg.sender], \\\"Store:OLD_CLAIM\\\");\\n    _burn_nonce(claimData.nonce);\\n    last_purchase[msg.sender] = block.number;\\n\\n    require(listingIds.length == amounts.length, \\\"Store:PARAMETER_MISMATCH\\\");\\n\\n    for (uint256 i = 0; i < listingIds.length; i++) {\\n      uint256 amount = amounts[i];\\n      uint256 listingId = listingIds[i];\\n\\n      require(!inactive[listingId], \\\"Store:INACTIVE_LISTING\\\");\\n      require(stocks[listingId] >= amount, \\\"Store:INSUFFICIENT_STOCK\\\");\\n\\n      Listing memory listing = listings[listingId];\\n\\n      stocks[listingId] -= amount;\\n      uint256 price = listing.price * amount;\\n      if (feeRate != 0) {\\n        uint256 fee = (price * feeRate) / 10_000;\\n        price -= fee;\\n        // Send the fee to the contract owner\\n        operatingToken.transferFrom(msg.sender, vault, fee);\\n      }\\n      operatingToken.transferFrom(msg.sender, listing.owner, price);\\n\\n      bytes memory payload = _generatePayload(\\n        to,\\n        listing.tokentype,\\n        listing.tokenId,\\n        amount,\\n        i,\\n        claimData.signature.r,\\n        listing.maxval\\n      );\\n\\n      (bool ok, ) = listing.token.call(payload);\\n      require(ok);\\n\\n      emit Sold(listingId, claimData.target, amount);\\n    }\\n  }\\n\\n  function purchasePermit(\\n    address to,\\n    uint256[] calldata listingIds,\\n    uint256[] calldata amounts,\\n    Claim calldata claimData,\\n    Permit calldata _permit\\n  ) public {\\n    IERC20Permit permit = IERC20Permit(address(operatingToken));\\n    permit.permit(\\n      _permit.owner,\\n      _permit.spender,\\n      _permit.value,\\n      _permit.deadline,\\n      _permit.v,\\n      _permit.r,\\n      _permit.s\\n    );\\n    purchase(to, listingIds, amounts, claimData);\\n  }\\n\\n  // for affiliate sale\\n  function setAffiliateAddress(address _address) public onlyOwner {\\n    affiliateAddress = _address;\\n  }\\n\\n  modifier onlyAffiliate() {\\n    require(affiliateAddress == msg.sender, \\\"Store:NOT_AFFILIATE\\\");\\n    _;\\n  }\\n\\n  function buyItemWithAffiliate(\\n    address from,\\n    address to,\\n    uint256 listingId,\\n    uint256 amount\\n  ) public onlyAffiliate {\\n    require(!inactive[listingId], \\\"Store:INACTIVE_LISTING\\\");\\n    require(stocks[listingId] >= amount, \\\"Store:INSUFFICIENT_STOCK\\\");\\n\\n    Listing memory listing = listings[listingId];\\n\\n    stocks[listingId] -= amount;\\n    uint256 price = listing.price * amount;\\n    if (feeRate != 0) {\\n      uint256 fee = (price * feeRate) / 10_000;\\n      price -= fee;\\n      // Send the fee to the contract owner\\n      operatingToken.transferFrom(from, vault, fee);\\n    }\\n    operatingToken.transferFrom(from, listing.owner, price);\\n\\n    bytes memory payload = _generatePayload(\\n      to,\\n      listing.tokentype,\\n      listing.tokenId,\\n      amount,\\n      0,\\n      bytes32(0),\\n      listing.maxval\\n    );\\n\\n    (bool ok, ) = listing.token.call(payload);\\n    require(ok);\\n\\n    emit Sold(listingId, to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x8e594cd78929d4bde37ac1c0116e99a60e0092c614c3c37270a62095b8ff369e\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200221a3803806200221a8339810160408190526200003491620000ce565b6200003f3362000065565b600380546001600160a01b0319166001600160a01b03938416179055166080526200010d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000cb57600080fd5b50565b60008060408385031215620000e257600080fd5b8251620000ef81620000b5565b60208401519092506200010281620000b5565b809150509250929050565b6080516120ea6200013060003960008181610f4101526114d001526120ea6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063ddd5987f11610097578063ec6f8fe011610071578063ec6f8fe0146103bd578063f2fde38b146103d0578063f7f6a971146103e3578063fb92699d146103f657600080fd5b8063ddd5987f14610330578063de74e57b14610343578063e60a955d146103aa57600080fd5b8063715018a6146102b1578063736c0d5b146102b95780638da5cb5b146102dc578063978bbdb914610301578063a77feae01461030a578063c6608d121461031d57600080fd5b8063250f117011610130578063250f11701461024957806328b0eb001461025c57806331cb61051461026f57806345596e2e1461028257806353fe23281461029557806361b8ce8c146102a857600080fd5b806310e27d7a146101785780631d2ae92b146101b0578063226b876c146101de57806323250cae146101fe578063237b068a14610221578063246a7ac014610236575b600080fd5b61019b610186366004611b24565b60096020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101d06101be366004611b24565b600a6020526000908152604090205481565b6040519081526020016101a7565b6101d06101ec366004611b3f565b60086020526000908152604090205481565b61019b61020c366004611b3f565b60026020526000908152604090205460ff1681565b61023461022f366004611b58565b610419565b005b610234610244366004611bde565b6105f1565b610234610257366004611c9e565b6106dd565b61019b61026a366004611cd5565b610732565b61023461027d366004611c9e565b6107b2565b610234610290366004611b3f565b610840565b6102346102a3366004611b24565b61086f565b6101d060055481565b6102346108bb565b61019b6102c7366004611b24565b60016020526000908152604090205460ff1681565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101a7565b6101d060045481565b6101d0610318366004611cf1565b6108f1565b61023461032b366004611d4c565b610b9d565b61023461033e366004611b58565b61115c565b610398610351366004611b3f565b6006602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b0394851695939490921692909160ff9091169086565b6040516101a796959493929190611e16565b6102346103b8366004611e5a565b6111e0565b6102346103cb366004611e7f565b6112a6565b6102346103de366004611b24565b6116b9565b6003546102e9906001600160a01b031681565b61019b610404366004611b3f565b60076020526000908152604090205460ff1681565b6000828152600660205260409020600201546001600160a01b031633146104925760405162461bcd60e51b815260206004820152602260248201527f6f6e6c79206f776e65722063616e207265707269636520746865206c697374696044820152616e6760f01b60648201526084015b60405180910390fd5b600454156104c257612710600454826104ab9190611ed7565b6104b59190611f0c565b6104bf9082611f20565b90505b6000828152600660209081526040808320815160c08101835281546001600160a01b03908116825260018301549482019490945260028201549093169183019190915260038082015460608401526004820154608084019160ff9091169081111561052f5761052f611dde565b600381111561054057610540611dde565b81526005919091015460209182015260608201848152600086815260068352604090819020845181546001600160a01b03199081166001600160a01b0392831617835594860151600180840191909155928601516002830180549096169116179093559051600380840191909155608084015160048401805495965086959193909260ff199092169184908111156105da576105da611dde565b021790555060a08201518160050155905050505050565b6003546001600160a01b03168063d505accf6106106020850185611b24565b6106206040860160208701611b24565b6040860135606087013561063a60a0890160808a01611f38565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff16608482015260a085013560a482015260c085013560c482015260e401600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b505050506106d3888888888888610b9d565b5050505050505050565b6000546001600160a01b031633146107075760405162461bcd60e51b815260040161048990611f5b565b6001600160a01b03919091166000908152600960205260409020805460ff1916911515919091179055565b60008082356107476040850160208601611b24565b84604001356040516020016107819392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b6040516020818303038152906040528051906020012090506107ab83606001846000013583611754565b9392505050565b6000546001600160a01b031633146107dc5760405162461bcd60e51b815260040161048990611f5b565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce91015b60405180910390a15050565b6000546001600160a01b0316331461086a5760405162461bcd60e51b815260040161048990611f5b565b600455565b6000546001600160a01b031633146108995760405162461bcd60e51b815260040161048990611f5b565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108e55760405162461bcd60e51b815260040161048990611f5b565b6108ef600061188c565b565b3360009081526009602052604081205460ff166109475760405162461bcd60e51b815260206004820152601460248201527314d513d4914e9393d517d055551213d49256915160621b6044820152606401610489565b6005546001016005819055506000610967338988600160008060006118dc565b90506000876001600160a01b0316826040516109839190611f90565b6000604051808303816000865af19150503d80600081146109c0576040519150601f19603f3d011682016040523d82523d6000602084013e6109c5565b606091505b5050905080610a165760405162461bcd60e51b815260206004820152601b60248201527f53746f72653a544f4b454e5f56414c49444154455f4641494c454400000000006044820152606401610489565b60045415610a465761271060045486610a2f9190611ed7565b610a399190611f0c565b610a439086611f20565b94505b6040518060c00160405280896001600160a01b03168152602001888152602001336001600160a01b031681526020018681526020018a6003811115610a8d57610a8d611dde565b81526020908101869052600554600090815260068252604090819020835181546001600160a01b03199081166001600160a01b039283161783559385015160018084019190915592850151600283018054909516911617909255606083015160038084019190915560808401516004840180549193909260ff19909216918490811115610b1c57610b1c611dde565b021790555060a0820151816005015590505085600860006005548152602001908152602001600020819055507f4a66764e077ff46573b42d9f8582566200591bddad30d7644782da386ef855ee6005548989338a8a8f604051610b859796959493929190611fcb565b60405180910390a15050600554979650505050505050565b33610bae6040830160208401611b24565b6001600160a01b031614610bfb5760405162461bcd60e51b815260206004820152601460248201527314dd1bdc994e9393d517d055551213d49256915160621b6044820152606401610489565b610c0481610732565b610c465760405162461bcd60e51b815260206004820152601360248201527253746f72653a494e56414c49445f434c41494d60681b6044820152606401610489565b336000908152600a602052604090819020549082013514610c9b5760405162461bcd60e51b815260206004820152600f60248201526e53746f72653a4f4c445f434c41494d60881b6044820152606401610489565b610cbb81356000908152600260205260409020805460ff19166001179055565b336000908152600a60205260409020439055838214610d1c5760405162461bcd60e51b815260206004820152601860248201527f53746f72653a504152414d455445525f4d49534d4154434800000000000000006044820152606401610489565b60005b84811015611153576000848483818110610d3b57610d3b612017565b9050602002013590506000878784818110610d5857610d58612017565b60209081029290920135600081815260079093526040909220549192505060ff1615610dbf5760405162461bcd60e51b815260206004820152601660248201527553746f72653a494e4143544956455f4c495354494e4760501b6044820152606401610489565b600081815260086020526040902054821115610e185760405162461bcd60e51b815260206004820152601860248201527753746f72653a494e53554646494349454e545f53544f434b60401b6044820152606401610489565b6000818152600660209081526040808320815160c08101835281546001600160a01b03908116825260018301549482019490945260028201549093169183019190915260038082015460608401526004820154608084019160ff90911690811115610e8557610e85611dde565b6003811115610e9657610e96611dde565b8152602001600582015481525050905082600860008481526020019081526020016000206000828254610ec9919061202d565b90915550506060810151600090610ee1908590611ed7565b9050600454600014610fc057600061271060045483610f009190611ed7565b610f0a9190611f0c565b9050610f16818361202d565b6003546040516323b872dd60e01b81529193506001600160a01b0316906323b872dd90610f6b9033907f0000000000000000000000000000000000000000000000000000000000000000908690600401612044565b602060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190612068565b50505b60035460408084015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91610ff8913391908690600401612044565b602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190612068565b50600061106f8c84608001518560200151888a8c606001600001358960a001516118dc565b9050600083600001516001600160a01b03168260405161108f9190611f90565b6000604051808303816000865af19150503d80600081146110cc576040519150601f19603f3d011682016040523d82523d6000602084013e6110d1565b606091505b50509050806110df57600080fd5b6110ef6040890160208a01611b24565b6001600160a01b03167f66f5cd880edf48cdde6c966e5da0784fcc4c5e85572b8b3b62c4357798d447d78688604051611132929190918252602082015260400190565b60405180910390a2505050505050808061114b90612085565b915050610d1f565b50505050505050565b6000828152600660205260409020600201546001600160a01b031633146111b95760405162461bcd60e51b81526020600482015260116024820152703737ba103634b9ba34b7339037bbb732b960791b6044820152606401610489565b600082815260086020526040812080548392906111d7908490611f20565b90915550505050565b6000828152600660205260409020600201546001600160a01b0316331461125b5760405162461bcd60e51b815260206004820152602960248201527f6f6e6c79206c697374696e67206f776e65722063616e207265766f6b6520746860448201526865206c697374696e6760b81b6064820152608401610489565b600082815260076020908152604091829020805460ff191684151517905590518381527fdb43aa42235c8d63908794a952603e8d43a549383d13123c3d893a3fc2e624959101610834565b600b546001600160a01b031633146112f65760405162461bcd60e51b815260206004820152601360248201527253746f72653a4e4f545f414646494c4941544560681b6044820152606401610489565b60008281526007602052604090205460ff161561134e5760405162461bcd60e51b815260206004820152601660248201527553746f72653a494e4143544956455f4c495354494e4760501b6044820152606401610489565b6000828152600860205260409020548111156113a75760405162461bcd60e51b815260206004820152601860248201527753746f72653a494e53554646494349454e545f53544f434b60401b6044820152606401610489565b6000828152600660209081526040808320815160c08101835281546001600160a01b03908116825260018301549482019490945260028201549093169183019190915260038082015460608401526004820154608084019160ff9091169081111561141457611414611dde565b600381111561142557611425611dde565b8152602001600582015481525050905081600860008581526020019081526020016000206000828254611458919061202d565b90915550506060810151600090611470908490611ed7565b905060045460001461154f5760006127106004548361148f9190611ed7565b6114999190611f0c565b90506114a5818361202d565b6003546040516323b872dd60e01b81529193506001600160a01b0316906323b872dd906114fa908a907f0000000000000000000000000000000000000000000000000000000000000000908690600401612044565b602060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190612068565b50505b60035460408084015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91611587918a91908690600401612044565b602060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d99190612068565b5060006115fb86846080015185602001518760008060001b8960a001516118dc565b9050600083600001516001600160a01b03168260405161161b9190611f90565b6000604051808303816000865af19150503d8060008114611658576040519150601f19603f3d011682016040523d82523d6000602084013e61165d565b606091505b505090508061166b57600080fd5b60408051878152602081018790526001600160a01b038916917f66f5cd880edf48cdde6c966e5da0784fcc4c5e85572b8b3b62c4357798d447d7910160405180910390a25050505050505050565b6000546001600160a01b031633146116e35760405162461bcd60e51b815260040161048990611f5b565b6001600160a01b0381166117485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610489565b6117518161188c565b50565b60008281526002602052604081205460ff16156117a65760405162461bcd60e51b815260206004820152601060248201526f10db185a5b58589b194e90955493915160821b6044820152606401610489565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101839052600090605c01604051602081830303815290604052805190602001209050600060018287604001602081019061180c9190611f38565b604080516000815260208181018084529490945260ff909216908201528835606082015290880135608082015260a0016020604051602081039080840390855afa15801561185e573d6000803e3d6000fd5b505060408051601f1901516001600160a01b031660009081526001602052205460ff16979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008760038111156118f2576118f2611dde565b141561194c576040516001600160a01b0389166024820152604481018790526064810186905260840160408051601f198184030181529190526020810180516001600160e01b0316630ab714fb60e11b1790529050611afd565b600187600381111561196057611960611dde565b14156119fe576040805160208082018690528183018790528251808303840181526060909201909252805191012082156119a15761199e83826120a0565b90505b6040516001600160a01b038a16602482015260448101889052606481018790526084810182905260a40160408051601f198184030181529190526020810180516001600160e01b0316632991fa3b60e21b1790529150611afd9050565b6002876003811115611a1257611a12611dde565b1415611a5e576040516001600160a01b038916602482015260440160408051601f198184030181529190526020810180516001600160e01b03166335313c2160e11b1790529050611afd565b6003876003811115611a7257611a72611dde565b1415611afd57604080516020808201869052818301879052825180830384018152606090920190925280519101208215611ab357611ab083826120a0565b90505b6040516001600160a01b038a1660248201526044810182905260640160408051601f198184030181529190526020810180516001600160e01b03166340c10f1960e01b1790529150505b979650505050505050565b80356001600160a01b0381168114611b1f57600080fd5b919050565b600060208284031215611b3657600080fd5b6107ab82611b08565b600060208284031215611b5157600080fd5b5035919050565b60008060408385031215611b6b57600080fd5b50508035926020909101359150565b60008083601f840112611b8c57600080fd5b50813567ffffffffffffffff811115611ba457600080fd5b6020830191508360208260051b8501011115611bbf57600080fd5b9250929050565b600060c08284031215611bd857600080fd5b50919050565b6000806000806000806000878903610200811215611bfb57600080fd5b611c0489611b08565b9750602089013567ffffffffffffffff80821115611c2157600080fd5b611c2d8c838d01611b7a565b909950975060408b0135915080821115611c4657600080fd5b50611c538b828c01611b7a565b9096509450611c6790508a60608b01611bc6565b925060e061011f1982011215611c7c57600080fd5b506101208801905092959891949750929550565b801515811461175157600080fd5b60008060408385031215611cb157600080fd5b611cba83611b08565b91506020830135611cca81611c90565b809150509250929050565b600060c08284031215611ce757600080fd5b6107ab8383611bc6565b60008060008060008060c08789031215611d0a57600080fd5b863560048110611d1957600080fd5b9550611d2760208801611b08565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6000806000806000806101208789031215611d6657600080fd5b611d6f87611b08565b9550602087013567ffffffffffffffff80821115611d8c57600080fd5b611d988a838b01611b7a565b90975095506040890135915080821115611db157600080fd5b50611dbe89828a01611b7a565b9094509250611dd290508860608901611bc6565b90509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60048110611e1257634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03878116825260208201879052851660408201526060810184905260c08101611e496080830185611df4565b8260a0830152979650505050505050565b60008060408385031215611e6d57600080fd5b823591506020830135611cca81611c90565b60008060008060808587031215611e9557600080fd5b611e9e85611b08565b9350611eac60208601611b08565b93969395505050506040820135916060013590565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ef157611ef1611ec1565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611f1b57611f1b611ef6565b500490565b60008219821115611f3357611f33611ec1565b500190565b600060208284031215611f4a57600080fd5b813560ff811681146107ab57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000825160005b81811015611fb15760208186018101518583015201611f97565b81811115611fc0576000828501525b509190910192915050565b8781526001600160a01b03878116602083015260408201879052851660608201526080810184905260a0810183905260e0810161200b60c0830184611df4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008282101561203f5761203f611ec1565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561207a57600080fd5b81516107ab81611c90565b600060001982141561209957612099611ec1565b5060010190565b6000826120af576120af611ef6565b50069056fea2646970667358221220fe20673db2eece1ed012a7d7288a0ce8b1256bedb923b8e1e24e0e85306894eb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063ddd5987f11610097578063ec6f8fe011610071578063ec6f8fe0146103bd578063f2fde38b146103d0578063f7f6a971146103e3578063fb92699d146103f657600080fd5b8063ddd5987f14610330578063de74e57b14610343578063e60a955d146103aa57600080fd5b8063715018a6146102b1578063736c0d5b146102b95780638da5cb5b146102dc578063978bbdb914610301578063a77feae01461030a578063c6608d121461031d57600080fd5b8063250f117011610130578063250f11701461024957806328b0eb001461025c57806331cb61051461026f57806345596e2e1461028257806353fe23281461029557806361b8ce8c146102a857600080fd5b806310e27d7a146101785780631d2ae92b146101b0578063226b876c146101de57806323250cae146101fe578063237b068a14610221578063246a7ac014610236575b600080fd5b61019b610186366004611b24565b60096020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101d06101be366004611b24565b600a6020526000908152604090205481565b6040519081526020016101a7565b6101d06101ec366004611b3f565b60086020526000908152604090205481565b61019b61020c366004611b3f565b60026020526000908152604090205460ff1681565b61023461022f366004611b58565b610419565b005b610234610244366004611bde565b6105f1565b610234610257366004611c9e565b6106dd565b61019b61026a366004611cd5565b610732565b61023461027d366004611c9e565b6107b2565b610234610290366004611b3f565b610840565b6102346102a3366004611b24565b61086f565b6101d060055481565b6102346108bb565b61019b6102c7366004611b24565b60016020526000908152604090205460ff1681565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101a7565b6101d060045481565b6101d0610318366004611cf1565b6108f1565b61023461032b366004611d4c565b610b9d565b61023461033e366004611b58565b61115c565b610398610351366004611b3f565b6006602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b0394851695939490921692909160ff9091169086565b6040516101a796959493929190611e16565b6102346103b8366004611e5a565b6111e0565b6102346103cb366004611e7f565b6112a6565b6102346103de366004611b24565b6116b9565b6003546102e9906001600160a01b031681565b61019b610404366004611b3f565b60076020526000908152604090205460ff1681565b6000828152600660205260409020600201546001600160a01b031633146104925760405162461bcd60e51b815260206004820152602260248201527f6f6e6c79206f776e65722063616e207265707269636520746865206c697374696044820152616e6760f01b60648201526084015b60405180910390fd5b600454156104c257612710600454826104ab9190611ed7565b6104b59190611f0c565b6104bf9082611f20565b90505b6000828152600660209081526040808320815160c08101835281546001600160a01b03908116825260018301549482019490945260028201549093169183019190915260038082015460608401526004820154608084019160ff9091169081111561052f5761052f611dde565b600381111561054057610540611dde565b81526005919091015460209182015260608201848152600086815260068352604090819020845181546001600160a01b03199081166001600160a01b0392831617835594860151600180840191909155928601516002830180549096169116179093559051600380840191909155608084015160048401805495965086959193909260ff199092169184908111156105da576105da611dde565b021790555060a08201518160050155905050505050565b6003546001600160a01b03168063d505accf6106106020850185611b24565b6106206040860160208701611b24565b6040860135606087013561063a60a0890160808a01611f38565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff16608482015260a085013560a482015260c085013560c482015260e401600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b505050506106d3888888888888610b9d565b5050505050505050565b6000546001600160a01b031633146107075760405162461bcd60e51b815260040161048990611f5b565b6001600160a01b03919091166000908152600960205260409020805460ff1916911515919091179055565b60008082356107476040850160208601611b24565b84604001356040516020016107819392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b6040516020818303038152906040528051906020012090506107ab83606001846000013583611754565b9392505050565b6000546001600160a01b031633146107dc5760405162461bcd60e51b815260040161048990611f5b565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce91015b60405180910390a15050565b6000546001600160a01b0316331461086a5760405162461bcd60e51b815260040161048990611f5b565b600455565b6000546001600160a01b031633146108995760405162461bcd60e51b815260040161048990611f5b565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108e55760405162461bcd60e51b815260040161048990611f5b565b6108ef600061188c565b565b3360009081526009602052604081205460ff166109475760405162461bcd60e51b815260206004820152601460248201527314d513d4914e9393d517d055551213d49256915160621b6044820152606401610489565b6005546001016005819055506000610967338988600160008060006118dc565b90506000876001600160a01b0316826040516109839190611f90565b6000604051808303816000865af19150503d80600081146109c0576040519150601f19603f3d011682016040523d82523d6000602084013e6109c5565b606091505b5050905080610a165760405162461bcd60e51b815260206004820152601b60248201527f53746f72653a544f4b454e5f56414c49444154455f4641494c454400000000006044820152606401610489565b60045415610a465761271060045486610a2f9190611ed7565b610a399190611f0c565b610a439086611f20565b94505b6040518060c00160405280896001600160a01b03168152602001888152602001336001600160a01b031681526020018681526020018a6003811115610a8d57610a8d611dde565b81526020908101869052600554600090815260068252604090819020835181546001600160a01b03199081166001600160a01b039283161783559385015160018084019190915592850151600283018054909516911617909255606083015160038084019190915560808401516004840180549193909260ff19909216918490811115610b1c57610b1c611dde565b021790555060a0820151816005015590505085600860006005548152602001908152602001600020819055507f4a66764e077ff46573b42d9f8582566200591bddad30d7644782da386ef855ee6005548989338a8a8f604051610b859796959493929190611fcb565b60405180910390a15050600554979650505050505050565b33610bae6040830160208401611b24565b6001600160a01b031614610bfb5760405162461bcd60e51b815260206004820152601460248201527314dd1bdc994e9393d517d055551213d49256915160621b6044820152606401610489565b610c0481610732565b610c465760405162461bcd60e51b815260206004820152601360248201527253746f72653a494e56414c49445f434c41494d60681b6044820152606401610489565b336000908152600a602052604090819020549082013514610c9b5760405162461bcd60e51b815260206004820152600f60248201526e53746f72653a4f4c445f434c41494d60881b6044820152606401610489565b610cbb81356000908152600260205260409020805460ff19166001179055565b336000908152600a60205260409020439055838214610d1c5760405162461bcd60e51b815260206004820152601860248201527f53746f72653a504152414d455445525f4d49534d4154434800000000000000006044820152606401610489565b60005b84811015611153576000848483818110610d3b57610d3b612017565b9050602002013590506000878784818110610d5857610d58612017565b60209081029290920135600081815260079093526040909220549192505060ff1615610dbf5760405162461bcd60e51b815260206004820152601660248201527553746f72653a494e4143544956455f4c495354494e4760501b6044820152606401610489565b600081815260086020526040902054821115610e185760405162461bcd60e51b815260206004820152601860248201527753746f72653a494e53554646494349454e545f53544f434b60401b6044820152606401610489565b6000818152600660209081526040808320815160c08101835281546001600160a01b03908116825260018301549482019490945260028201549093169183019190915260038082015460608401526004820154608084019160ff90911690811115610e8557610e85611dde565b6003811115610e9657610e96611dde565b8152602001600582015481525050905082600860008481526020019081526020016000206000828254610ec9919061202d565b90915550506060810151600090610ee1908590611ed7565b9050600454600014610fc057600061271060045483610f009190611ed7565b610f0a9190611f0c565b9050610f16818361202d565b6003546040516323b872dd60e01b81529193506001600160a01b0316906323b872dd90610f6b9033907f0000000000000000000000000000000000000000000000000000000000000000908690600401612044565b602060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190612068565b50505b60035460408084015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91610ff8913391908690600401612044565b602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190612068565b50600061106f8c84608001518560200151888a8c606001600001358960a001516118dc565b9050600083600001516001600160a01b03168260405161108f9190611f90565b6000604051808303816000865af19150503d80600081146110cc576040519150601f19603f3d011682016040523d82523d6000602084013e6110d1565b606091505b50509050806110df57600080fd5b6110ef6040890160208a01611b24565b6001600160a01b03167f66f5cd880edf48cdde6c966e5da0784fcc4c5e85572b8b3b62c4357798d447d78688604051611132929190918252602082015260400190565b60405180910390a2505050505050808061114b90612085565b915050610d1f565b50505050505050565b6000828152600660205260409020600201546001600160a01b031633146111b95760405162461bcd60e51b81526020600482015260116024820152703737ba103634b9ba34b7339037bbb732b960791b6044820152606401610489565b600082815260086020526040812080548392906111d7908490611f20565b90915550505050565b6000828152600660205260409020600201546001600160a01b0316331461125b5760405162461bcd60e51b815260206004820152602960248201527f6f6e6c79206c697374696e67206f776e65722063616e207265766f6b6520746860448201526865206c697374696e6760b81b6064820152608401610489565b600082815260076020908152604091829020805460ff191684151517905590518381527fdb43aa42235c8d63908794a952603e8d43a549383d13123c3d893a3fc2e624959101610834565b600b546001600160a01b031633146112f65760405162461bcd60e51b815260206004820152601360248201527253746f72653a4e4f545f414646494c4941544560681b6044820152606401610489565b60008281526007602052604090205460ff161561134e5760405162461bcd60e51b815260206004820152601660248201527553746f72653a494e4143544956455f4c495354494e4760501b6044820152606401610489565b6000828152600860205260409020548111156113a75760405162461bcd60e51b815260206004820152601860248201527753746f72653a494e53554646494349454e545f53544f434b60401b6044820152606401610489565b6000828152600660209081526040808320815160c08101835281546001600160a01b03908116825260018301549482019490945260028201549093169183019190915260038082015460608401526004820154608084019160ff9091169081111561141457611414611dde565b600381111561142557611425611dde565b8152602001600582015481525050905081600860008581526020019081526020016000206000828254611458919061202d565b90915550506060810151600090611470908490611ed7565b905060045460001461154f5760006127106004548361148f9190611ed7565b6114999190611f0c565b90506114a5818361202d565b6003546040516323b872dd60e01b81529193506001600160a01b0316906323b872dd906114fa908a907f0000000000000000000000000000000000000000000000000000000000000000908690600401612044565b602060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190612068565b50505b60035460408084015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91611587918a91908690600401612044565b602060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d99190612068565b5060006115fb86846080015185602001518760008060001b8960a001516118dc565b9050600083600001516001600160a01b03168260405161161b9190611f90565b6000604051808303816000865af19150503d8060008114611658576040519150601f19603f3d011682016040523d82523d6000602084013e61165d565b606091505b505090508061166b57600080fd5b60408051878152602081018790526001600160a01b038916917f66f5cd880edf48cdde6c966e5da0784fcc4c5e85572b8b3b62c4357798d447d7910160405180910390a25050505050505050565b6000546001600160a01b031633146116e35760405162461bcd60e51b815260040161048990611f5b565b6001600160a01b0381166117485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610489565b6117518161188c565b50565b60008281526002602052604081205460ff16156117a65760405162461bcd60e51b815260206004820152601060248201526f10db185a5b58589b194e90955493915160821b6044820152606401610489565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101839052600090605c01604051602081830303815290604052805190602001209050600060018287604001602081019061180c9190611f38565b604080516000815260208181018084529490945260ff909216908201528835606082015290880135608082015260a0016020604051602081039080840390855afa15801561185e573d6000803e3d6000fd5b505060408051601f1901516001600160a01b031660009081526001602052205460ff16979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008760038111156118f2576118f2611dde565b141561194c576040516001600160a01b0389166024820152604481018790526064810186905260840160408051601f198184030181529190526020810180516001600160e01b0316630ab714fb60e11b1790529050611afd565b600187600381111561196057611960611dde565b14156119fe576040805160208082018690528183018790528251808303840181526060909201909252805191012082156119a15761199e83826120a0565b90505b6040516001600160a01b038a16602482015260448101889052606481018790526084810182905260a40160408051601f198184030181529190526020810180516001600160e01b0316632991fa3b60e21b1790529150611afd9050565b6002876003811115611a1257611a12611dde565b1415611a5e576040516001600160a01b038916602482015260440160408051601f198184030181529190526020810180516001600160e01b03166335313c2160e11b1790529050611afd565b6003876003811115611a7257611a72611dde565b1415611afd57604080516020808201869052818301879052825180830384018152606090920190925280519101208215611ab357611ab083826120a0565b90505b6040516001600160a01b038a1660248201526044810182905260640160408051601f198184030181529190526020810180516001600160e01b03166340c10f1960e01b1790529150505b979650505050505050565b80356001600160a01b0381168114611b1f57600080fd5b919050565b600060208284031215611b3657600080fd5b6107ab82611b08565b600060208284031215611b5157600080fd5b5035919050565b60008060408385031215611b6b57600080fd5b50508035926020909101359150565b60008083601f840112611b8c57600080fd5b50813567ffffffffffffffff811115611ba457600080fd5b6020830191508360208260051b8501011115611bbf57600080fd5b9250929050565b600060c08284031215611bd857600080fd5b50919050565b6000806000806000806000878903610200811215611bfb57600080fd5b611c0489611b08565b9750602089013567ffffffffffffffff80821115611c2157600080fd5b611c2d8c838d01611b7a565b909950975060408b0135915080821115611c4657600080fd5b50611c538b828c01611b7a565b9096509450611c6790508a60608b01611bc6565b925060e061011f1982011215611c7c57600080fd5b506101208801905092959891949750929550565b801515811461175157600080fd5b60008060408385031215611cb157600080fd5b611cba83611b08565b91506020830135611cca81611c90565b809150509250929050565b600060c08284031215611ce757600080fd5b6107ab8383611bc6565b60008060008060008060c08789031215611d0a57600080fd5b863560048110611d1957600080fd5b9550611d2760208801611b08565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6000806000806000806101208789031215611d6657600080fd5b611d6f87611b08565b9550602087013567ffffffffffffffff80821115611d8c57600080fd5b611d988a838b01611b7a565b90975095506040890135915080821115611db157600080fd5b50611dbe89828a01611b7a565b9094509250611dd290508860608901611bc6565b90509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60048110611e1257634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03878116825260208201879052851660408201526060810184905260c08101611e496080830185611df4565b8260a0830152979650505050505050565b60008060408385031215611e6d57600080fd5b823591506020830135611cca81611c90565b60008060008060808587031215611e9557600080fd5b611e9e85611b08565b9350611eac60208601611b08565b93969395505050506040820135916060013590565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ef157611ef1611ec1565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611f1b57611f1b611ef6565b500490565b60008219821115611f3357611f33611ec1565b500190565b600060208284031215611f4a57600080fd5b813560ff811681146107ab57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000825160005b81811015611fb15760208186018101518583015201611f97565b81811115611fc0576000828501525b509190910192915050565b8781526001600160a01b03878116602083015260408201879052851660608201526080810184905260a0810183905260e0810161200b60c0830184611df4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008282101561203f5761203f611ec1565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561207a57600080fd5b81516107ab81611c90565b600060001982141561209957612099611ec1565b5060010190565b6000826120af576120af611ef6565b50069056fea2646970667358221220fe20673db2eece1ed012a7d7288a0ce8b1256bedb923b8e1e24e0e85306894eb64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 249,
        "contract": "contracts/store/Store.sol:Store",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15677,
        "contract": "contracts/store/Store.sol:Store",
        "label": "signers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15681,
        "contract": "contracts/store/Store.sol:Store",
        "label": "burned",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16678,
        "contract": "contracts/store/Store.sol:Store",
        "label": "operatingToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)2447"
      },
      {
        "astId": 16680,
        "contract": "contracts/store/Store.sol:Store",
        "label": "feeRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16718,
        "contract": "contracts/store/Store.sol:Store",
        "label": "nextId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 16723,
        "contract": "contracts/store/Store.sol:Store",
        "label": "listings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Listing)16701_storage)"
      },
      {
        "astId": 16727,
        "contract": "contracts/store/Store.sol:Store",
        "label": "inactive",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16731,
        "contract": "contracts/store/Store.sol:Store",
        "label": "stocks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16735,
        "contract": "contracts/store/Store.sol:Store",
        "label": "allowedLister",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16739,
        "contract": "contracts/store/Store.sol:Store",
        "label": "last_purchase",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16741,
        "contract": "contracts/store/Store.sol:Store",
        "label": "affiliateAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2447": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(TokenType)16687": {
        "encoding": "inplace",
        "label": "enum Store.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Listing)16701_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Store.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)16701_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Listing)16701_storage": {
        "encoding": "inplace",
        "label": "struct Store.Listing",
        "members": [
          {
            "astId": 16689,
            "contract": "contracts/store/Store.sol:Store",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16691,
            "contract": "contracts/store/Store.sol:Store",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16693,
            "contract": "contracts/store/Store.sol:Store",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16695,
            "contract": "contracts/store/Store.sol:Store",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16698,
            "contract": "contracts/store/Store.sol:Store",
            "label": "tokentype",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(TokenType)16687"
          },
          {
            "astId": 16700,
            "contract": "contracts/store/Store.sol:Store",
            "label": "maxval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}